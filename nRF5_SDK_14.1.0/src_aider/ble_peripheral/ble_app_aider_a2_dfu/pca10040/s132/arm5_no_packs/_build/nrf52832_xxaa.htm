<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\_build\nrf52832_xxaa.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\_build\nrf52832_xxaa.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060528: Last Updated: Thu Dec 20 09:50:03 2018
<BR><P>
<H3>Maximum Stack Usage =      13296 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; sensor_task &rArr; heart_rate_monitoring2 &rArr; spo2_cal &rArr; ZScore &rArr; Std &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[4]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">NMI_Handler</a><BR>
 <LI><a href="#[5]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">HardFault_Handler</a><BR>
 <LI><a href="#[6]">MemoryManagement_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">MemoryManagement_Handler</a><BR>
 <LI><a href="#[7]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">BusFault_Handler</a><BR>
 <LI><a href="#[8]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">UsageFault_Handler</a><BR>
 <LI><a href="#[9]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">SVC_Handler</a><BR>
 <LI><a href="#[a]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">DebugMon_Handler</a><BR>
 <LI><a href="#[b]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">PendSV_Handler</a><BR>
 <LI><a href="#[c]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">SysTick_Handler</a><BR>
 <LI><a href="#[1c]">CCM_AAR_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">CCM_AAR_IRQHandler</a><BR>
 <LI><a href="#[96]">__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_rspace_close</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[96]">__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_rspace_close</a><BR>
 <LI><a href="#[95]">__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_wspace_close</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[95]">__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_wspace_close</a><BR>
 <LI><a href="#[8c]">nrf_fstorage_sys_evt_handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2f2]">queue_process</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[7]">BusFault_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[1c]">CCM_AAR_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[20]">COMP_LPCOMP_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[a]">DebugMon_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[1b]">ECB_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[31]">FPU_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[13]">GPIOTE_IRQHandler</a> from nrf_drv_gpiote.o(i.GPIOTE_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[5]">HardFault_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[30]">I2S_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2b]">MWU_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[6]">MemoryManagement_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[12]">NFCT_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[4]">NMI_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2a]">PDM_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[d]">POWER_CLOCK_IRQHandler</a> from nrf_drv_clock.o(i.POWER_CLOCK_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[29]">PWM0_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2c]">PWM1_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2d]">PWM2_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[b]">PendSV_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[1f]">QDEC_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[e]">RADIO_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[1a]">RNG_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[18]">RTC0_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[1e]">RTC1_IRQHandler</a> from app_timer.o(i.RTC1_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2f]">RTC2_IRQHandler</a> from nrf_drv_rtc.o(i.RTC2_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[3]">Reset_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[14]">SAADC_IRQHandler</a> from nrf_drv_saadc.o(i.SAADC_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[10]">SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler</a> from nrf_drv_twi.o(i.SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[11]">SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler</a> from nrf_drv_twi.o(i.SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2e]">SPIM2_SPIS2_SPI2_IRQHandler</a> from nrf_drv_spi.o(i.SPIM2_SPIS2_SPI2_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[9]">SVC_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[21]">SWI0_EGU0_IRQHandler</a> from app_timer.o(i.SWI0_EGU0_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[22]">SWI1_EGU1_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[23]">SWI2_EGU2_IRQHandler</a> from nrf_sdh.o(i.SWI2_EGU2_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[24]">SWI3_EGU3_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[25]">SWI4_EGU4_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[26]">SWI5_EGU5_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[c]">SysTick_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[33]">SystemInit</a> from system_nrf52.o(i.SystemInit) referenced from arm_startup_nrf52.o(.text)
 <LI><a href="#[19]">TEMP_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[15]">TIMER0_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[16]">TIMER1_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[17]">TIMER2_IRQHandler</a> from nrf_drv_timer.o(i.TIMER2_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[27]">TIMER3_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[28]">TIMER4_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[f]">UARTE0_UART0_IRQHandler</a> from nrf_drv_uart.o(i.UARTE0_UART0_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[8]">UsageFault_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[1d]">WDT_IRQHandler</a> from nrf_drv_wdt.o(i.WDT_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[34]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from arm_startup_nrf52.o(.text)
 <LI><a href="#[35]">_sputc</a> from printf6.o(i._sputc) referenced from printf6.o(i.__0sprintf$6)
 <LI><a href="#[45]">acc_gyro_timeout_handler</a> from main.o(i.acc_gyro_timeout_handler) referenced from main.o(i.main)
 <LI><a href="#[3a]">alert_timer_handler</a> from bsp.o(i.alert_timer_handler) referenced from bsp.o(i.bsp_init)
 <LI><a href="#[58]">app_error_fault_handler</a> from app_error_weak.o(i.app_error_fault_handler) referenced from nrf_sdh.o(i.nrf_sdh_enable_request)
 <LI><a href="#[7d]">app_shutdown_handler</a> from main.o(i.app_shutdown_handler) referenced from main.o(pwr_mgmt_data0)
 <LI><a href="#[40]">at45dbxx_init</a> from main.o(i.at45dbxx_init) referenced from main.o(i.logging_init)
 <LI><a href="#[41]">at45dbxx_uninit</a> from main.o(i.at45dbxx_uninit) referenced from main.o(i.logging_init)
 <LI><a href="#[80]">ble_advertising_on_ble_evt</a> from ble_advertising.o(i.ble_advertising_on_ble_evt) referenced from main.o(sdh_ble_observers1)
 <LI><a href="#[8d]">ble_advertising_on_sys_evt</a> from ble_advertising.o(i.ble_advertising_on_sys_evt) referenced from main.o(sdh_soc_observers1)
 <LI><a href="#[87]">ble_bas_on_ble_evt</a> from ble_bas.o(i.ble_bas_on_ble_evt) referenced from main.o(sdh_ble_observers2)
 <LI><a href="#[88]">ble_dfu_buttonless_on_ble_evt</a> from ble_dfu.o(i.ble_dfu_buttonless_on_ble_evt) referenced from ble_dfu.o(sdh_ble_observers2)
 <LI><a href="#[8e]">ble_dfu_buttonless_on_sys_evt</a> from ble_dfu_unbonded.o(i.ble_dfu_buttonless_on_sys_evt) referenced from ble_dfu_unbonded.o(sdh_soc_observers1)
 <LI><a href="#[65]">ble_dfu_evt_handler</a> from main.o(i.ble_dfu_evt_handler) referenced from main.o(.constdata)
 <LI><a href="#[84]">ble_dts_on_ble_evt</a> from ble_dts.o(i.ble_dts_on_ble_evt) referenced from main.o(sdh_ble_observers2)
 <LI><a href="#[7e]">ble_evt_handler</a> from ble_conn_state.o(i.ble_evt_handler) referenced from ble_conn_state.o(sdh_ble_observers0)
 <LI><a href="#[81]">ble_evt_handler</a> from bsp_btn_ble.o(i.ble_evt_handler) referenced 3 times from bsp_btn_ble.o(sdh_ble_observers1)
 <LI><a href="#[89]">ble_evt_handler</a> from main.o(i.ble_evt_handler) referenced from main.o(sdh_ble_observers3)
 <LI><a href="#[86]">ble_hrs_on_ble_evt</a> from ble_hrs.o(i.ble_hrs_on_ble_evt) referenced from main.o(sdh_ble_observers2)
 <LI><a href="#[85]">ble_nus_on_ble_evt</a> from ble_nus.o(i.ble_nus_on_ble_evt) referenced from main.o(sdh_ble_observers2)
 <LI><a href="#[66]">bsp_button_event_handler</a> from bsp.o(i.bsp_button_event_handler) referenced 4 times from bsp.o(.constdata)
 <LI><a href="#[46]">bsp_event_handler</a> from main.o(i.bsp_event_handler) referenced from main.o(i.main)
 <LI><a href="#[44]">cancel_sos_timeout_handler</a> from main.o(i.cancel_sos_timeout_handler) referenced from main.o(i.main)
 <LI><a href="#[49]">conn_params_error_handler</a> from main.o(i.conn_params_error_handler) referenced from main.o(i.main)
 <LI><a href="#[42]">display_scrolling_timeout_handler</a> from main.o(i.display_scrolling_timeout_handler) referenced from main.o(i.main)
 <LI><a href="#[74]">erase</a> from nrf_fstorage_sd.o(i.erase) referenced from nrf_fstorage_sd.o(.constdata)
 <LI><a href="#[5b]">fds_evt_handler</a> from peer_data_storage.o(i.fds_evt_handler) referenced from peer_data_storage.o(i.pds_init)
 <LI><a href="#[3c]">flash_erase_chip</a> from nrf_drv_spi_bmi_flash.o(i.flash_erase_chip) referenced from main.o(i.logging_init)
 <LI><a href="#[3d]">flash_erase_page</a> from nrf_drv_spi_bmi_flash.o(i.flash_erase_page) referenced from main.o(i.logging_init)
 <LI><a href="#[3e]">flash_read</a> from nrf_drv_spi_bmi_flash.o(i.flash_read) referenced from main.o(i.logging_init)
 <LI><a href="#[3f]">flash_write</a> from nrf_drv_spi_bmi_flash.o(i.flash_write) referenced from main.o(i.logging_init)
 <LI><a href="#[2]">fs_event_handler</a> from fds.o(i.fs_event_handler) referenced 2 times from fds.o(fs_data)
 <LI><a href="#[47]">gatt_evt_handler</a> from main.o(i.gatt_evt_handler) referenced from main.o(i.main)
 <LI><a href="#[68]">gcm_im_evt_handler</a> from gatt_cache_manager.o(i.gcm_im_evt_handler) referenced from id_manager.o(.constdata)
 <LI><a href="#[6d]">gcm_pdb_evt_handler</a> from gatt_cache_manager.o(i.gcm_pdb_evt_handler) referenced from peer_database.o(.constdata)
 <LI><a href="#[6c]">gscm_pdb_evt_handler</a> from gatts_cache_manager.o(i.gscm_pdb_evt_handler) referenced from peer_database.o(.constdata)
 <LI><a href="#[43]">ibeacon_interval_timeout_handler</a> from main.o(i.ibeacon_interval_timeout_handler) referenced from main.o(i.main)
 <LI><a href="#[70]">init</a> from nrf_fstorage_sd.o(i.init) referenced from nrf_fstorage_sd.o(.constdata)
 <LI><a href="#[79]">internal_transaction_cb</a> from nrf_twi_mngr.o(i.internal_transaction_cb) referenced from nrf_twi_mngr.o(.constdata)
 <LI><a href="#[77]">is_busy</a> from nrf_fstorage_sd.o(i.is_busy) referenced from nrf_fstorage_sd.o(.constdata)
 <LI><a href="#[39]">leds_timer_handler</a> from bsp.o(i.leds_timer_handler) referenced from bsp.o(i.bsp_init)
 <LI><a href="#[32]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[7f]">nrf_ble_gatt_on_ble_evt</a> from nrf_ble_gatt.o(i.nrf_ble_gatt_on_ble_evt) referenced from main.o(sdh_ble_observers1)
 <LI><a href="#[3b]">nrf_delay_ms</a> from main.o(i.nrf_delay_ms) referenced from main.o(i.logging_init)
 <LI><a href="#[4b]">nrf_delay_ms</a> from nrf_drv_ssd1306.o(i.nrf_delay_ms) referenced from nrf_drv_ssd1306.o(i.nrf_drv_a2_oled_init)
 <LI><a href="#[50]">nrf_delay_ms</a> from nrf_drv_spi_bmi_flash.o(i.nrf_delay_ms) referenced from nrf_drv_spi_bmi_flash.o(i.nrf_drv_bmi160_spi_int)
 <LI><a href="#[50]">nrf_delay_ms</a> from nrf_drv_spi_bmi_flash.o(i.nrf_delay_ms) referenced from nrf_drv_spi_bmi_flash.o(i.nrf_drv_flash_spi_init)
 <LI><a href="#[53]">nrf_delay_ms</a> from nrf_drv_i2c_max_temp.o(i.nrf_delay_ms) referenced from nrf_drv_i2c_max_temp.o(i.nrf_drv_max30102_reg_i2c_func)
 <LI><a href="#[3b]">nrf_delay_ms</a> from main.o(i.nrf_delay_ms) referenced from main.o(i.sync_nus_init)
 <LI><a href="#[4c]">nrf_drv_i2c_0_read</a> from nrf_drv_ssd1306.o(i.nrf_drv_i2c_0_read) referenced from nrf_drv_ssd1306.o(i.nrf_drv_a2_oled_init)
 <LI><a href="#[4d]">nrf_drv_i2c_0_write</a> from nrf_drv_ssd1306.o(i.nrf_drv_i2c_0_write) referenced from nrf_drv_ssd1306.o(i.nrf_drv_a2_oled_init)
 <LI><a href="#[54]">nrf_drv_i2c_max30102_read</a> from nrf_drv_i2c_max_temp.o(i.nrf_drv_i2c_max30102_read) referenced from nrf_drv_i2c_max_temp.o(i.nrf_drv_max30102_reg_i2c_func)
 <LI><a href="#[55]">nrf_drv_i2c_max30102_write</a> from nrf_drv_i2c_max_temp.o(i.nrf_drv_i2c_max30102_write) referenced from nrf_drv_i2c_max_temp.o(i.nrf_drv_max30102_reg_i2c_func)
 <LI><a href="#[4e]">nrf_drv_spi_bmi160_read</a> from nrf_drv_spi_bmi_flash.o(i.nrf_drv_spi_bmi160_read) referenced from nrf_drv_spi_bmi_flash.o(i.nrf_drv_bmi160_spi_int)
 <LI><a href="#[4f]">nrf_drv_spi_bmi160_write</a> from nrf_drv_spi_bmi_flash.o(i.nrf_drv_spi_bmi160_write) referenced from nrf_drv_spi_bmi_flash.o(i.nrf_drv_bmi160_spi_int)
 <LI><a href="#[51]">nrf_drv_spi_flash_read</a> from nrf_drv_spi_bmi_flash.o(i.nrf_drv_spi_flash_read) referenced from nrf_drv_spi_bmi_flash.o(i.nrf_drv_flash_spi_init)
 <LI><a href="#[52]">nrf_drv_spi_flash_write</a> from nrf_drv_spi_bmi_flash.o(i.nrf_drv_spi_flash_write) referenced from nrf_drv_spi_bmi_flash.o(i.nrf_drv_flash_spi_init)
 <LI><a href="#[8a]">nrf_fstorage_sdh_req_handler</a> from nrf_fstorage_sd.o(i.nrf_fstorage_sdh_req_handler) referenced from nrf_fstorage_sd.o(sdh_req_observers0)
 <LI><a href="#[92]">nrf_fstorage_sdh_state_handler</a> from nrf_fstorage_sd.o(i.nrf_fstorage_sdh_state_handler) referenced from nrf_fstorage_sd.o(sdh_state_observers0)
 <LI><a href="#[8c]">nrf_fstorage_sys_evt_handler</a> from nrf_fstorage_sd.o(i.nrf_fstorage_sys_evt_handler) referenced from nrf_fstorage_sd.o(sdh_soc_observers0)
 <LI><a href="#[7c]">nrf_log_backend_rtt_flush</a> from nrf_log_backend_rtt.o(i.nrf_log_backend_rtt_flush) referenced from nrf_log_backend_rtt.o(.constdata)
 <LI><a href="#[7b]">nrf_log_backend_rtt_panic_set</a> from nrf_log_backend_rtt.o(i.nrf_log_backend_rtt_panic_set) referenced from nrf_log_backend_rtt.o(.constdata)
 <LI><a href="#[7a]">nrf_log_backend_rtt_put</a> from nrf_log_backend_rtt.o(i.nrf_log_backend_rtt_put) referenced from nrf_log_backend_rtt.o(.constdata)
 <LI><a href="#[57]">nrf_pwr_mgmt_timeout_handler</a> from nrf_pwr_mgmt.o(i.nrf_pwr_mgmt_timeout_handler) referenced from nrf_pwr_mgmt.o(i.nrf_pwr_mgmt_init)
 <LI><a href="#[8f]">nrf_sdh_ble_evts_poll</a> from nrf_sdh_ble.o(i.nrf_sdh_ble_evts_poll) referenced from nrf_sdh_ble.o(sdh_stack_observers0)
 <LI><a href="#[90]">nrf_sdh_soc_evts_poll</a> from nrf_sdh_soc.o(i.nrf_sdh_soc_evts_poll) referenced from nrf_sdh_soc.o(sdh_stack_observers0)
 <LI><a href="#[5e]">nus_data_handler</a> from main.o(i.nus_data_handler) referenced from main.o(i.services_init)
 <LI><a href="#[60]">nus_sent_to_host</a> from main.o(i.nus_sent_to_host) referenced from main.o(i.sync_nus_init)
 <LI><a href="#[37]">on_adv_evt</a> from main.o(i.on_adv_evt) referenced from main.o(i.advertising_alert)
 <LI><a href="#[37]">on_adv_evt</a> from main.o(i.on_adv_evt) referenced from main.o(i.advertising_normal)
 <LI><a href="#[37]">on_adv_evt</a> from main.o(i.on_adv_evt) referenced from main.o(i.main)
 <LI><a href="#[48]">on_conn_params_evt</a> from main.o(i.on_conn_params_evt) referenced from main.o(i.main)
 <LI><a href="#[5d]">on_cts_c_evt</a> from main.o(i.on_cts_c_evt) referenced from main.o(i.services_init)
 <LI><a href="#[69]">pdb_pds_evt_handler</a> from peer_database.o(i.pdb_pds_evt_handler) referenced from peer_data_storage.o(.constdata)
 <LI><a href="#[5c]">pm_evt_handler</a> from main.o(i.pm_evt_handler) referenced from main.o(i.peer_manager_init)
 <LI><a href="#[1]">pm_gcm_evt_handler</a> from peer_manager.o(i.pm_gcm_evt_handler) referenced 2 times from gatt_cache_manager.o(.data)
 <LI><a href="#[67]">pm_im_evt_handler</a> from peer_manager.o(i.pm_im_evt_handler) referenced from id_manager.o(.constdata)
 <LI><a href="#[6a]">pm_pdb_evt_handler</a> from peer_manager.o(i.pm_pdb_evt_handler) referenced from peer_database.o(.constdata)
 <LI><a href="#[6f]">pm_sm_evt_handler</a> from peer_manager.o(i.pm_sm_evt_handler) referenced from security_manager.o(.constdata)
 <LI><a href="#[72]">read</a> from nrf_fstorage_sd.o(i.read) referenced from nrf_fstorage_sd.o(.constdata)
 <LI><a href="#[75]">rmap</a> from nrf_fstorage_sd.o(i.rmap) referenced from nrf_fstorage_sd.o(.constdata)
 <LI><a href="#[4a]">rtc_handler</a> from main.o(i.rtc_handler) referenced from main.o(i.main)
 <LI><a href="#[36]">saadc_event_handler</a> from main.o(i.saadc_event_handler) referenced from main.o(i.adc_init)
 <LI><a href="#[61]">save_config_to_flash_memory</a> from main.o(i.save_config_to_flash_memory) referenced from main.o(i.sync_nus_init)
 <LI><a href="#[91]">sd_state_evt_handler</a> from nrf_drv_clock.o(i.sd_state_evt_handler) referenced from nrf_drv_clock.o(sdh_state_observers0)
 <LI><a href="#[56]">serial_tx</a> from nrf_log_backend_rtt.o(i.serial_tx) referenced from nrf_log_backend_rtt.o(i.nrf_log_backend_rtt_put)
 <LI><a href="#[63]">sleep_flash_memory</a> from main.o(i.sleep_flash_memory) referenced from main.o(i.sync_nus_init)
 <LI><a href="#[6b]">sm_pdb_evt_handler</a> from security_manager.o(i.sm_pdb_evt_handler) referenced from peer_database.o(.constdata)
 <LI><a href="#[6e]">sm_smd_evt_handler</a> from security_manager.o(i.sm_smd_evt_handler) referenced from security_dispatcher.o(.constdata)
 <LI><a href="#[8b]">soc_evt_handler</a> from nrf_drv_clock.o(i.soc_evt_handler) referenced from nrf_drv_clock.o(sdh_soc_observers0)
 <LI><a href="#[59]">spi_event_handler</a> from nrf_spi_mngr.o(i.spi_event_handler) referenced from nrf_spi_mngr.o(i.nrf_spi_mngr_init)
 <LI><a href="#[59]">spi_event_handler</a> from nrf_spi_mngr.o(i.spi_event_handler) referenced from nrf_spi_mngr.o(i.start_pending_transaction)
 <LI><a href="#[78]">spi_internal_transaction_cb</a> from nrf_spi_mngr.o(i.spi_internal_transaction_cb) referenced from nrf_spi_mngr.o(.constdata)
 <LI><a href="#[5f]">timer_hr_event_handler</a> from main.o(i.timer_hr_event_handler) referenced from main.o(i.start_timer)
 <LI><a href="#[5a]">twi_event_handler</a> from nrf_twi_mngr.o(i.twi_event_handler) referenced from nrf_twi_mngr.o(i.nrf_twi_mngr_init)
 <LI><a href="#[5a]">twi_event_handler</a> from nrf_twi_mngr.o(i.twi_event_handler) referenced from nrf_twi_mngr.o(i.start_pending_transaction)
 <LI><a href="#[71]">uninit</a> from nrf_fstorage_sd.o(i.uninit) referenced from nrf_fstorage_sd.o(.constdata)
 <LI><a href="#[38]">update_timeout_handler</a> from ble_conn_params.o(i.update_timeout_handler) referenced from ble_conn_params.o(i.ble_conn_params_init)
 <LI><a href="#[62]">wakeup_flash_memory</a> from main.o(i.wakeup_flash_memory) referenced from main.o(i.sync_nus_init)
 <LI><a href="#[64]">wdt_event_handler</a> from main.o(i.wdt_event_handler) referenced from main.o(i.wdt_init)
 <LI><a href="#[76]">wmap</a> from nrf_fstorage_sd.o(i.wmap) referenced from nrf_fstorage_sd.o(.constdata)
 <LI><a href="#[73]">write</a> from nrf_fstorage_sd.o(i.write) referenced from nrf_fstorage_sd.o(.constdata)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[34]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(.text)
</UL>
<P><STRONG><a name="[3ab]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[93]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[ac]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[3ac]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[3ad]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[3ae]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[3af]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[3b0]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[3b1]"></a>__asm___5_fds_c_m_fs__nrf_atomic_internal_mov</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fds.o(.emb_text), UNUSED)

<P><STRONG><a name="[204]"></a>__asm___5_fds_c_m_fs__nrf_atomic_internal_orr</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fds.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_init
</UL>

<P><STRONG><a name="[3b2]"></a>__asm___5_fds_c_m_fs__nrf_atomic_internal_and</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fds.o(.emb_text), UNUSED)

<P><STRONG><a name="[3b3]"></a>__asm___5_fds_c_m_fs__nrf_atomic_internal_eor</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fds.o(.emb_text), UNUSED)

<P><STRONG><a name="[20d]"></a>__asm___5_fds_c_m_fs__nrf_atomic_internal_add</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fds.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_register
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_open
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_start
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_add
</UL>

<P><STRONG><a name="[36f]"></a>__asm___5_fds_c_m_fs__nrf_atomic_internal_sub</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fds.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>

<P><STRONG><a name="[2aa]"></a>__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_wspace_req</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, nrf_atfifo.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_alloc
</UL>

<P><STRONG><a name="[95]"></a>__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_wspace_close</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nrf_atfifo.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_wspace_close
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_wspace_close
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_put
</UL>

<P><STRONG><a name="[2ad]"></a>__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_rspace_req</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, nrf_atfifo.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_get
</UL>

<P><STRONG><a name="[96]"></a>__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_rspace_close</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nrf_atfifo.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_rspace_close
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_rspace_close
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_free
</UL>

<P><STRONG><a name="[2a9]"></a>__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_space_clear</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, nrf_atfifo.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_clear
</UL>

<P><STRONG><a name="[370]"></a>__asm___17_nrf_fstorage_sd_c_6e7dbfe9__nrf_atomic_internal_mov</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, nrf_fstorage_sd.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_start
</UL>

<P><STRONG><a name="[260]"></a>__asm___17_nrf_fstorage_sd_c_6e7dbfe9__nrf_atomic_internal_orr</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_fstorage_sd.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
</UL>

<P><STRONG><a name="[3b4]"></a>__asm___17_nrf_fstorage_sd_c_6e7dbfe9__nrf_atomic_internal_and</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_fstorage_sd.o(.emb_text), UNUSED)

<P><STRONG><a name="[3b5]"></a>__asm___17_nrf_fstorage_sd_c_6e7dbfe9__nrf_atomic_internal_eor</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_fstorage_sd.o(.emb_text), UNUSED)

<P><STRONG><a name="[3b6]"></a>__asm___17_nrf_fstorage_sd_c_6e7dbfe9__nrf_atomic_internal_add</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_fstorage_sd.o(.emb_text), UNUSED)

<P><STRONG><a name="[3b7]"></a>__asm___17_nrf_fstorage_sd_c_6e7dbfe9__nrf_atomic_internal_sub</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_fstorage_sd.o(.emb_text), UNUSED)

<P><STRONG><a name="[3b8]"></a>__asm___12_nrf_memobj_c_9bb9f865__nrf_atomic_internal_mov</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, nrf_memobj.o(.emb_text), UNUSED)

<P><STRONG><a name="[3b9]"></a>__asm___12_nrf_memobj_c_9bb9f865__nrf_atomic_internal_orr</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_memobj.o(.emb_text), UNUSED)

<P><STRONG><a name="[3ba]"></a>__asm___12_nrf_memobj_c_9bb9f865__nrf_atomic_internal_and</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_memobj.o(.emb_text), UNUSED)

<P><STRONG><a name="[3bb]"></a>__asm___12_nrf_memobj_c_9bb9f865__nrf_atomic_internal_eor</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_memobj.o(.emb_text), UNUSED)

<P><STRONG><a name="[30a]"></a>__asm___12_nrf_memobj_c_9bb9f865__nrf_atomic_internal_add</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_memobj.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_get
</UL>

<P><STRONG><a name="[30c]"></a>__asm___12_nrf_memobj_c_9bb9f865__nrf_atomic_internal_sub</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_memobj.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_put
</UL>

<P><STRONG><a name="[30e]"></a>__asm___14_nrf_pwr_mgmt_c_f22138a6__nrf_atomic_internal_mov</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, nrf_pwr_mgmt.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pwr_mgmt_shutdown
</UL>

<P><STRONG><a name="[3bc]"></a>__asm___14_nrf_pwr_mgmt_c_f22138a6__nrf_atomic_internal_orr</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_pwr_mgmt.o(.emb_text), UNUSED)

<P><STRONG><a name="[3bd]"></a>__asm___14_nrf_pwr_mgmt_c_f22138a6__nrf_atomic_internal_and</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_pwr_mgmt.o(.emb_text), UNUSED)

<P><STRONG><a name="[3be]"></a>__asm___14_nrf_pwr_mgmt_c_f22138a6__nrf_atomic_internal_eor</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_pwr_mgmt.o(.emb_text), UNUSED)

<P><STRONG><a name="[3bf]"></a>__asm___14_nrf_pwr_mgmt_c_f22138a6__nrf_atomic_internal_add</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_pwr_mgmt.o(.emb_text), UNUSED)

<P><STRONG><a name="[3c0]"></a>__asm___14_nrf_pwr_mgmt_c_f22138a6__nrf_atomic_internal_sub</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_pwr_mgmt.o(.emb_text), UNUSED)

<P><STRONG><a name="[3c1]"></a>__asm___18_nrf_log_frontend_c_bc460776__nrf_atomic_internal_mov</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, nrf_log_frontend.o(.emb_text), UNUSED)

<P><STRONG><a name="[2ae]"></a>__asm___18_nrf_log_frontend_c_bc460776__nrf_atomic_internal_orr</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_log_frontend.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_flag_set
</UL>

<P><STRONG><a name="[275]"></a>__asm___18_nrf_log_frontend_c_bc460776__nrf_atomic_internal_and</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_log_frontend.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_skip
</UL>

<P><STRONG><a name="[3c2]"></a>__asm___18_nrf_log_frontend_c_bc460776__nrf_atomic_internal_eor</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_log_frontend.o(.emb_text), UNUSED)

<P><STRONG><a name="[3c3]"></a>__asm___18_nrf_log_frontend_c_bc460776__nrf_atomic_internal_add</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_log_frontend.o(.emb_text), UNUSED)

<P><STRONG><a name="[3c4]"></a>__asm___18_nrf_log_frontend_c_bc460776__nrf_atomic_internal_sub</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_log_frontend.o(.emb_text), UNUSED)

<P><STRONG><a name="[3]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>MemoryManagement_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryManagement_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryManagement_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>CCM_AAR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCM_AAR_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCM_AAR_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>COMP_LPCOMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>ECB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>I2S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>MWU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>NFCT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>PDM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>PWM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>PWM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>PWM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>QDEC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>RADIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>RTC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>SWI1_EGU1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>SWI3_EGU3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>SWI4_EGU4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>SWI5_EGU5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>TEMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>TIMER0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIMER4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[97]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_wdt_init
</UL>

<P><STRONG><a name="[305]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_hexdump_entry_process
</UL>

<P><STRONG><a name="[3c5]"></a>___aeabi_memcpy8$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[d0]"></a>__aeabi_memcpy</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_data_encode
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manuf_specific_data_encode
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_nus_special_pedometer_reg_mngr
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_nus_special_hr_spo2_temp_reg_mngr
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_nus_special_free_fall_reg_mngr
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_nus_special_free_fall_raw_data_reg_mngr
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_nus_special_button_alert_reg_mngr
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_nus_normal_register_mngr
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ibeacon_interval_timeout_handler
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;que_append
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_nus_append_command
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_display
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_hexdump
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logging_queue_initial
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dts_on_ble_evt
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_read
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dfu_buttonless_on_ctrl_pt_write
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_push
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_generic_pop
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memobj_op
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteNoCheck
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteBlocking
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_i2c_max30102_write
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_bmi160_write
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_bmi160_read
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_i2c_0_write
</UL>

<P><STRONG><a name="[e8]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_ble_evt_handler
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_unexpected_error
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_proc_start
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_sec_failure
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logging_init
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ibeacon_interval_timeout_handler
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_time
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_gatt_on_ble_evt
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_init
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_init
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2_check_config
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_config_to_flash_memory
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_delete
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_ble_evt_handler
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_ble_evt_handler
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_send_in_evt
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_unexpected_error
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pending_flags_check
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_key_list_get
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twi_mngr_perform
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_spi_mngr_perform
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_flash_write
</UL>

<P><STRONG><a name="[199]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hrs_rr_interval_add
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hrm_encode
</UL>

<P><STRONG><a name="[3c6]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[3c7]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[9b]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_nus_special_pedometer_reg_mngr
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_nus_special_hr_spo2_temp_reg_mngr
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_nus_special_free_fall_reg_mngr
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_nus_special_button_alert_reg_mngr
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[3c8]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[3c9]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[9a]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_keyset_fill
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ibeacon_interval_timeout_handler
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logging_queue_initial
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_init
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_mutex_init
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_bmi160_write
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_bmi160_read
</UL>

<P><STRONG><a name="[e6]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;events_send_from_err_code
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_config_req
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_pdb_evt_handler
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;services_init
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_normal
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_alert
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_clear_display
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_peers_delete
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_init
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2_write_pedo_meter_log
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2_write_hr_spo2_temp_log
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2_write_button_alert_log
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2_check_config
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_init
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_evt_handler
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ah
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_apply_in_evt
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dfu_buttonless_char_add
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_char_add
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_char_add
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heart_rate_measurement_char_add
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;body_sensor_location_char_add
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_add
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_level_char_add
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;week_of_day_char_add
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;date_and_time_char_add
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uninit
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_send
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_buf_get
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_put
</UL>

<P><STRONG><a name="[3ca]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[9c]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[19e]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_srv_ascii_to_utf8
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_fmt
</UL>

<P><STRONG><a name="[125]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_master_ids_compare
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_is_duplicate_bonding_data
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_address_resolve
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_compare
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_pending_transaction
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_pending_transaction
</UL>

<P><STRONG><a name="[cf]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoInit
</UL>

<P><STRONG><a name="[9d]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spo2_cal
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max30102_readTemperature
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_dc_remover
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heart_rate_cal_v3
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btw_fileter_100Hz_cf_1Hz_order2
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_task
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZScore
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Std
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
</UL>

<P><STRONG><a name="[a1]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spo2_cal
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_dc_remover
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;determine_day_of_week_by_gauss
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZScore
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[a2]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spo2_cal
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[a3]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spo2_cal
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pedometer_processing
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max30102_readTemperature
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_dc_remover
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btw_fileter_100Hz_cf_1Hz_order2
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max30102_tmp007_init
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;determine_day_of_week_by_gauss
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZScore
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
</UL>

<P><STRONG><a name="[a4]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spo2_cal
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pedometer_processing
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
</UL>

<P><STRONG><a name="[a5]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spo2_cal
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max30102_readTemperature
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_dc_remover
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btw_fileter_100Hz_cf_1Hz_order2
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;determine_day_of_week_by_gauss
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[a6]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spo2_cal
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pedometer_processing
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max30102_readTemperature
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heart_rate_monitoring2
</UL>

<P><STRONG><a name="[a7]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spo2_cal
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_dc_remover
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btw_fileter_100Hz_cf_1Hz_order2
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;determine_day_of_week_by_gauss
</UL>

<P><STRONG><a name="[a8]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spo2_cal
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_task
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max30102_tmp007_init
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heart_rate_monitoring2
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZScore
</UL>

<P><STRONG><a name="[c7]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heart_rate_cal_v3
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZScore
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Std
</UL>

<P><STRONG><a name="[3cb]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text), UNUSED)

<P><STRONG><a name="[357]"></a>__aeabi_cdcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pedometer_cal_step_rate_factor
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pedometer_cal_metabolic_factor
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spo2_cal
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pedometer_processing
</UL>

<P><STRONG><a name="[ce]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pedometer_cal_step_rate_factor
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pedometer_cal_metabolic_factor
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spo2_cal
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pedometer_processing
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZScore
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[a9]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heart_rate_cal_v3
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Std
</UL>

<P><STRONG><a name="[3cc]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[df]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[99]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[3cd]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[98]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[3ce]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[9e]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[3cf]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[3d0]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[aa]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[3d1]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[a0]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[9f]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>

<P><STRONG><a name="[dc]"></a>__ARM_scalbn</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, dscalb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[3d2]"></a>scalbn</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, dscalb.o(.text), UNUSED)

<P><STRONG><a name="[ab]"></a>_dsqrt</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, dsqrt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>

<P><STRONG><a name="[94]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[3d3]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[3d4]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[3d5]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[cd]"></a>Average</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, heart_rate_cal.o(i.Average))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZScore
</UL>

<P><STRONG><a name="[13]"></a>GPIOTE_IRQHandler</STRONG> (Thumb, 404 bytes, Stack size 56 bytes, nrf_drv_gpiote.o(i.GPIOTE_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = GPIOTE_IRQHandler &rArr; nrf_gpio_ports_read
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_is_set
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_clear
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_ports_read
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_sense_set
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_bitmask_bit_is_set
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_port_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>POWER_CLOCK_IRQHandler</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, nrf_drv_clock.o(i.POWER_CLOCK_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = POWER_CLOCK_IRQHandler &rArr; clock_clk_started_notify
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_clock_event_clear
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_clock_event_check
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_clk_started_notify
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>RTC1_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, app_timer.o(i.RTC1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RTC1_IRQHandler &rArr; timer_timeouts_check
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>RTC2_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_drv_rtc.o(i.RTC2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RTC2_IRQHandler &rArr; nrf_drv_rtc_int_handler &rArr; nrf_rtc_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_rtc_int_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>SAADC_IRQHandler</STRONG> (Thumb, 318 bytes, Stack size 40 bytes, nrf_drv_saadc.o(i.SAADC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SAADC_IRQHandler &rArr; nrf_saadc_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_event_clear
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_event_check
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_buffer_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[bb]"></a>SEGGER_RTT_Init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, segger_rtt.o(i.SEGGER_RTT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SEGGER_RTT_Init &rArr; _DoInit
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_rtt_init
</UL>

<P><STRONG><a name="[bd]"></a>SEGGER_RTT_WriteNoLock</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, segger_rtt.o(i.SEGGER_RTT_WriteNoLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteNoCheck
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteBlocking
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetAvailWriteSpace
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_tx
</UL>

<P><STRONG><a name="[10]"></a>SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrf_drv_twi.o(i.SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler &rArr; irq_handler_twim &rArr; nrf_twim_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler_twim
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_drv_twi.o(i.SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler &rArr; irq_handler_twim &rArr; nrf_twim_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler_twim
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPIM2_SPIS2_SPI2_IRQHandler</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, nrf_drv_spi.o(i.SPIM2_SPIS2_SPI2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPIM2_SPIS2_SPI2_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_spim_event_check
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>SWI0_EGU0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, app_timer.o(i.SWI0_EGU0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SWI0_EGU0_IRQHandler &rArr; timer_list_handler &rArr; list_insertions_handler &rArr; timer_list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>SWI2_EGU2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, nrf_sdh.o(i.SWI2_EGU2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SWI2_EGU2_IRQHandler &rArr; nrf_sdh_evts_poll &rArr; nrf_section_iter_next &rArr; nrf_section_iter_item_set
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_evts_poll
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[c6]"></a>Std</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, heart_rate_cal.o(i.Std))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = Std &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZScore
</UL>

<P><STRONG><a name="[33]"></a>SystemInit</STRONG> (Thumb, 690 bytes, Stack size 20 bytes, system_nrf52.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(.text)
</UL>
<P><STRONG><a name="[17]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, nrf_drv_timer.o(i.TIMER2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIMER2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>UARTE0_UART0_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, nrf_drv_uart.o(i.UARTE0_UART0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = UARTE0_UART0_IRQHandler &rArr; uart_irq_handler &rArr; tx_done_event
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uarte_irq_handler
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>WDT_IRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, nrf_drv_wdt.o(i.WDT_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WDT_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[cc]"></a>ZScore</STRONG> (Thumb, 390 bytes, Stack size 9704 bytes, heart_rate_cal.o(i.ZScore))
<BR><BR>[Stack]<UL><LI>Max Depth = 10040<LI>Call Chain = ZScore &rArr; Std &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Std
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Average
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spo2_cal
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heart_rate_cal_v3
</UL>

<P><STRONG><a name="[d1]"></a>__0sprintf$6</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printf6.o(i.__0sprintf$6), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[3d6]"></a>__1sprintf$6</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf6.o(i.__0sprintf$6), UNUSED)

<P><STRONG><a name="[1d8]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf6.o(i.__0sprintf$6))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_battery
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_time
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_temperature
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_step_count
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_mini_time
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_distanc_cal
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_o2
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_heart_reate
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_fall_alert
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_countdown_alert
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_bt_alert
</UL>

<P><STRONG><a name="[dd]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[c8]"></a>__hardfp_pow</STRONG> (Thumb, 3072 bytes, Stack size 192 bytes, pow.o(i.__hardfp_pow))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heart_rate_cal_v3
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Std
</UL>

<P><STRONG><a name="[c9]"></a>__hardfp_sqrt</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, sqrt.o(i.__hardfp_sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __hardfp_sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heart_rate_cal_v3
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Std
</UL>

<P><STRONG><a name="[db]"></a>__kernel_poly</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[d5]"></a>__mathlib_dbl_divzero</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_divzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __mathlib_dbl_divzero &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[d3]"></a>__mathlib_dbl_infnan2</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_infnan2 &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[d9]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[d6]"></a>__mathlib_dbl_overflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_overflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_overflow &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[da]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_underflow &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[3d7]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[3d8]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[3d9]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[d4]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[e1]"></a>a2_button_alert_buf_is_full</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, a2_logging_mngr.o(i.a2_button_alert_buf_is_full))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = a2_button_alert_buf_is_full &rArr; que_isFull
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;que_isFull
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2_logic_task
</UL>

<P><STRONG><a name="[e3]"></a>a2_check_config</STRONG> (Thumb, 222 bytes, Stack size 112 bytes, a2_logging_mngr.o(i.a2_check_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = a2_check_config &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2_read_config
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2_write_config
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logging_init
</UL>

<P><STRONG><a name="[109]"></a>a2_pedo_buf_is_full</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, a2_logging_mngr.o(i.a2_pedo_buf_is_full))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = a2_pedo_buf_is_full &rArr; que_isFull
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;que_isFull
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_task
</UL>

<P><STRONG><a name="[103]"></a>a2_read_button_alert_last_buffer</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, a2_logging_mngr.o(i.a2_read_button_alert_last_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = a2_read_button_alert_last_buffer &rArr; flash_read &rArr; at45db_page_to_buf &rArr; at45db_busy_wait &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;que_r
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2_logic_task
</UL>

<P><STRONG><a name="[10b]"></a>a2_read_button_alert_log_by_page</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, a2_logging_mngr.o(i.a2_read_button_alert_log_by_page))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = a2_read_button_alert_log_by_page &rArr; flash_read &rArr; at45db_page_to_buf &rArr; at45db_busy_wait &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read
</UL>
<BR>[Called By]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_nus_special_button_alert_reg_mngr
</UL>

<P><STRONG><a name="[10c]"></a>a2_read_button_alert_log_by_queue</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, a2_logging_mngr.o(i.a2_read_button_alert_log_by_queue))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = a2_read_button_alert_log_by_queue &rArr; flash_read &rArr; at45db_page_to_buf &rArr; at45db_busy_wait &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;que_front
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read
</UL>
<BR>[Called By]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_nus_special_button_alert_reg_mngr
</UL>

<P><STRONG><a name="[e4]"></a>a2_read_config</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, a2_logging_mngr.o(i.a2_read_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = a2_read_config
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2_check_config
</UL>

<P><STRONG><a name="[10e]"></a>a2_read_free_fall_alert_log_by_page</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, a2_logging_mngr.o(i.a2_read_free_fall_alert_log_by_page))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = a2_read_free_fall_alert_log_by_page &rArr; flash_read &rArr; at45db_page_to_buf &rArr; at45db_busy_wait &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read
</UL>
<BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_nus_special_free_fall_reg_mngr
</UL>

<P><STRONG><a name="[10f]"></a>a2_read_free_fall_alert_log_by_queue</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, a2_logging_mngr.o(i.a2_read_free_fall_alert_log_by_queue))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = a2_read_free_fall_alert_log_by_queue &rArr; flash_read &rArr; at45db_page_to_buf &rArr; at45db_busy_wait &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;que_front
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read
</UL>
<BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_nus_special_free_fall_reg_mngr
</UL>

<P><STRONG><a name="[110]"></a>a2_read_hr_spo2_temp_log_by_page</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, a2_logging_mngr.o(i.a2_read_hr_spo2_temp_log_by_page))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = a2_read_hr_spo2_temp_log_by_page &rArr; flash_read &rArr; at45db_page_to_buf &rArr; at45db_busy_wait &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read
</UL>
<BR>[Called By]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_nus_special_hr_spo2_temp_reg_mngr
</UL>

<P><STRONG><a name="[111]"></a>a2_read_hr_spo2_temp_log_by_queue</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, a2_logging_mngr.o(i.a2_read_hr_spo2_temp_log_by_queue))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = a2_read_hr_spo2_temp_log_by_queue &rArr; flash_read &rArr; at45db_page_to_buf &rArr; at45db_busy_wait &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;que_front
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read
</UL>
<BR>[Called By]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_nus_special_hr_spo2_temp_reg_mngr
</UL>

<P><STRONG><a name="[112]"></a>a2_read_pedo_meter_log_by_page</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, a2_logging_mngr.o(i.a2_read_pedo_meter_log_by_page))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = a2_read_pedo_meter_log_by_page &rArr; flash_read &rArr; at45db_page_to_buf &rArr; at45db_busy_wait &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read
</UL>
<BR>[Called By]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_nus_special_pedometer_reg_mngr
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_setup_time_from_wdt_status
</UL>

<P><STRONG><a name="[113]"></a>a2_read_pedo_meter_log_by_queue</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, a2_logging_mngr.o(i.a2_read_pedo_meter_log_by_queue))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = a2_read_pedo_meter_log_by_queue &rArr; flash_read &rArr; at45db_page_to_buf &rArr; at45db_busy_wait &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;que_front
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read
</UL>
<BR>[Called By]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_nus_special_pedometer_reg_mngr
</UL>

<P><STRONG><a name="[115]"></a>a2_read_queue_config</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, a2_logging_mngr.o(i.a2_read_queue_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = a2_read_queue_config &rArr; flash_read &rArr; at45db_page_to_buf &rArr; at45db_busy_wait &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logging_queue_initial
</UL>

<P><STRONG><a name="[116]"></a>a2_read_raw_data_free_fall_log_by_queue</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, a2_logging_mngr.o(i.a2_read_raw_data_free_fall_log_by_queue))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = a2_read_raw_data_free_fall_log_by_queue &rArr; flash_read &rArr; at45db_page_to_buf &rArr; at45db_busy_wait &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;que_front
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read
</UL>
<BR>[Called By]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_nus_special_free_fall_raw_data_reg_mngr
</UL>

<P><STRONG><a name="[396]"></a>a2_read_reg</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, a2_logging_mngr.o(i.a2_read_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = a2_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_nus_normal_register_mngr
</UL>

<P><STRONG><a name="[130]"></a>a2_reg_intial</STRONG> (Thumb, 792 bytes, Stack size 8 bytes, a2_logging_mngr.o(i.a2_reg_intial))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = a2_reg_intial
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aider_a2_info_init
</UL>

<P><STRONG><a name="[104]"></a>a2_save_button_alert_to_buf</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, a2_logging_mngr.o(i.a2_save_button_alert_to_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = a2_save_button_alert_to_buf &rArr; flash_erase_page &rArr; at45db_erase_page &rArr; at45db_busy_wait &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;que_pop
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;que_isFull
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;que_front
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;que_append
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_page
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2_logic_task
</UL>

<P><STRONG><a name="[119]"></a>a2_save_hr_spo2_to_buf</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, a2_logging_mngr.o(i.a2_save_hr_spo2_to_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = a2_save_hr_spo2_to_buf &rArr; flash_erase_page &rArr; at45db_erase_page &rArr; at45db_busy_wait &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;que_pop
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;que_isFull
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;que_front
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;que_append
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_page
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_task
</UL>

<P><STRONG><a name="[11a]"></a>a2_save_pedo_meter_to_buf</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, a2_logging_mngr.o(i.a2_save_pedo_meter_to_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = a2_save_pedo_meter_to_buf &rArr; flash_erase_page &rArr; at45db_erase_page &rArr; at45db_busy_wait &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;que_pop
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;que_isFull
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;que_front
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;que_append
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_page
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_task
</UL>

<P><STRONG><a name="[102]"></a>a2_spi_int</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, main.o(i.a2_spi_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = a2_spi_int &rArr; nrf_drv_a2_spi_init &rArr; nrf_spi_mngr_init &rArr; nrf_drv_spi_init &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_a2_spi_init
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2_logic_task
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeup_flash_memory
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_task
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_config_to_flash_memory
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_to_ultra_power_save_mode
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_to_power_full_mode
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_to_low_power_mode
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_setup_time_from_wdt_status
</UL>

<P><STRONG><a name="[105]"></a>a2_write_button_alert_last_buffer</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, a2_logging_mngr.o(i.a2_write_button_alert_last_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = a2_write_button_alert_last_buffer &rArr; flash_write &rArr; at45db_write_buffer &rArr; at45db_busy_wait &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;que_r
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2_logic_task
</UL>

<P><STRONG><a name="[106]"></a>a2_write_button_alert_log</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, a2_logging_mngr.o(i.a2_write_button_alert_log))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = a2_write_button_alert_log &rArr; flash_write &rArr; at45db_write_buffer &rArr; at45db_busy_wait &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;que_reset
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;que_isFull
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;que_append
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;que_r
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2_logic_task
</UL>

<P><STRONG><a name="[e7]"></a>a2_write_config</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, a2_logging_mngr.o(i.a2_write_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = a2_write_config
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2_check_config
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_config_to_flash_memory
</UL>

<P><STRONG><a name="[11d]"></a>a2_write_hr_spo2_temp_log</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, a2_logging_mngr.o(i.a2_write_hr_spo2_temp_log))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = a2_write_hr_spo2_temp_log &rArr; flash_write &rArr; at45db_write_buffer &rArr; at45db_busy_wait &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;que_reset
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;que_append
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;que_r
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_task
</UL>

<P><STRONG><a name="[11e]"></a>a2_write_pedo_meter_log</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, a2_logging_mngr.o(i.a2_write_pedo_meter_log))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = a2_write_pedo_meter_log &rArr; flash_write &rArr; at45db_write_buffer &rArr; at45db_busy_wait &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;que_reset
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;que_append
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;que_r
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_task
</UL>

<P><STRONG><a name="[107]"></a>a2_write_queue_config</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, a2_logging_mngr.o(i.a2_write_queue_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = a2_write_queue_config &rArr; flash_write &rArr; at45db_write_buffer &rArr; at45db_busy_wait &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
</UL>
<BR>[Called By]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_nus_special_pedometer_reg_mngr
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_nus_special_hr_spo2_temp_reg_mngr
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_nus_special_free_fall_reg_mngr
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_nus_special_free_fall_raw_data_reg_mngr
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_nus_special_button_alert_reg_mngr
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2_logic_task
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logging_queue_initial
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_task
</UL>

<P><STRONG><a name="[124]"></a>addr_compare</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, id_manager.o(i.addr_compare))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = addr_compare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_is_duplicate_bonding_data
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_ble_evt_handler
</UL>

<P><STRONG><a name="[12e]"></a>ah</STRONG> (Thumb, 82 bytes, Stack size 64 bytes, id_manager.o(i.ah))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ah
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_address_resolve
</UL>

<P><STRONG><a name="[12f]"></a>aider_a2_info_init</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, main.o(i.aider_a2_info_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = aider_a2_info_init &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_input
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2_reg_intial
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[58]"></a>app_error_fault_handler</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, app_error_weak.o(i.app_error_fault_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_panic
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_sdh.o(i.nrf_sdh_enable_request)
</UL>
<P><STRONG><a name="[121]"></a>app_error_handler_bare</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, app_error.o(i.app_error_handler_bare))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_mode_enter
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;services_init
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_handler
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_evt_handler
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_manager_init
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_conn_params_evt
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_adv_evt
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_params_init
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_error_handler
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_event_handler
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_start
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_normal
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_alert
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_enable_request
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_a2_i2c_1_init
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_a2_i2c_0_init
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_init
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_timer
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_task
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saadc_event_handler
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_id_encode
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnp_id_encode
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_add
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevices_evt_irq_enable
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_evt_irq_disable
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_soc_evts_poll
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ble_evts_poll
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_flash_write
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_flash_read
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_bmi160_write
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_bmi160_read
</UL>

<P><STRONG><a name="[16c]"></a>app_timer_create</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, app_timer.o(i.app_timer_create))
<BR><BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pwr_mgmt_init
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_init
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[135]"></a>app_timer_init</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, app_timer.o(i.app_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = app_timer_init &rArr; rtc1_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_stop
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[100]"></a>app_timer_start</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, app_timer.o(i.app_timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = app_timer_start &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_op_alloc
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_negotiation
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_button_event_handler
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_normal
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_alert
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2_logic_task
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pwr_mgmt_init
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_to_power_full_mode
</UL>

<P><STRONG><a name="[126]"></a>app_timer_stop</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, app_timer.o(i.app_timer_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = app_timer_stop &rArr; timer_stop_op_schedule &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_stop_op_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_button_event_handler
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_normal
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_alert
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_to_ultra_power_save_mode
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_to_low_power_mode
</UL>

<P><STRONG><a name="[13a]"></a>app_util_critical_region_enter</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, app_util_platform.o(i.app_util_critical_region_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = app_util_critical_region_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_by_mask
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pwr_mgmt_run
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_wdt_channel_alloc
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_lfclk_request
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_mutex_unlock
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_lfclk_release
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_state_evt_handler
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_stop_op_schedule
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_free
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_alloc
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twi_mngr_perform
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_pending_transaction
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_spi_mngr_perform
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_pending_transaction
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_push
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_generic_pop
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_prealloc
</UL>

<P><STRONG><a name="[13c]"></a>app_util_critical_region_exit</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, app_util_platform.o(i.app_util_critical_region_exit))
<BR><BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_by_mask
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pwr_mgmt_run
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_wdt_channel_alloc
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_lfclk_request
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_mutex_unlock
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_lfclk_release
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_state_evt_handler
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_stop_op_schedule
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_free
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_alloc
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twi_mngr_perform
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_pending_transaction
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_spi_mngr_perform
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_pending_transaction
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_push
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_generic_pop
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_prealloc
</UL>

<P><STRONG><a name="[14b]"></a>at34dbxx_deep_power_down</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, at45db081e.o(i.at34dbxx_deep_power_down))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = at34dbxx_deep_power_down
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at45dbxx_uninit
</UL>

<P><STRONG><a name="[13f]"></a>at45db_buffer_to_page</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, at45db081e.o(i.at45db_buffer_to_page))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = at45db_buffer_to_page &rArr; at45db_busy_wait &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at45db_busy_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
</UL>

<P><STRONG><a name="[140]"></a>at45db_busy_wait</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, at45db081e.o(i.at45db_busy_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = at45db_busy_wait &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at45db_write_buffer
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at45db_page_to_buf
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at45db_erase_page
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at45db_erase_chip
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at45db_buffer_to_page
</UL>

<P><STRONG><a name="[141]"></a>at45db_erase_chip</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, at45db081e.o(i.at45db_erase_chip))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = at45db_erase_chip &rArr; at45db_busy_wait &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at45db_busy_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_chip
</UL>

<P><STRONG><a name="[142]"></a>at45db_erase_page</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, at45db081e.o(i.at45db_erase_page))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = at45db_erase_page &rArr; at45db_busy_wait &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at45db_busy_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_page
</UL>

<P><STRONG><a name="[143]"></a>at45db_page_to_buf</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, at45db081e.o(i.at45db_page_to_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = at45db_page_to_buf &rArr; at45db_busy_wait &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at45db_busy_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read
</UL>

<P><STRONG><a name="[21a]"></a>at45db_read_buffer</STRONG> (Thumb, 64 bytes, Stack size 40 bytes, at45db081e.o(i.at45db_read_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = at45db_read_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read
</UL>

<P><STRONG><a name="[144]"></a>at45db_write_buffer</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, at45db081e.o(i.at45db_write_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = at45db_write_buffer &rArr; at45db_busy_wait &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at45db_busy_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
</UL>

<P><STRONG><a name="[40]"></a>at45dbxx_init</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, main.o(i.at45dbxx_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = at45dbxx_init &rArr; at45dbxx_is_available &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_flash_spi_init
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at45dbxx_wakeup_pin
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at45dbxx_resume_deep_power_down
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at45dbxx_is_available
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2_logic_task
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeup_flash_memory
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_task
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_config_to_flash_memory
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_setup_time_from_wdt_status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.logging_init)
</UL>
<P><STRONG><a name="[148]"></a>at45dbxx_is_available</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, at45db081e.o(i.at45dbxx_is_available))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = at45dbxx_is_available &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_3
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_task
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_config_to_flash_memory
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_setup_time_from_wdt_status
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at45dbxx_uninit
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at45dbxx_init
</UL>

<P><STRONG><a name="[147]"></a>at45dbxx_resume_deep_power_down</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, at45db081e.o(i.at45dbxx_resume_deep_power_down))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = at45dbxx_resume_deep_power_down
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at45dbxx_init
</UL>

<P><STRONG><a name="[41]"></a>at45dbxx_uninit</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, main.o(i.at45dbxx_uninit))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = at45dbxx_uninit &rArr; at45dbxx_is_available &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at45dbxx_is_available
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at34dbxx_deep_power_down
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2_logic_task
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_flash_memory
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_task
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_config_to_flash_memory
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_setup_time_from_wdt_status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.logging_init)
</UL>
<P><STRONG><a name="[146]"></a>at45dbxx_wakeup_pin</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, at45db081e.o(i.at45dbxx_wakeup_pin))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = at45dbxx_wakeup_pin
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at45dbxx_init
</UL>

<P><STRONG><a name="[376]"></a>battery_soc</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, main.o(i.battery_soc))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saadc_event_handler
</UL>

<P><STRONG><a name="[15b]"></a>bitMask</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, max30102.o(i.bitMask))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = bitMask &rArr; writeRegister8
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeRegister8
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readRegister8
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSampleRate
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPulseWidth
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setLEDMode
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setFIFOAverage
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setADCRange
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max30102_softReset
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max30102_shutDown
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enableSlot
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enableFIFORollover
</UL>

<P><STRONG><a name="[15e]"></a>ble_advdata_encode</STRONG> (Thumb, 406 bytes, Stack size 32 bytes, ble_advdata.o(i.ble_advdata_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ble_advdata_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uuid_list_encode
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_encode
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_data_encode
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;name_encode
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manuf_specific_data_encode
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_int_encode
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_device_addr_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_set
</UL>

<P><STRONG><a name="[166]"></a>ble_advdata_set</STRONG> (Thumb, 116 bytes, Stack size 88 bytes, ble_advdata.o(i.ble_advdata_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = ble_advdata_set &rArr; ble_advdata_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_restart_without_whitelist
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_init
</UL>

<P><STRONG><a name="[128]"></a>ble_advertising_conn_cfg_tag_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ble_advertising.o(i.ble_advertising_conn_cfg_tag_set))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_normal
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_alert
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[127]"></a>ble_advertising_init</STRONG> (Thumb, 310 bytes, Stack size 16 bytes, ble_advertising.o(i.ble_advertising_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = ble_advertising_init &rArr; ble_advdata_set &rArr; ble_advdata_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_set
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_normal
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_alert
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[80]"></a>ble_advertising_on_ble_evt</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, ble_advertising.o(i.ble_advertising_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = ble_advertising_on_ble_evt &rArr; ble_advertising_start &rArr; ble_advdata_set &rArr; ble_advdata_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(sdh_ble_observers1)
</UL>
<P><STRONG><a name="[8d]"></a>ble_advertising_on_sys_evt</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, ble_advertising.o(i.ble_advertising_on_sys_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = ble_advertising_on_sys_evt &rArr; ble_advertising_start &rArr; ble_advdata_set &rArr; ble_advdata_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(sdh_soc_observers1)
</UL>
<P><STRONG><a name="[167]"></a>ble_advertising_restart_without_whitelist</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, ble_advertising.o(i.ble_advertising_restart_without_whitelist))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = ble_advertising_restart_without_whitelist &rArr; ble_advertising_start &rArr; ble_advdata_set &rArr; ble_advdata_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_set
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_event_handler
</UL>

<P><STRONG><a name="[12d]"></a>ble_advertising_start</STRONG> (Thumb, 464 bytes, Stack size 48 bytes, ble_advertising.o(i.ble_advertising_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = ble_advertising_start &rArr; ble_advdata_set &rArr; ble_advdata_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_is_busy
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_set
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_start
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_restart_without_whitelist
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_on_sys_evt
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_on_ble_evt
</UL>

<P><STRONG><a name="[169]"></a>ble_bas_init</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, ble_bas.o(i.ble_bas_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ble_bas_init &rArr; battery_level_char_add
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_level_char_add
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;services_init
</UL>

<P><STRONG><a name="[87]"></a>ble_bas_on_ble_evt</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, ble_bas.o(i.ble_bas_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_bas_on_ble_evt
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_srv_is_notification_enabled
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(sdh_ble_observers2)
</UL>
<P><STRONG><a name="[16b]"></a>ble_conn_params_init</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, ble_conn_params.o(i.ble_conn_params_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_conn_params_init &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_create
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[16d]"></a>ble_conn_state_conn_handles</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ble_conn_state.o(i.ble_conn_state_conn_handles))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ble_conn_state_conn_handles &rArr; sdk_mapped_flags_key_list_get &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_key_list_get
</UL>
<BR>[Called By]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;params_reply_pending_process
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_pending_process
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_local_database_has_changed
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pending_flags_check
</UL>

<P><STRONG><a name="[16f]"></a>ble_conn_state_encrypted</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ble_conn_state.o(i.ble_conn_state_encrypted))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_conn_state_encrypted &rArr; sdk_mapped_flags_get_by_key
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_get_by_key
</UL>
<BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_ble_evt_handler
</UL>

<P><STRONG><a name="[14d]"></a>ble_conn_state_role</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, ble_conn_state.o(i.ble_conn_state_role))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_conn_state_role &rArr; sdk_mapped_flags_get_by_key
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_get_by_key
</UL>
<BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_link_secure
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_ble_evt_handler
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_status_success_process
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_evt_handler
</UL>

<P><STRONG><a name="[171]"></a>ble_conn_state_user_flag_acquire</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ble_conn_state.o(i.ble_conn_state_user_flag_acquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_conn_state_user_flag_acquire
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_flag_is_acquired
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_id_init
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_id_init
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_init
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_init
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_init
</UL>

<P><STRONG><a name="[173]"></a>ble_conn_state_user_flag_collection</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ble_conn_state.o(i.ble_conn_state_user_flag_collection))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_conn_state_user_flag_collection
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_flag_is_acquired
</UL>
<BR>[Called By]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;params_reply_pending_process
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_pending_process
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pending_flags_check
</UL>

<P><STRONG><a name="[133]"></a>ble_conn_state_user_flag_get</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ble_conn_state.o(i.ble_conn_state_user_flag_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_conn_state_user_flag_get &rArr; sdk_mapped_flags_get_by_key
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_flag_is_acquired
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_get_by_key
</UL>
<BR>[Called By]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;params_reply_pending_process
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_pending_process
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_created
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pairing
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_failure
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;allow_repairing
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_free_connection
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_connection_by_conn_handle
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pending_flags_check
</UL>

<P><STRONG><a name="[14f]"></a>ble_conn_state_user_flag_set</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, ble_conn_state.o(i.ble_conn_state_user_flag_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ble_conn_state_user_flag_set &rArr; sdk_mapped_flags_update_by_key &rArr; sdk_mapped_flags_bulk_update_by_key
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_flag_is_acquired
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_update_by_key
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flags_set_from_err_code
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_conn_sec_config_reply
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_ble_evt_handler
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_proc_start
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_proc_housekeeping
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_sec_failure
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_status_success_process
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_sm_evt_handler
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_im_evt_handler
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_connection
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_pdb_evt_handler
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_local_database_has_changed
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_im_evt_handler
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_ble_evt_handler
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_send_in_evt
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_update
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_apply_in_evt
</UL>

<P><STRONG><a name="[175]"></a>ble_dfu_buttonless_async_svci_init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ble_dfu_unbonded.o(i.ble_dfu_buttonless_async_svci_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = ble_dfu_buttonless_async_svci_init &rArr; nrf_dfu_svci_vector_table_unset &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_dfu_svci_vector_table_unset
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_dfu_svci_vector_table_set
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;services_init
</UL>

<P><STRONG><a name="[17d]"></a>ble_dfu_buttonless_backend_init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ble_dfu_unbonded.o(i.ble_dfu_buttonless_backend_init))
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dfu_buttonless_init
</UL>

<P><STRONG><a name="[178]"></a>ble_dfu_buttonless_bootloader_start_finalize</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ble_dfu.o(i.ble_dfu_buttonless_bootloader_start_finalize))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = ble_dfu_buttonless_bootloader_start_finalize &rArr; nrf_pwr_mgmt_shutdown &rArr; shutdown_process &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pwr_mgmt_shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dfu_buttonless_bootloader_start_prepare
</UL>

<P><STRONG><a name="[17a]"></a>ble_dfu_buttonless_bootloader_start_prepare</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ble_dfu_unbonded.o(i.ble_dfu_buttonless_bootloader_start_prepare))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = ble_dfu_buttonless_bootloader_start_prepare &rArr; ble_dfu_buttonless_bootloader_start_finalize &rArr; nrf_pwr_mgmt_shutdown &rArr; shutdown_process &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dfu_buttonless_bootloader_start_finalize
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dfu_buttonless_on_ble_evt
</UL>

<P><STRONG><a name="[17b]"></a>ble_dfu_buttonless_char_add</STRONG> (Thumb, 218 bytes, Stack size 72 bytes, ble_dfu_unbonded.o(i.ble_dfu_buttonless_char_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ble_dfu_buttonless_char_add
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dfu_buttonless_init
</UL>

<P><STRONG><a name="[17c]"></a>ble_dfu_buttonless_init</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, ble_dfu.o(i.ble_dfu_buttonless_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ble_dfu_buttonless_init &rArr; ble_dfu_buttonless_char_add
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dfu_buttonless_char_add
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dfu_buttonless_backend_init
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;services_init
</UL>

<P><STRONG><a name="[88]"></a>ble_dfu_buttonless_on_ble_evt</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, ble_dfu.o(i.ble_dfu_buttonless_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = ble_dfu_buttonless_on_ble_evt &rArr; on_write &rArr; nrf_log_frontend_std_2 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dfu_buttonless_bootloader_start_prepare
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_rw_authorize_req
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_dfu.o(sdh_ble_observers2)
</UL>
<P><STRONG><a name="[180]"></a>ble_dfu_buttonless_on_ctrl_pt_write</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, ble_dfu_unbonded.o(i.ble_dfu_buttonless_on_ctrl_pt_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ble_dfu_buttonless_on_ctrl_pt_write &rArr; ble_dfu_buttonless_resp_send
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dfu_buttonless_resp_send
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_rw_authorize_req
</UL>

<P><STRONG><a name="[8e]"></a>ble_dfu_buttonless_on_sys_evt</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, ble_dfu_unbonded.o(i.ble_dfu_buttonless_on_sys_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_dfu_buttonless_on_sys_evt &rArr; ble_dfu_buttonless_resp_send
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dfu_buttonless_resp_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_dfu_unbonded.o(sdh_soc_observers1)
</UL>
<P><STRONG><a name="[181]"></a>ble_dfu_buttonless_resp_send</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, ble_dfu.o(i.ble_dfu_buttonless_resp_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_dfu_buttonless_resp_send
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dfu_buttonless_on_sys_evt
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dfu_buttonless_on_ctrl_pt_write
</UL>

<P><STRONG><a name="[182]"></a>ble_dis_init</STRONG> (Thumb, 296 bytes, Stack size 32 bytes, ble_dis.o(i.ble_dis_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = ble_dis_init &rArr; char_add &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_id_encode
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnp_id_encode
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_add
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;services_init
</UL>

<P><STRONG><a name="[186]"></a>ble_dts_init</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, ble_dts.o(i.ble_dts_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = ble_dts_init &rArr; week_of_day_char_add &rArr; determine_day_of_week_by_gauss &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;week_of_day_char_add
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;date_and_time_char_add
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;services_init
</UL>

<P><STRONG><a name="[84]"></a>ble_dts_on_ble_evt</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, ble_dts.o(i.ble_dts_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_dts_on_ble_evt &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(sdh_ble_observers2)
</UL>
<P><STRONG><a name="[193]"></a>ble_hrs_heart_rate_measurement_send</STRONG> (Thumb, 190 bytes, Stack size 64 bytes, ble_hrs.o(i.ble_hrs_heart_rate_measurement_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = ble_hrs_heart_rate_measurement_send &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hrm_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_task
</UL>

<P><STRONG><a name="[195]"></a>ble_hrs_init</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, ble_hrs.o(i.ble_hrs_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = ble_hrs_init &rArr; heart_rate_measurement_char_add &rArr; hrm_encode &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heart_rate_measurement_char_add
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;body_sensor_location_char_add
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;services_init
</UL>

<P><STRONG><a name="[86]"></a>ble_hrs_on_ble_evt</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, ble_hrs.o(i.ble_hrs_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_hrs_on_ble_evt
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_srv_is_notification_enabled
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(sdh_ble_observers2)
</UL>
<P><STRONG><a name="[21e]"></a>ble_hrs_on_gatt_evt</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ble_hrs.o(i.ble_hrs_on_gatt_evt))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_evt_handler
</UL>

<P><STRONG><a name="[198]"></a>ble_hrs_rr_interval_add</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ble_hrs.o(i.ble_hrs_rr_interval_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_hrs_rr_interval_add &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_task
</UL>

<P><STRONG><a name="[19a]"></a>ble_nus_init</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, ble_nus.o(i.ble_nus_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ble_nus_init &rArr; tx_char_add
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_char_add
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_char_add
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;services_init
</UL>

<P><STRONG><a name="[85]"></a>ble_nus_on_ble_evt</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, ble_nus.o(i.ble_nus_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_nus_on_ble_evt
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_srv_is_notification_enabled
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(sdh_ble_observers2)
</UL>
<P><STRONG><a name="[328]"></a>ble_nus_string_send</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, ble_nus.o(i.ble_nus_string_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_nus_string_send
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nus_sent_to_host
</UL>

<P><STRONG><a name="[19d]"></a>ble_srv_ascii_to_utf8</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, ble_srv_common.o(i.ble_srv_ascii_to_utf8))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_srv_ascii_to_utf8
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;services_init
</UL>

<P><STRONG><a name="[329]"></a>ble_srv_is_indication_enabled</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ble_srv_common.o(i.ble_srv_is_indication_enabled))
<BR><BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
</UL>

<P><STRONG><a name="[16a]"></a>ble_srv_is_notification_enabled</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ble_srv_common.o(i.ble_srv_is_notification_enabled))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_nus_on_ble_evt
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hrs_on_ble_evt
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_bas_on_ble_evt
</UL>

<P><STRONG><a name="[15a]"></a>ble_srv_report_ref_encode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ble_srv_common.o(i.ble_srv_report_ref_encode))
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_level_char_add
</UL>

<P><STRONG><a name="[19f]"></a>bmi160_clear_bmi160_cs_pin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_drv_spi_bmi_flash.o(i.bmi160_clear_bmi160_cs_pin))
<BR><BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_bmi160_write
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_bmi160_read
</UL>

<P><STRONG><a name="[1a1]"></a>bmi160_clear_flash_cs_pin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_drv_spi_bmi_flash.o(i.bmi160_clear_flash_cs_pin))
<BR><BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_flash_write
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_flash_read
</UL>

<P><STRONG><a name="[1a8]"></a>bmi160_get_regs</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, bmi160.o(i.bmi160_get_regs))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bmi160_get_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_read_step_counter
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_set_sens_conf
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_init
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_under_sampling
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gyro_data
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_accel_gyro_data
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_accel_data
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_gyro_config
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_accel_config
</UL>

<P><STRONG><a name="[1a2]"></a>bmi160_get_sensor_data</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, bmi160.o(i.bmi160_get_sensor_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = bmi160_get_sensor_data &rArr; get_accel_gyro_data &rArr; bmi160_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gyro_data
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_accel_gyro_data
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_accel_data
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_task
</UL>

<P><STRONG><a name="[1a6]"></a>bmi160_init</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, bmi160.o(i.bmi160_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = bmi160_init &rArr; bmi160_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_get_regs
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_bmi160_spi_int
</UL>

<P><STRONG><a name="[1aa]"></a>bmi160_read_step_counter</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, bmi160.o(i.bmi160_read_step_counter))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = bmi160_read_step_counter &rArr; bmi160_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_get_regs
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_task
</UL>

<P><STRONG><a name="[1ab]"></a>bmi160_set_bmi160_cs_pin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_drv_spi_bmi_flash.o(i.bmi160_set_bmi160_cs_pin))
<BR><BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_bmi160_write
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_bmi160_read
</UL>

<P><STRONG><a name="[1ad]"></a>bmi160_set_flash_cs_pin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_drv_spi_bmi_flash.o(i.bmi160_set_flash_cs_pin))
<BR><BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_flash_write
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_flash_read
</UL>

<P><STRONG><a name="[1ae]"></a>bmi160_set_power_mode</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, bmi160.o(i.bmi160_set_power_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = bmi160_set_power_mode &rArr; process_under_sampling &rArr; bmi160_set_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_set_regs
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_under_sampling
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pedometer_sleep
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_set_sens_conf
</UL>

<P><STRONG><a name="[1b0]"></a>bmi160_set_regs</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, bmi160.o(i.bmi160_set_regs))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = bmi160_set_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_bmi160_step_count_reset_value
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_bmi160_step_count_conf
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_set_power_mode
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_set_sens_conf
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_under_sampling
</UL>

<P><STRONG><a name="[1b1]"></a>bmi160_set_sens_conf</STRONG> (Thumb, 226 bytes, Stack size 16 bytes, bmi160.o(i.bmi160_set_sens_conf))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = bmi160_set_sens_conf &rArr; bmi160_set_power_mode &rArr; process_under_sampling &rArr; bmi160_set_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_set_power_mode
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_set_regs
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_get_regs
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_gyro_config
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_accel_config
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_bmi160_acc_config
</UL>

<P><STRONG><a name="[1b7]"></a>bsp_board_button_state_get</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, boards.o(i.bsp_board_button_state_get))
<BR><BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_button_is_pressed
</UL>

<P><STRONG><a name="[131]"></a>bsp_board_led_invert</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, boards.o(i.bsp_board_led_invert))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alert_timer_handler
</UL>

<P><STRONG><a name="[1b6]"></a>bsp_board_pin_to_button_idx</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, boards.o(i.bsp_board_pin_to_button_idx))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bsp_board_pin_to_button_idx
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_button_event_handler
</UL>

<P><STRONG><a name="[1b4]"></a>bsp_btn_ble_init</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, bsp_btn_ble.o(i.bsp_btn_ble_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = bsp_btn_ble_init &rArr; advertising_buttons_configure &rArr; bsp_event_to_button_action_assign
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_buttons_configure
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_button_is_pressed
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b5]"></a>bsp_button_is_pressed</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bsp.o(i.bsp_button_is_pressed))
<BR><BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_button_state_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_btn_ble_init
</UL>

<P><STRONG><a name="[12b]"></a>bsp_event_to_button_action_assign</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, bsp.o(i.bsp_event_to_button_action_assign))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = bsp_event_to_button_action_assign
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_buttons_configure
</UL>

<P><STRONG><a name="[189]"></a>bsp_indication_set</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bsp.o(i.bsp_indication_set))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_adv_evt
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[1b9]"></a>bsp_init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, bsp.o(i.bsp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bsp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_create
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1ba]"></a>btw_fileter_100Hz_cf_1Hz_order2</STRONG> (Thumb, 160 bytes, Stack size 48 bytes, heart_rate_cal.o(i.btw_fileter_100Hz_cf_1Hz_order2))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = btw_fileter_100Hz_cf_1Hz_order2 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heart_rate_monitoring2
</UL>

<P><STRONG><a name="[2fd]"></a>buffer_is_empty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nrf_log_frontend.o(i.buffer_is_empty))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
</UL>

<P><STRONG><a name="[1bf]"></a>check_setup_time_from_wdt_status</STRONG> (Thumb, 228 bytes, Stack size 512 bytes, main.o(i.check_setup_time_from_wdt_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 756<LI>Call Chain = check_setup_time_from_wdt_status &rArr; a2_read_pedo_meter_log_by_page &rArr; flash_read &rArr; at45db_page_to_buf &rArr; at45db_busy_wait &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;que_r
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;que_isEmpty
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_a2_spi_deinit
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at45dbxx_is_available
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2_read_pedo_meter_log_by_page
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at45dbxx_uninit
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at45dbxx_init
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2_spi_int
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1c4]"></a>clearFIFO</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, max30102.o(i.clearFIFO))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = clearFIFO &rArr; writeRegister8
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeRegister8
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max30102_setup2
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max30102_setup
</UL>

<P><STRONG><a name="[1c9]"></a>date2days</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, a2_display_mngr.o(i.date2days))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = date2days
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dayOfTheWeek
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;date_time_to_unixtimestamp
</UL>

<P><STRONG><a name="[1c8]"></a>date_time_to_unixtimestamp</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, a2_display_mngr.o(i.date_time_to_unixtimestamp))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = date_time_to_unixtimestamp &rArr; date2days
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;date2days
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_cts_c_evt
</UL>

<P><STRONG><a name="[1ca]"></a>dayOfTheWeek</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, a2_display_mngr.o(i.dayOfTheWeek))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = dayOfTheWeek &rArr; date2days
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;date2days
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_time
</UL>

<P><STRONG><a name="[1d0]"></a>display_battery_full</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, a2_display_mngr.o(i.display_battery_full))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = display_battery_full &rArr; ssd1306_putstring &rArr; ssd1306_write &rArr; ssd1306_draw_char &rArr; ssd1306_fill_rect &rArr; ssd1306_draw_fast_vline &rArr; ssd1306_draw_fast_vline_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_set_textsize
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_set_textcolor
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_set_cursor
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_putstring
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_display
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_clear_display
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_display
</UL>

<P><STRONG><a name="[ec]"></a>display_battery_low</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, a2_display_mngr.o(i.display_battery_low))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = display_battery_low &rArr; ssd1306_putstring &rArr; ssd1306_write &rArr; ssd1306_draw_char &rArr; ssd1306_fill_rect &rArr; ssd1306_draw_fast_vline &rArr; ssd1306_draw_fast_vline_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_set_textsize
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_set_textcolor
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_set_cursor
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_putstring
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_display
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_clear_display
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2_display_task2
</UL>

<P><STRONG><a name="[f5]"></a>display_bt_alert</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, a2_display_mngr.o(i.display_bt_alert))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = display_bt_alert &rArr; ssd1306_putstring &rArr; ssd1306_write &rArr; ssd1306_draw_char &rArr; ssd1306_fill_rect &rArr; ssd1306_draw_fast_vline &rArr; ssd1306_draw_fast_vline_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_draw_bitmap
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_set_textsize
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_set_textcolor
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_set_cursor
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_putstring
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_invert_display
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_display
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_clear_display
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2_display_task2
</UL>

<P><STRONG><a name="[f3]"></a>display_countdown_alert</STRONG> (Thumb, 206 bytes, Stack size 32 bytes, a2_display_mngr.o(i.display_countdown_alert))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = display_countdown_alert &rArr; ssd1306_putstring &rArr; ssd1306_write &rArr; ssd1306_draw_char &rArr; ssd1306_fill_rect &rArr; ssd1306_draw_fast_vline &rArr; ssd1306_draw_fast_vline_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_set_textcolor_bg
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_fill_rect
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_draw_rect
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_set_textsize
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_set_cursor
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_putstring
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_display
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_clear_display
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2_display_task2
</UL>

<P><STRONG><a name="[1dc]"></a>display_distanc_cal</STRONG> (Thumb, 460 bytes, Stack size 152 bytes, a2_display_mngr.o(i.display_distanc_cal))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = display_distanc_cal &rArr; display_mini_time &rArr; ssd1306_putstring &rArr; ssd1306_write &rArr; ssd1306_draw_char &rArr; ssd1306_fill_rect &rArr; ssd1306_draw_fast_vline &rArr; ssd1306_draw_fast_vline_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_draw_triangle
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_draw_bitmap
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_drawRightStringLen
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bt_icon
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_battery
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_mini_time
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_display
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_clear_display
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_display
</UL>

<P><STRONG><a name="[f8]"></a>display_fall_alert</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, a2_display_mngr.o(i.display_fall_alert))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = display_fall_alert &rArr; ssd1306_putstring &rArr; ssd1306_write &rArr; ssd1306_draw_char &rArr; ssd1306_fill_rect &rArr; ssd1306_draw_fast_vline &rArr; ssd1306_draw_fast_vline_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_draw_bitmap
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_set_textsize
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_set_textcolor
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_set_cursor
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_putstring
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_invert_display
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_display
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_clear_display
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2_display_task2
</UL>

<P><STRONG><a name="[f0]"></a>display_heart_reate</STRONG> (Thumb, 380 bytes, Stack size 136 bytes, a2_display_mngr.o(i.display_heart_reate))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = display_heart_reate &rArr; display_mini_time &rArr; ssd1306_putstring &rArr; ssd1306_write &rArr; ssd1306_draw_char &rArr; ssd1306_fill_rect &rArr; ssd1306_draw_fast_vline &rArr; ssd1306_draw_fast_vline_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_draw_triangle
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_draw_bitmap
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_drawRightStringLen
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_drawRightString
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bt_icon
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_battery
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_mini_time
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_display
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_clear_display
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2_display_task2
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_display
</UL>

<P><STRONG><a name="[1dd]"></a>display_mini_time</STRONG> (Thumb, 56 bytes, Stack size 104 bytes, a2_display_mngr.o(i.display_mini_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = display_mini_time &rArr; ssd1306_putstring &rArr; ssd1306_write &rArr; ssd1306_draw_char &rArr; ssd1306_fill_rect &rArr; ssd1306_draw_fast_vline &rArr; ssd1306_draw_fast_vline_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_set_textsize
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_set_textcolor
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_set_cursor
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_putstring
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_time
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_temperature
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_distanc_cal
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_o2
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_heart_reate
</UL>

<P><STRONG><a name="[f1]"></a>display_o2</STRONG> (Thumb, 140 bytes, Stack size 128 bytes, a2_display_mngr.o(i.display_o2))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = display_o2 &rArr; display_mini_time &rArr; ssd1306_putstring &rArr; ssd1306_write &rArr; ssd1306_draw_char &rArr; ssd1306_fill_rect &rArr; ssd1306_draw_fast_vline &rArr; ssd1306_draw_fast_vline_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_draw_triangle
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_draw_bitmap
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_drawRightStringLen
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_drawRightString
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bt_icon
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_battery
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_mini_time
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_display
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_clear_display
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2_display_task2
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_display
</UL>

<P><STRONG><a name="[1e3]"></a>display_step_count</STRONG> (Thumb, 212 bytes, Stack size 128 bytes, a2_display_mngr.o(i.display_step_count))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = display_step_count &rArr; draw_battery &rArr; ssd1306_drawRightString &rArr; ssd1306_drawChar &rArr; ssd1306_drawUnicode &rArr; ssd1306_fill_rect &rArr; ssd1306_draw_fast_vline &rArr; ssd1306_draw_fast_vline_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_draw_triangle
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_drawRightStringLen
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_drawCentreString
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bt_icon
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_battery
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_set_cursor
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_putstring
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_display
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_clear_display
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_display
</UL>

<P><STRONG><a name="[1e5]"></a>display_temperature</STRONG> (Thumb, 194 bytes, Stack size 136 bytes, a2_display_mngr.o(i.display_temperature))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = display_temperature &rArr; display_mini_time &rArr; ssd1306_putstring &rArr; ssd1306_write &rArr; ssd1306_draw_char &rArr; ssd1306_fill_rect &rArr; ssd1306_draw_fast_vline &rArr; ssd1306_draw_fast_vline_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_fill_rect
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_draw_triangle
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_draw_bitmap
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_drawRightStringLen
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_drawRightString
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bt_icon
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_battery
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_mini_time
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_display
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_clear_display
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_display
</UL>

<P><STRONG><a name="[1e6]"></a>display_time</STRONG> (Thumb, 378 bytes, Stack size 232 bytes, a2_display_mngr.o(i.display_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = display_time &rArr; display_mini_time &rArr; ssd1306_putstring &rArr; ssd1306_write &rArr; ssd1306_draw_char &rArr; ssd1306_fill_rect &rArr; ssd1306_draw_fast_vline &rArr; ssd1306_draw_fast_vline_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_drawRightStringLen
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bt_icon
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_battery
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_mini_time
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dayOfTheWeek
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_set_textcolor
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_set_cursor
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_putstring
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_display
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_clear_display
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_display
</UL>

<P><STRONG><a name="[1e0]"></a>draw_battery</STRONG> (Thumb, 272 bytes, Stack size 32 bytes, a2_display_mngr.o(i.draw_battery))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = draw_battery &rArr; ssd1306_drawRightString &rArr; ssd1306_drawChar &rArr; ssd1306_drawUnicode &rArr; ssd1306_fill_rect &rArr; ssd1306_draw_fast_vline &rArr; ssd1306_draw_fast_vline_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_fill_rect
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_draw_rect
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_draw_fast_vline
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_drawRightString
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_time
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_temperature
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_step_count
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_distanc_cal
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_o2
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_heart_reate
</UL>

<P><STRONG><a name="[1e1]"></a>draw_bt_icon</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, a2_display_mngr.o(i.draw_bt_icon))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = draw_bt_icon &rArr; ssd1306_draw_bitmap &rArr; ssd1306_draw_pixel
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_draw_bitmap
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_time
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_temperature
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_step_count
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_distanc_cal
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_o2
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_heart_reate
</UL>

<P><STRONG><a name="[1e8]"></a>enableFIFORollover</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, max30102.o(i.enableFIFORollover))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = enableFIFORollover &rArr; bitMask &rArr; writeRegister8
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitMask
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max30102_setup2
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max30102_setup
</UL>

<P><STRONG><a name="[1e9]"></a>enableSlot</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, max30102.o(i.enableSlot))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = enableSlot &rArr; bitMask &rArr; writeRegister8
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitMask
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max30102_setup2
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max30102_setup
</UL>

<P><STRONG><a name="[1eb]"></a>enter_to_low_power_mode</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, main.o(i.enter_to_low_power_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = enter_to_low_power_mode &rArr; a2_spi_int &rArr; nrf_drv_a2_spi_init &rArr; nrf_spi_mngr_init &rArr; nrf_drv_spi_init &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_bmi160_power_off
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_bmi160_power_and_cs_init
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_a2_spi_deinit
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pedometer_sleep
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2_spi_int
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_task
</UL>

<P><STRONG><a name="[1ef]"></a>enter_to_power_full_mode</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, main.o(i.enter_to_power_full_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = enter_to_power_full_mode &rArr; advertising_normal &rArr; advertising_start &rArr; pm_peers_delete &rArr; pm_peer_delete &rArr; im_peer_free &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; peer_data_delete &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_normal
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_bmi160_power_and_cs_init
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_a2_spi_deinit
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pedometer_init
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2_spi_int
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1f1]"></a>enter_to_ultra_power_save_mode</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, main.o(i.enter_to_ultra_power_save_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = enter_to_ultra_power_save_mode &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_set_textsize
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_set_textcolor
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_set_cursor
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_putstring
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_display
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_clear_display
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_bmi160_power_and_cs_init
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_a2_spi_deinit
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_a2_oled_shutdown
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_a2_i2c_0_deinit
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pedometer_sleep
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2_spi_int
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_task
</UL>

<P><STRONG><a name="[d8]"></a>fabs</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fabs.o(i.fabs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[1fd]"></a>fds_file_delete</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, fds.o(i.fds_file_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = fds_file_delete &rArr; queue_start &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_start
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_buf_store
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_buf_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_delete
</UL>

<P><STRONG><a name="[201]"></a>fds_gc</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, fds.o(i.fds_gc))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = fds_gc &rArr; queue_start &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_start
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_buf_store
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_buf_get
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_evt_handler
</UL>

<P><STRONG><a name="[202]"></a>fds_init</STRONG> (Thumb, 196 bytes, Stack size 48 bytes, fds.o(i.fds_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = fds_init &rArr; queue_start &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_init
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_init
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___5_fds_c_m_fs__nrf_atomic_internal_orr
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_start
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_buf_store
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_buf_get
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pages_init
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_send
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_init
</UL>

<P><STRONG><a name="[208]"></a>fds_record_close</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, fds.o(i.fds_record_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = fds_record_close &rArr; record_find_by_desc &rArr; record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_by_desc
</UL>
<BR>[Called By]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_init
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_read
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_iterate
</UL>

<P><STRONG><a name="[209]"></a>fds_record_find</STRONG> (Thumb, 14 bytes, Stack size 24 bytes, fds.o(i.fds_record_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = fds_record_find &rArr; record_find &rArr; record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find
</UL>
<BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_find
</UL>

<P><STRONG><a name="[20a]"></a>fds_record_find_by_key</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, fds.o(i.fds_record_find_by_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = fds_record_find_by_key &rArr; record_find &rArr; record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find
</UL>
<BR>[Called By]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_init
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_iterate
</UL>

<P><STRONG><a name="[20b]"></a>fds_record_find_in_file</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, fds.o(i.fds_record_find_in_file))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = fds_record_find_in_file &rArr; record_find &rArr; record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_delete
</UL>

<P><STRONG><a name="[353]"></a>fds_record_id_from_desc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fds.o(i.fds_record_id_from_desc))
<BR><BR>[Called By]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_store
</UL>

<P><STRONG><a name="[20c]"></a>fds_record_open</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, fds.o(i.fds_record_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = fds_record_open &rArr; record_find_by_desc &rArr; record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___5_fds_c_m_fs__nrf_atomic_internal_add
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_by_desc
</UL>
<BR>[Called By]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_init
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_read
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_iterate
</UL>

<P><STRONG><a name="[20e]"></a>fds_record_update</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fds.o(i.fds_record_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = fds_record_update &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_enqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_store
</UL>

<P><STRONG><a name="[210]"></a>fds_record_write</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fds.o(i.fds_record_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = fds_record_write &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_enqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_store
</UL>

<P><STRONG><a name="[211]"></a>fds_record_write_reserved</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fds.o(i.fds_record_write_reserved))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = fds_record_write_reserved &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_enqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_store
</UL>

<P><STRONG><a name="[212]"></a>fds_register</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, fds.o(i.fds_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fds_register
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___5_fds_c_m_fs__nrf_atomic_internal_add
</UL>
<BR>[Called By]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_init
</UL>

<P><STRONG><a name="[213]"></a>fds_reserve</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, fds.o(i.fds_reserve))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = fds_reserve &rArr; write_space_reserve
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_space_reserve
</UL>
<BR>[Called By]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_space_reserve
</UL>

<P><STRONG><a name="[215]"></a>fds_reserve_cancel</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, fds.o(i.fds_reserve_cancel))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fds_reserve_cancel
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_space_free
</UL>
<BR>[Called By]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_space_reserve_cancel
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_store
</UL>

<P><STRONG><a name="[3c]"></a>flash_erase_chip</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nrf_drv_spi_bmi_flash.o(i.flash_erase_chip))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = flash_erase_chip &rArr; at45db_erase_chip &rArr; at45db_busy_wait &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at45db_erase_chip
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.logging_init)
</UL>
<P><STRONG><a name="[3d]"></a>flash_erase_page</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrf_drv_spi_bmi_flash.o(i.flash_erase_page))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = flash_erase_page &rArr; at45db_erase_page &rArr; at45db_busy_wait &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at45db_erase_page
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2_save_pedo_meter_to_buf
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2_save_hr_spo2_to_buf
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2_save_button_alert_to_buf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.logging_init)
</UL>
<P><STRONG><a name="[3e]"></a>flash_read</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, nrf_drv_spi_bmi_flash.o(i.flash_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = flash_read &rArr; at45db_page_to_buf &rArr; at45db_busy_wait &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at45db_read_buffer
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at45db_page_to_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2_read_raw_data_free_fall_log_by_queue
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2_read_queue_config
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2_read_pedo_meter_log_by_queue
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2_read_hr_spo2_temp_log_by_queue
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2_read_hr_spo2_temp_log_by_page
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2_read_free_fall_alert_log_by_queue
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2_read_free_fall_alert_log_by_page
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2_read_button_alert_log_by_queue
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2_read_button_alert_log_by_page
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2_read_pedo_meter_log_by_page
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2_read_button_alert_last_buffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.logging_init)
</UL>
<P><STRONG><a name="[3f]"></a>flash_write</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, nrf_drv_spi_bmi_flash.o(i.flash_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = flash_write &rArr; at45db_write_buffer &rArr; at45db_busy_wait &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at45db_write_buffer
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at45db_buffer_to_page
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2_write_queue_config
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2_write_pedo_meter_log
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2_write_hr_spo2_temp_log
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2_write_button_alert_log
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2_write_button_alert_last_buffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.logging_init)
</UL>
<P><STRONG><a name="[2d2]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_i2c_max30102_write
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_i2c_0_write
</UL>

<P><STRONG><a name="[192]"></a>gcm_ble_evt_handler</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, gatt_cache_manager.o(i.gcm_ble_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = gcm_ble_evt_handler &rArr; pending_flags_check &rArr; gscm_local_db_cache_update &rArr; pdb_write_buf_store &rArr; write_buf_store &rArr; pds_peer_data_store &rArr; fds_record_write_reserved &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_db_change_notification_done
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pending_flags_check
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_update
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_apply_in_evt
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[68]"></a>gcm_im_evt_handler</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, gatt_cache_manager.o(i.gcm_im_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = gcm_im_evt_handler &rArr; local_db_apply_in_evt &rArr; gscm_local_db_cache_apply &rArr; pdb_peer_data_ptr_get &rArr; pds_peer_data_read &rArr; peer_data_find &rArr; fds_record_find &rArr; record_find &rArr; record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_service_changed_ind_needed
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_apply_in_evt
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> id_manager.o(.constdata)
</UL>
<P><STRONG><a name="[22f]"></a>gcm_init</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, gatt_cache_manager.o(i.gcm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gcm_init &rArr; ble_conn_state_user_flag_acquire
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_mutex_init
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_init
</UL>

<P><STRONG><a name="[231]"></a>gcm_local_database_has_changed</STRONG> (Thumb, 74 bytes, Stack size 96 bytes, gatt_cache_manager.o(i.gcm_local_database_has_changed))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = gcm_local_database_has_changed &rArr; pending_flags_check &rArr; gscm_local_db_cache_update &rArr; pdb_write_buf_store &rArr; write_buf_store &rArr; pds_peer_data_store &rArr; fds_record_write_reserved &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_local_database_has_changed
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pending_flags_check
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_conn_handles
</UL>
<BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_local_database_has_changed
</UL>

<P><STRONG><a name="[6d]"></a>gcm_pdb_evt_handler</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, gatt_cache_manager.o(i.gcm_pdb_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = gcm_pdb_evt_handler &rArr; pending_flags_check &rArr; gscm_local_db_cache_update &rArr; pdb_write_buf_store &rArr; write_buf_store &rArr; pds_peer_data_store &rArr; fds_record_write_reserved &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_mutex_unlock
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_peer_data_ptr_get
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_conn_handle_get
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pending_flags_check
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_update
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> peer_database.o(.constdata)
</UL>
<P><STRONG><a name="[24b]"></a>getFIFOIR</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, max30102.o(i.getFIFOIR))
<BR><BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heart_rate_monitoring2
</UL>

<P><STRONG><a name="[24a]"></a>getFIFORed</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, max30102.o(i.getFIFORed))
<BR><BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heart_rate_monitoring2
</UL>

<P><STRONG><a name="[236]"></a>getReadPointer</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, max30102.o(i.getReadPointer))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = getReadPointer &rArr; readRegister8
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readRegister8
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max30102_check
</UL>

<P><STRONG><a name="[237]"></a>getWritePointer</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, max30102.o(i.getWritePointer))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = getWritePointer &rArr; readRegister8
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readRegister8
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max30102_check
</UL>

<P><STRONG><a name="[238]"></a>get_connection_by_conn_handle</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, id_manager.o(i.get_connection_by_conn_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = get_connection_by_conn_handle &rArr; ble_conn_state_user_flag_get &rArr; sdk_mapped_flags_get_by_key
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_connection
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_ble_addr_get
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_set
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
</UL>

<P><STRONG><a name="[239]"></a>get_free_connection</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, id_manager.o(i.get_free_connection))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = get_free_connection &rArr; ble_conn_state_user_flag_get &rArr; sdk_mapped_flags_get_by_key
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_connection
</UL>

<P><STRONG><a name="[22b]"></a>gscm_db_change_notification_done</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, gatts_cache_manager.o(i.gscm_db_change_notification_done))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = gscm_db_change_notification_done &rArr; pdb_raw_store &rArr; pds_peer_data_store &rArr; fds_record_write_reserved &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_raw_store
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_ble_evt_handler
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_send_in_evt
</UL>

<P><STRONG><a name="[366]"></a>gscm_init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gatts_cache_manager.o(i.gscm_init))
<BR><BR>[Called By]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_init
</UL>

<P><STRONG><a name="[232]"></a>gscm_local_database_has_changed</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gatts_cache_manager.o(i.gscm_local_database_has_changed))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = gscm_local_database_has_changed &rArr; service_changed_pending_set &rArr; pdb_raw_store &rArr; pds_peer_data_store &rArr; fds_record_write_reserved &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_next_peer_id_get
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_pending_set
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_local_database_has_changed
</UL>

<P><STRONG><a name="[23d]"></a>gscm_local_db_cache_apply</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, gatts_cache_manager.o(i.gscm_local_db_cache_apply))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = gscm_local_db_cache_apply &rArr; pdb_peer_data_ptr_get &rArr; pds_peer_data_read &rArr; peer_data_find &rArr; fds_record_find &rArr; record_find &rArr; record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_peer_data_ptr_get
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_apply_in_evt
</UL>

<P><STRONG><a name="[23e]"></a>gscm_local_db_cache_update</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, gatts_cache_manager.o(i.gscm_local_db_cache_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = gscm_local_db_cache_update &rArr; pdb_write_buf_store &rArr; write_buf_store &rArr; pds_peer_data_store &rArr; fds_record_write_reserved &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_store
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_release
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_get
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pending_flags_check
</UL>

<P><STRONG><a name="[6c]"></a>gscm_pdb_evt_handler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gatts_cache_manager.o(i.gscm_pdb_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = gscm_pdb_evt_handler &rArr; service_changed_pending_set &rArr; pdb_raw_store &rArr; pds_peer_data_store &rArr; fds_record_write_reserved &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_pending_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> peer_database.o(.constdata)
</UL>
<P><STRONG><a name="[22e]"></a>gscm_service_changed_ind_needed</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, gatts_cache_manager.o(i.gscm_service_changed_ind_needed))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = gscm_service_changed_ind_needed &rArr; pdb_peer_data_ptr_get &rArr; pds_peer_data_read &rArr; peer_data_find &rArr; fds_record_find &rArr; record_find &rArr; record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_peer_data_ptr_get
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_im_evt_handler
</UL>

<P><STRONG><a name="[37e]"></a>gscm_service_changed_ind_send</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, gatts_cache_manager.o(i.gscm_service_changed_ind_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gscm_service_changed_ind_send
</UL>
<BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_send_in_evt
</UL>

<P><STRONG><a name="[240]"></a>heart_rate_cal_v3</STRONG> (Thumb, 672 bytes, Stack size 256 bytes, heart_rate_cal.o(i.heart_rate_cal_v3))
<BR><BR>[Stack]<UL><LI>Max Depth = 10296<LI>Call Chain = heart_rate_cal_v3 &rArr; ZScore &rArr; Std &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_3
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZScore
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heart_rate_monitoring2
</UL>

<P><STRONG><a name="[242]"></a>heart_rate_monitoring2</STRONG> (Thumb, 726 bytes, Stack size 456 bytes, main.o(i.heart_rate_monitoring2))
<BR><BR>[Stack]<UL><LI>Max Depth = 13048<LI>Call Chain = heart_rate_monitoring2 &rArr; spo2_cal &rArr; ZScore &rArr; Std &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spo2_cal
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spO2Calculator_init
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_max30102_reg_i2c_func
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_i2c_max30102_shutdown
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_a2_i2c_1_init
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_a2_i2c_1_deinit
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max30102_setup2
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max30102_nextSample
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max30102_initaial
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max30102_check
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max30102_available
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_dc_remover
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heart_rate_cal_v3
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFIFORed
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFIFOIR
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btw_fileter_100Hz_cf_1Hz_order2
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_timer
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_task
</UL>

<P><STRONG><a name="[253]"></a>im_address_resolve</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, id_manager.o(i.im_address_resolve))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = im_address_resolve &rArr; ah
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ah
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_ble_evt_handler
</UL>

<P><STRONG><a name="[254]"></a>im_ble_addr_get</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, id_manager.o(i.im_ble_addr_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = im_ble_addr_get &rArr; get_connection_by_conn_handle &rArr; ble_conn_state_user_flag_get &rArr; sdk_mapped_flags_get_by_key
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_connection_by_conn_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_keyset_fill
</UL>

<P><STRONG><a name="[190]"></a>im_ble_evt_handler</STRONG> (Thumb, 190 bytes, Stack size 88 bytes, id_manager.o(i.im_ble_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = im_ble_evt_handler &rArr; pds_peer_data_iterate &rArr; fds_record_open &rArr; record_find_by_desc &rArr; record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_iterate_prepare
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_iterate
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_connection
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_new_peer_id
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_address_resolve
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_compare
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[233]"></a>im_conn_handle_get</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, id_manager.o(i.im_conn_handle_get))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_pdb_evt_handler
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_free
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_pdb_evt_handler
</UL>

<P><STRONG><a name="[152]"></a>im_find_duplicate_bonding_data</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, id_manager.o(i.im_find_duplicate_bonding_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = im_find_duplicate_bonding_data &rArr; pds_peer_data_iterate &rArr; fds_record_open &rArr; record_find_by_desc &rArr; record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_iterate_prepare
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_iterate
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_is_duplicate_bonding_data
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_status_success_process
</UL>

<P><STRONG><a name="[259]"></a>im_init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, id_manager.o(i.im_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = im_init &rArr; ble_conn_state_user_flag_acquire
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_init
</UL>

<P><STRONG><a name="[258]"></a>im_is_duplicate_bonding_data</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, id_manager.o(i.im_is_duplicate_bonding_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = im_is_duplicate_bonding_data &rArr; addr_compare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_valid_irk
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_compare
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_find_duplicate_bonding_data
</UL>

<P><STRONG><a name="[25c]"></a>im_master_id_is_valid</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, id_manager.o(i.im_master_id_is_valid))
<BR><BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_master_ids_compare
</UL>

<P><STRONG><a name="[25b]"></a>im_master_ids_compare</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, id_manager.o(i.im_master_ids_compare))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = im_master_ids_compare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_master_id_is_valid
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_info_request_process
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_master_id
</UL>

<P><STRONG><a name="[153]"></a>im_new_peer_id</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, id_manager.o(i.im_new_peer_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = im_new_peer_id &rArr; peer_id_set &rArr; get_connection_by_conn_handle &rArr; ble_conn_state_user_flag_get &rArr; sdk_mapped_flags_get_by_key
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_set
</UL>
<BR>[Called By]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_proc_housekeeping
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_info_request_process
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_status_success_process
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_ble_evt_handler
</UL>

<P><STRONG><a name="[157]"></a>im_peer_free</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, id_manager.o(i.im_peer_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = im_peer_free &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; peer_data_delete &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_peer_free
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_set
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_conn_handle_get
</UL>
<BR>[Called By]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_proc_housekeeping
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_failure
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_status_success_process
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_peer_delete
</UL>

<P><STRONG><a name="[14e]"></a>im_peer_id_get_by_conn_handle</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, id_manager.o(i.im_peer_id_get_by_conn_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = im_peer_id_get_by_conn_handle &rArr; get_connection_by_conn_handle &rArr; ble_conn_state_user_flag_get &rArr; sdk_mapped_flags_get_by_key
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_connection_by_conn_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;params_req_send
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;events_send_from_err_code
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_info_request_process
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_failure
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_status_success_process
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_service_changed_ind_needed
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_local_db_cache_update
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_local_db_cache_apply
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_local_database_has_changed
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_ble_evt_handler
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_send_in_evt
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
</UL>

<P><STRONG><a name="[25f]"></a>im_peer_id_get_by_master_id</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, id_manager.o(i.im_peer_id_get_by_master_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = im_peer_id_get_by_master_id &rArr; pds_peer_data_iterate &rArr; fds_record_open &rArr; record_find_by_desc &rArr; record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_iterate_prepare
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_iterate
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_master_ids_compare
</UL>
<BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_info_request_process
</UL>

<P><STRONG><a name="[24c]"></a>ir_dc_remover</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, heart_rate_cal.o(i.ir_dc_remover))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ir_dc_remover &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heart_rate_monitoring2
</UL>

<P><STRONG><a name="[25a]"></a>is_valid_irk</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, id_manager.o(i.is_valid_irk))
<BR><BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_is_duplicate_bonding_data
</UL>

<P><STRONG><a name="[277]"></a>logging_queue_initial</STRONG> (Thumb, 342 bytes, Stack size 120 bytes, a2_logging_mngr.o(i.logging_queue_initial))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = logging_queue_initial &rArr; a2_write_queue_config &rArr; flash_write &rArr; at45db_write_buffer &rArr; at45db_busy_wait &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;que_initial
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2_read_queue_config
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2_write_queue_config
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logging_init
</UL>

<P><STRONG><a name="[32]"></a>main</STRONG> (Thumb, 860 bytes, Stack size 168 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 13296<LI>Call Chain = main &rArr; sensor_task &rArr; heart_rate_monitoring2 &rArr; spo2_cal &rArr; ZScore &rArr; Std &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;services_init
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_manager_init
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_read
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logging_init
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_params_init
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_start
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2_logic_task
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2_init_gpio
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2_display_task2
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_nus_task
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pedometer_setup
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_enable_request
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ble_enable
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ble_default_cfg_set
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pwr_mgmt_run
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pwr_mgmt_init
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_init
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_6
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_default_backends_init
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_wdt_channel_feed
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_saadc_sample
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_rtc_tick_enable
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_rtc_init
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_rtc_enable
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_rtc_cc_set
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_lfclk_request
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_a2_spi_deinit
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_gatt_init
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_btn_ble_init
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_init
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_init
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_conn_cfg_tag_set
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_create
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_init
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_nus_init
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_task
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pedometer_init
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_init
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max30102_tmp007_init
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_to_power_full_mode
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_setup_time_from_wdt_status
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at45dbxx_uninit
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at45dbxx_init
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aider_a2_info_init
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2_spi_int
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[2d1]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_i2c_max30102_write
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_i2c_0_write
</UL>

<P><STRONG><a name="[24e]"></a>max30102_available</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, max30102.o(i.max30102_available))
<BR><BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max30102_nextSample
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heart_rate_monitoring2
</UL>

<P><STRONG><a name="[249]"></a>max30102_check</STRONG> (Thumb, 232 bytes, Stack size 280 bytes, max30102.o(i.max30102_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = max30102_check &rArr; getWritePointer &rArr; readRegister8
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readRegister
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getWritePointer
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getReadPointer
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heart_rate_monitoring2
</UL>

<P><STRONG><a name="[246]"></a>max30102_initaial</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, max30102.o(i.max30102_initaial))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = max30102_initaial &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max30102_readRevisionID
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max30102_readPartID
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max30102_tmp007_init
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heart_rate_monitoring2
</UL>

<P><STRONG><a name="[295]"></a>max30102_isr_config</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, max30102.o(i.max30102_isr_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = max30102_isr_config &rArr; writeRegister8
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeRegister8
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max30102_setup2
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max30102_setup
</UL>

<P><STRONG><a name="[24d]"></a>max30102_nextSample</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, max30102.o(i.max30102_nextSample))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = max30102_nextSample
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max30102_available
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heart_rate_monitoring2
</UL>

<P><STRONG><a name="[293]"></a>max30102_readPartID</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, max30102.o(i.max30102_readPartID))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = max30102_readPartID &rArr; readRegister8
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readRegister8
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max30102_initaial
</UL>

<P><STRONG><a name="[294]"></a>max30102_readRevisionID</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, max30102.o(i.max30102_readRevisionID))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = max30102_readRevisionID &rArr; readRegister8
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readRegister8
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max30102_initaial
</UL>

<P><STRONG><a name="[296]"></a>max30102_readTemperature</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, max30102.o(i.max30102_readTemperature))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = max30102_readTemperature &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeRegister8
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readRegister8
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max30102_tmp007_init
</UL>

<P><STRONG><a name="[297]"></a>max30102_setup</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, max30102.o(i.max30102_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = max30102_setup &rArr; max30102_softReset &rArr; bitMask &rArr; writeRegister8
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSampleRate
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPulseWidth
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPulseAmplitudeRed
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPulseAmplitudeProximity
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPulseAmplitudeIR
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPulseAmplitudeGreen
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setLEDMode
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setFIFOAverage
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setADCRange
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max30102_softReset
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max30102_isr_config
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enableSlot
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enableFIFORollover
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearFIFO
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max30102_tmp007_init
</UL>

<P><STRONG><a name="[247]"></a>max30102_setup2</STRONG> (Thumb, 370 bytes, Stack size 32 bytes, max30102.o(i.max30102_setup2))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = max30102_setup2 &rArr; max30102_softReset &rArr; bitMask &rArr; writeRegister8
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSampleRate
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPulseWidth
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPulseAmplitudeRed
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPulseAmplitudeProximity
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPulseAmplitudeIR
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPulseAmplitudeGreen
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setLEDMode
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setFIFOAverage
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setADCRange
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max30102_softReset
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max30102_isr_config
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enableSlot
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enableFIFORollover
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearFIFO
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heart_rate_monitoring2
</UL>

<P><STRONG><a name="[2a2]"></a>max30102_shutDown</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, max30102.o(i.max30102_shutDown))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = max30102_shutDown &rArr; bitMask &rArr; writeRegister8
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitMask
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_i2c_max30102_shutdown
</UL>

<P><STRONG><a name="[298]"></a>max30102_softReset</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, max30102.o(i.max30102_softReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = max30102_softReset &rArr; bitMask &rArr; writeRegister8
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readRegister8
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitMask
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max30102_setup2
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max30102_setup
</UL>

<P><STRONG><a name="[287]"></a>max30102_tmp007_init</STRONG> (Thumb, 250 bytes, Stack size 32 bytes, main.o(i.max30102_tmp007_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = max30102_tmp007_init &rArr; nrf_drv_a2_i2c_1_init &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_max30102_reg_i2c_func
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_i2c_max30102_shutdown
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_a2_i2c_1_init
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_a2_i2c_1_deinit
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max30102_setup
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max30102_readTemperature
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max30102_initaial
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[257]"></a>new_connection</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, id_manager.o(i.new_connection))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = new_connection &rArr; get_free_connection &rArr; ble_conn_state_user_flag_get &rArr; sdk_mapped_flags_get_by_key
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_free_connection
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_connection_by_conn_handle
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_ble_evt_handler
</UL>

<P><STRONG><a name="[2a6]"></a>next_id_get</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, peer_id.o(i.next_id_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = next_id_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_mutex_lock_status_get
</UL>
<BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_get_next_used
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_get_next_deleted
</UL>

<P><STRONG><a name="[2a8]"></a>nrf_atfifo_clear</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, nrf_atfifo.o(i.nrf_atfifo_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_atfifo_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_space_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uninit
</UL>

<P><STRONG><a name="[206]"></a>nrf_atfifo_init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, nrf_atfifo.o(i.nrf_atfifo_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_atfifo_init
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_init
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
</UL>

<P><STRONG><a name="[1f2]"></a>nrf_atfifo_item_alloc</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, nrf_atfifo.o(i.nrf_atfifo_item_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_atfifo_item_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_wspace_req
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_buf_get
</UL>

<P><STRONG><a name="[2ab]"></a>nrf_atfifo_item_free</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, nrf_atfifo.o(i.nrf_atfifo_item_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_atfifo_item_free
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_rspace_close
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_sys_evt_handler
</UL>

<P><STRONG><a name="[2ac]"></a>nrf_atfifo_item_get</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, nrf_atfifo.o(i.nrf_atfifo_item_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_atfifo_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_rspace_req
</UL>
<BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>

<P><STRONG><a name="[1f3]"></a>nrf_atfifo_item_put</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, nrf_atfifo.o(i.nrf_atfifo_item_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_atfifo_item_put
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_wspace_close
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_buf_store
</UL>

<P><STRONG><a name="[2b0]"></a>nrf_balloc_alloc</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, nrf_balloc.o(i.nrf_balloc_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = nrf_balloc_alloc &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_alloc
</UL>

<P><STRONG><a name="[2b1]"></a>nrf_balloc_free</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, nrf_balloc.o(i.nrf_balloc_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_free
</UL>

<P><STRONG><a name="[30b]"></a>nrf_balloc_init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, nrf_balloc.o(i.nrf_balloc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_balloc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_pool_init
</UL>

<P><STRONG><a name="[281]"></a>nrf_ble_gatt_init</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, nrf_ble_gatt.o(i.nrf_ble_gatt_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_ble_gatt_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_init
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7f]"></a>nrf_ble_gatt_on_ble_evt</STRONG> (Thumb, 312 bytes, Stack size 88 bytes, nrf_ble_gatt.o(i.nrf_ble_gatt_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = nrf_ble_gatt_on_ble_evt &rArr; on_connected_evt &rArr; nrf_log_frontend_std_2 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_exchange_mtu_request_evt
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connected_evt
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_init
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(sdh_ble_observers1)
</UL>
<P><STRONG><a name="[176]"></a>nrf_dfu_svci_vector_table_set</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, nrf_dfu_svci.o(i.nrf_dfu_svci_vector_table_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = nrf_dfu_svci_vector_table_set &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dfu_buttonless_async_svci_init
</UL>

<P><STRONG><a name="[177]"></a>nrf_dfu_svci_vector_table_unset</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, nrf_dfu_svci.o(i.nrf_dfu_svci_vector_table_unset))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = nrf_dfu_svci_vector_table_unset &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dfu_buttonless_async_svci_init
</UL>

<P><STRONG><a name="[ef]"></a>nrf_drv_a2_i2c_0_deinit</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, nrf_drv_ssd1306.o(i.nrf_drv_a2_i2c_0_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = nrf_drv_a2_i2c_0_deinit &rArr; nrf_twi_mngr_uninit &rArr; nrf_drv_twi_uninit
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twi_mngr_uninit
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2_display_task2
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_init
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_to_ultra_power_save_mode
</UL>

<P><STRONG><a name="[ea]"></a>nrf_drv_a2_i2c_0_init</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, nrf_drv_ssd1306.o(i.nrf_drv_a2_i2c_0_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = nrf_drv_a2_i2c_0_init &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twi_mngr_init
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2_display_task2
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_init
</UL>

<P><STRONG><a name="[252]"></a>nrf_drv_a2_i2c_1_deinit</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, nrf_drv_i2c_max_temp.o(i.nrf_drv_a2_i2c_1_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = nrf_drv_a2_i2c_1_deinit &rArr; nrf_twi_mngr_uninit &rArr; nrf_drv_twi_uninit
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twi_mngr_uninit
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max30102_tmp007_init
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heart_rate_monitoring2
</UL>

<P><STRONG><a name="[244]"></a>nrf_drv_a2_i2c_1_init</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, nrf_drv_i2c_max_temp.o(i.nrf_drv_a2_i2c_1_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = nrf_drv_a2_i2c_1_init &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twi_mngr_init
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max30102_tmp007_init
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heart_rate_monitoring2
</UL>

<P><STRONG><a name="[eb]"></a>nrf_drv_a2_oled_init</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, nrf_drv_ssd1306.o(i.nrf_drv_a2_oled_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nrf_drv_a2_oled_init &rArr; ssd1306_begin &rArr; ssd1306_command
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_us
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_begin
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2_display_task2
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_init
</UL>

<P><STRONG><a name="[ee]"></a>nrf_drv_a2_oled_shutdown</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nrf_drv_ssd1306.o(i.nrf_drv_a2_oled_shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_drv_a2_oled_shutdown &rArr; ssd1306_command
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_command
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2_display_task2
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_init
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_to_ultra_power_save_mode
</UL>

<P><STRONG><a name="[108]"></a>nrf_drv_a2_spi_deinit</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, nrf_drv_spi_bmi_flash.o(i.nrf_drv_a2_spi_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = nrf_drv_a2_spi_deinit &rArr; nrf_spi_mngr_uninit &rArr; nrf_drv_spi_uninit
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_spi_mngr_uninit
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2_logic_task
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_flash_memory
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_task
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_config_to_flash_memory
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_to_ultra_power_save_mode
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_to_power_full_mode
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_to_low_power_mode
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_setup_time_from_wdt_status
</UL>

<P><STRONG><a name="[11b]"></a>nrf_drv_a2_spi_init</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, nrf_drv_spi_bmi_flash.o(i.nrf_drv_a2_spi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = nrf_drv_a2_spi_init &rArr; nrf_spi_mngr_init &rArr; nrf_drv_spi_init &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_spi_mngr_init
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2_spi_int
</UL>

<P><STRONG><a name="[2c7]"></a>nrf_drv_bmi160_acc_config</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, nrf_drv_spi_bmi_flash.o(i.nrf_drv_bmi160_acc_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = nrf_drv_bmi160_acc_config &rArr; nrf_drv_spi_bmi160_read &rArr; nrf_spi_mngr_perform &rArr; nrf_spi_mngr_schedule &rArr; start_pending_transaction &rArr; nrf_drv_spi_init &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_set_sens_conf
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_bmi160_read
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pedometer_init
</UL>

<P><STRONG><a name="[1ec]"></a>nrf_drv_bmi160_power_and_cs_init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, nrf_drv_spi_bmi_flash.o(i.nrf_drv_bmi160_power_and_cs_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_drv_bmi160_power_and_cs_init &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_task
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pedometer_init
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_to_ultra_power_save_mode
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_to_power_full_mode
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_to_low_power_mode
</UL>

<P><STRONG><a name="[1ee]"></a>nrf_drv_bmi160_power_off</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, nrf_drv_spi_bmi_flash.o(i.nrf_drv_bmi160_power_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_drv_bmi160_power_off &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_to_low_power_mode
</UL>

<P><STRONG><a name="[2c8]"></a>nrf_drv_bmi160_spi_int</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, nrf_drv_spi_bmi_flash.o(i.nrf_drv_bmi160_spi_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nrf_drv_bmi160_spi_int &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pedometer_init
</UL>

<P><STRONG><a name="[2c9]"></a>nrf_drv_bmi160_step_count_conf</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, nrf_drv_spi_bmi_flash.o(i.nrf_drv_bmi160_step_count_conf))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nrf_drv_bmi160_step_count_conf &rArr; bmi160_set_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_set_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pedometer_init
</UL>

<P><STRONG><a name="[2ca]"></a>nrf_drv_bmi160_step_count_reset_value</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, nrf_drv_spi_bmi_flash.o(i.nrf_drv_bmi160_step_count_reset_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_drv_bmi160_step_count_reset_value &rArr; bmi160_set_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_set_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_task
</UL>

<P><STRONG><a name="[2cb]"></a>nrf_drv_clock_init</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, nrf_drv_clock.o(i.nrf_drv_clock_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_drv_clock_init
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_is_enabled
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_common_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_state_evt_handler
</UL>

<P><STRONG><a name="[2cd]"></a>nrf_drv_clock_lfclk_release</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, nrf_drv_clock.o(i.nrf_drv_clock_lfclk_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nrf_drv_clock_lfclk_release &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfclk_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_state_evt_handler
</UL>

<P><STRONG><a name="[279]"></a>nrf_drv_clock_lfclk_request</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, nrf_drv_clock.o(i.nrf_drv_clock_lfclk_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = nrf_drv_clock_lfclk_request &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_clock_event_clear
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;item_enqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2cc]"></a>nrf_drv_common_irq_enable</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, nrf_drv_common.o(i.nrf_drv_common_irq_enable))
<BR><BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_wdt_init
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_init
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_saadc_init
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_rtc_init
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_init
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_state_evt_handler
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_init
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_init
</UL>

<P><STRONG><a name="[145]"></a>nrf_drv_flash_spi_init</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, nrf_drv_spi_bmi_flash.o(i.nrf_drv_flash_spi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nrf_drv_flash_spi_init &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at45dbxx_init
</UL>

<P><STRONG><a name="[4c]"></a>nrf_drv_i2c_0_read</STRONG> (Thumb, 72 bytes, Stack size 48 bytes, nrf_drv_ssd1306.o(i.nrf_drv_i2c_0_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = nrf_drv_i2c_0_read &rArr; nrf_twi_mngr_perform &rArr; nrf_twi_mngr_schedule &rArr; start_pending_transaction &rArr; start_transfer &rArr; nrf_drv_twi_xfer &rArr; twim_xfer &rArr; nrf_twim_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twi_mngr_perform
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_drv_ssd1306.o(i.nrf_drv_a2_oled_init)
</UL>
<P><STRONG><a name="[4d]"></a>nrf_drv_i2c_0_write</STRONG> (Thumb, 78 bytes, Stack size 40 bytes, nrf_drv_ssd1306.o(i.nrf_drv_i2c_0_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = nrf_drv_i2c_0_write &rArr; nrf_twi_mngr_perform &rArr; nrf_twi_mngr_schedule &rArr; start_pending_transaction &rArr; start_transfer &rArr; nrf_drv_twi_xfer &rArr; twim_xfer &rArr; nrf_twim_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twi_mngr_perform
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_drv_ssd1306.o(i.nrf_drv_a2_oled_init)
</UL>
<P><STRONG><a name="[54]"></a>nrf_drv_i2c_max30102_read</STRONG> (Thumb, 62 bytes, Stack size 40 bytes, nrf_drv_i2c_max_temp.o(i.nrf_drv_i2c_max30102_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = nrf_drv_i2c_max30102_read &rArr; nrf_twi_mngr_perform &rArr; nrf_twi_mngr_schedule &rArr; start_pending_transaction &rArr; start_transfer &rArr; nrf_drv_twi_xfer &rArr; twim_xfer &rArr; nrf_twim_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twi_mngr_perform
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_drv_i2c_max_temp.o(i.nrf_drv_max30102_reg_i2c_func)
</UL>
<P><STRONG><a name="[251]"></a>nrf_drv_i2c_max30102_shutdown</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, nrf_drv_i2c_max_temp.o(i.nrf_drv_i2c_max30102_shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = nrf_drv_i2c_max30102_shutdown &rArr; max30102_shutDown &rArr; bitMask &rArr; writeRegister8
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_us
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPulseAmplitudeRed
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPulseAmplitudeProximity
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPulseAmplitudeIR
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPulseAmplitudeGreen
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max30102_shutDown
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max30102_tmp007_init
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heart_rate_monitoring2
</UL>

<P><STRONG><a name="[55]"></a>nrf_drv_i2c_max30102_write</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, nrf_drv_i2c_max_temp.o(i.nrf_drv_i2c_max30102_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = nrf_drv_i2c_max30102_write &rArr; nrf_twi_mngr_perform &rArr; nrf_twi_mngr_schedule &rArr; start_pending_transaction &rArr; start_transfer &rArr; nrf_drv_twi_xfer &rArr; twim_xfer &rArr; nrf_twim_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twi_mngr_perform
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_drv_i2c_max_temp.o(i.nrf_drv_max30102_reg_i2c_func)
</UL>
<P><STRONG><a name="[245]"></a>nrf_drv_max30102_reg_i2c_func</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, nrf_drv_i2c_max_temp.o(i.nrf_drv_max30102_reg_i2c_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_drv_max30102_reg_i2c_func
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max30102_tmp007_init
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heart_rate_monitoring2
</UL>

<P><STRONG><a name="[28a]"></a>nrf_drv_rtc_cc_set</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, nrf_drv_rtc.o(i.nrf_drv_rtc_cc_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_drv_rtc_cc_set &rArr; nrf_rtc_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_rtc_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_handler
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[28b]"></a>nrf_drv_rtc_enable</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, nrf_drv_rtc.o(i.nrf_drv_rtc_enable))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[288]"></a>nrf_drv_rtc_init</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, nrf_drv_rtc.o(i.nrf_drv_rtc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_drv_rtc_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_common_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[289]"></a>nrf_drv_rtc_tick_enable</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, nrf_drv_rtc.o(i.nrf_drv_rtc_tick_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_drv_rtc_tick_enable &rArr; nrf_rtc_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_rtc_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[123]"></a>nrf_drv_saadc_buffer_convert</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, nrf_drv_saadc.o(i.nrf_drv_saadc_buffer_convert))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_drv_saadc_buffer_convert &rArr; nrf_saadc_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_event_clear
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_event_check
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_buffer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saadc_event_handler
</UL>

<P><STRONG><a name="[122]"></a>nrf_drv_saadc_channel_init</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, nrf_drv_saadc.o(i.nrf_drv_saadc_channel_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_drv_saadc_channel_init &rArr; nrf_saadc_channel_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_channel_init
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_channel_input_set
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
</UL>

<P><STRONG><a name="[2d6]"></a>nrf_drv_saadc_channel_uninit</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, nrf_drv_saadc.o(i.nrf_drv_saadc_channel_uninit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_drv_saadc_channel_uninit &rArr; nrf_drv_saadc_limits_set
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_saadc_limits_set
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_channel_input_set
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_saadc_uninit
</UL>

<P><STRONG><a name="[120]"></a>nrf_drv_saadc_init</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, nrf_drv_saadc.o(i.nrf_drv_saadc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_drv_saadc_init &rArr; nrf_saadc_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_common_irq_enable
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
</UL>

<P><STRONG><a name="[2d7]"></a>nrf_drv_saadc_limits_set</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, nrf_drv_saadc.o(i.nrf_drv_saadc_limits_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_drv_saadc_limits_set
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_limit_int_get
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_saadc_channel_uninit
</UL>

<P><STRONG><a name="[28c]"></a>nrf_drv_saadc_sample</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, nrf_drv_saadc.o(i.nrf_drv_saadc_sample))
<BR><BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_task
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2d9]"></a>nrf_drv_saadc_uninit</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, nrf_drv_saadc.o(i.nrf_drv_saadc_uninit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = nrf_drv_saadc_uninit &rArr; nrf_drv_saadc_channel_uninit &rArr; nrf_drv_saadc_limits_set
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_saadc_channel_uninit
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_event_check
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saadc_event_handler
</UL>

<P><STRONG><a name="[4e]"></a>nrf_drv_spi_bmi160_read</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, nrf_drv_spi_bmi_flash.o(i.nrf_drv_spi_bmi160_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = nrf_drv_spi_bmi160_read &rArr; nrf_spi_mngr_perform &rArr; nrf_spi_mngr_schedule &rArr; start_pending_transaction &rArr; nrf_drv_spi_init &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_spi_mngr_perform
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_set_bmi160_cs_pin
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_clear_bmi160_cs_pin
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_bmi160_acc_config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_drv_spi_bmi_flash.o(i.nrf_drv_bmi160_spi_int)
</UL>
<P><STRONG><a name="[4f]"></a>nrf_drv_spi_bmi160_write</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, nrf_drv_spi_bmi_flash.o(i.nrf_drv_spi_bmi160_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = nrf_drv_spi_bmi160_write &rArr; nrf_spi_mngr_perform &rArr; nrf_spi_mngr_schedule &rArr; start_pending_transaction &rArr; nrf_drv_spi_init &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_spi_mngr_perform
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_set_bmi160_cs_pin
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_clear_bmi160_cs_pin
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_drv_spi_bmi_flash.o(i.nrf_drv_bmi160_spi_int)
</UL>
<P><STRONG><a name="[51]"></a>nrf_drv_spi_flash_read</STRONG> (Thumb, 206 bytes, Stack size 72 bytes, nrf_drv_spi_bmi_flash.o(i.nrf_drv_spi_flash_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = nrf_drv_spi_flash_read &rArr; nrf_spi_mngr_perform &rArr; nrf_spi_mngr_schedule &rArr; start_pending_transaction &rArr; nrf_drv_spi_init &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_spi_mngr_perform
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_set_flash_cs_pin
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_clear_flash_cs_pin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_drv_spi_bmi_flash.o(i.nrf_drv_flash_spi_init)
</UL>
<P><STRONG><a name="[52]"></a>nrf_drv_spi_flash_write</STRONG> (Thumb, 110 bytes, Stack size 48 bytes, nrf_drv_spi_bmi_flash.o(i.nrf_drv_spi_flash_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = nrf_drv_spi_flash_write &rArr; nrf_spi_mngr_perform &rArr; nrf_spi_mngr_schedule &rArr; start_pending_transaction &rArr; nrf_drv_spi_init &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_spi_mngr_perform
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_set_flash_cs_pin
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_clear_flash_cs_pin
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_drv_spi_bmi_flash.o(i.nrf_drv_flash_spi_init)
</UL>
<P><STRONG><a name="[2db]"></a>nrf_drv_spi_init</STRONG> (Thumb, 292 bytes, Stack size 48 bytes, nrf_drv_spi.o(i.nrf_drv_spi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = nrf_drv_spi_init &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_common_irq_enable
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_spi_mngr_init
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_pending_transaction
</UL>

<P><STRONG><a name="[2de]"></a>nrf_drv_spi_transfer</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, nrf_drv_spi.o(i.nrf_drv_spi_transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_transfer
</UL>

<P><STRONG><a name="[2e0]"></a>nrf_drv_spi_uninit</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, nrf_drv_spi.o(i.nrf_drv_spi_uninit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_drv_spi_uninit
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_spim_event_check
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_spi_mngr_uninit
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_pending_transaction
</UL>

<P><STRONG><a name="[2df]"></a>nrf_drv_spi_xfer</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, nrf_drv_spi.o(i.nrf_drv_spi_xfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nrf_drv_spi_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_transfer
</UL>

<P><STRONG><a name="[2e3]"></a>nrf_drv_timer_compare</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, nrf_drv_timer.o(i.nrf_drv_timer_compare))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = nrf_drv_timer_compare
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_extended_compare
</UL>

<P><STRONG><a name="[2e6]"></a>nrf_drv_timer_disable</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, nrf_drv_timer.o(i.nrf_drv_timer_disable))
<BR><BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_uninit
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_timer
</UL>

<P><STRONG><a name="[393]"></a>nrf_drv_timer_enable</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, nrf_drv_timer.o(i.nrf_drv_timer_enable))
<BR><BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_timer
</UL>

<P><STRONG><a name="[2e2]"></a>nrf_drv_timer_extended_compare</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, nrf_drv_timer.o(i.nrf_drv_timer_extended_compare))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = nrf_drv_timer_extended_compare &rArr; nrf_drv_timer_compare
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_compare
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_timer
</UL>

<P><STRONG><a name="[2e4]"></a>nrf_drv_timer_init</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, nrf_drv_timer.o(i.nrf_drv_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_drv_timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_common_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_timer
</UL>

<P><STRONG><a name="[2e5]"></a>nrf_drv_timer_uninit</STRONG> (Thumb, 90 bytes, Stack size 12 bytes, nrf_drv_timer.o(i.nrf_drv_timer_uninit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = nrf_drv_timer_uninit
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_timer
</UL>

<P><STRONG><a name="[2ea]"></a>nrf_drv_twi_disable</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, nrf_drv_twi.o(i.nrf_drv_twi_disable))
<BR><BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_uninit
</UL>

<P><STRONG><a name="[323]"></a>nrf_drv_twi_enable</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, nrf_drv_twi.o(i.nrf_drv_twi_enable))
<BR><BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twi_mngr_init
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_pending_transaction
</UL>

<P><STRONG><a name="[2e7]"></a>nrf_drv_twi_init</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, nrf_drv_twi.o(i.nrf_drv_twi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_drv_twi_init &rArr; twi_clear_bus
</UL>
<BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_common_irq_enable
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_clear_bus
</UL>
<BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twi_mngr_init
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_pending_transaction
</UL>

<P><STRONG><a name="[2e9]"></a>nrf_drv_twi_uninit</STRONG> (Thumb, 102 bytes, Stack size 12 bytes, nrf_drv_twi.o(i.nrf_drv_twi_uninit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = nrf_drv_twi_uninit
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twi_mngr_uninit
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_pending_transaction
</UL>

<P><STRONG><a name="[2eb]"></a>nrf_drv_twi_xfer</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, nrf_drv_twi.o(i.nrf_drv_twi_xfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = nrf_drv_twi_xfer &rArr; twim_xfer &rArr; nrf_twim_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twim_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_transfer
</UL>

<P><STRONG><a name="[2ed]"></a>nrf_drv_wdt_channel_alloc</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, nrf_drv_wdt.o(i.nrf_drv_wdt_channel_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = nrf_drv_wdt_channel_alloc &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_init
</UL>

<P><STRONG><a name="[28e]"></a>nrf_drv_wdt_channel_feed</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrf_drv_wdt.o(i.nrf_drv_wdt_channel_feed))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3a9]"></a>nrf_drv_wdt_enable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nrf_drv_wdt.o(i.nrf_drv_wdt_enable))
<BR><BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_init
</UL>

<P><STRONG><a name="[2ee]"></a>nrf_drv_wdt_init</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, nrf_drv_wdt.o(i.nrf_drv_wdt_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = nrf_drv_wdt_init &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_common_irq_enable
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_init
</UL>

<P><STRONG><a name="[2ef]"></a>nrf_fprintf</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, nrf_fprintf.o(i.nrf_fprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr; nrf_fprintf_buffer_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_fmt
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_std_entry_process
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_hexdump_entry_process
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prefix_process
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;postfix_process
</UL>

<P><STRONG><a name="[1be]"></a>nrf_fprintf_buffer_flush</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, nrf_fprintf.o(i.nrf_fprintf_buffer_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_fprintf_buffer_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_add
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_fmt
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;postfix_process
</UL>

<P><STRONG><a name="[2f0]"></a>nrf_fprintf_fmt</STRONG> (Thumb, 450 bytes, Stack size 40 bytes, nrf_fprintf_format.o(i.nrf_fprintf_fmt))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr; nrf_fprintf_buffer_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned_print
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_print
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_add
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_buffer_flush
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf
</UL>

<P><STRONG><a name="[227]"></a>nrf_fstorage_erase</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, nrf_fstorage.o(i.nrf_fstorage_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_fstorage_erase
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_within_bounds
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_execute
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_page_erase
</UL>

<P><STRONG><a name="[205]"></a>nrf_fstorage_init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nrf_fstorage.o(i.nrf_fstorage_init))
<BR><BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_init
</UL>

<P><STRONG><a name="[168]"></a>nrf_fstorage_is_busy</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, nrf_fstorage.o(i.nrf_fstorage_is_busy))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_fstorage_is_busy
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
</UL>

<P><STRONG><a name="[8a]"></a>nrf_fstorage_sdh_req_handler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nrf_fstorage_sd.o(i.nrf_fstorage_sdh_req_handler))
<BR>[Address Reference Count : 1]<UL><LI> nrf_fstorage_sd.o(sdh_req_observers0)
</UL>
<P><STRONG><a name="[92]"></a>nrf_fstorage_sdh_state_handler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, nrf_fstorage_sd.o(i.nrf_fstorage_sdh_state_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = nrf_fstorage_sdh_state_handler &rArr; queue_process &rArr; nrf_fstorage_sys_evt_handler &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_fstorage_sd.o(sdh_state_observers0)
</UL>
<P><STRONG><a name="[8c]"></a>nrf_fstorage_sys_evt_handler</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, nrf_fstorage_sd.o(i.nrf_fstorage_sys_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 260 + In Cycle
<LI>Call Chain = nrf_fstorage_sys_evt_handler &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_send
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_free
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_request_continue
</UL>
<BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_fstorage_sd.o(sdh_soc_observers0)
</UL>
<P><STRONG><a name="[228]"></a>nrf_fstorage_write</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, nrf_fstorage.o(i.nrf_fstorage_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_fstorage_write
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_within_bounds
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_is_aligned32
</UL>
<BR>[Called By]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_execute
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_header_flag_dirty
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_tag_write_swap
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_tag_write_data
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_record_copy
</UL>

<P><STRONG><a name="[2fc]"></a>nrf_log_backend_add</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, nrf_log_frontend.o(i.nrf_log_backend_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_log_backend_add
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_default_backends_init
</UL>

<P><STRONG><a name="[2f5]"></a>nrf_log_backend_rtt_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, nrf_log_backend_rtt.o(i.nrf_log_backend_rtt_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_log_backend_rtt_init &rArr; SEGGER_RTT_Init &rArr; _DoInit
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_default_backends_init
</UL>

<P><STRONG><a name="[2f6]"></a>nrf_log_backend_serial_put</STRONG> (Thumb, 210 bytes, Stack size 96 bytes, nrf_log_backend_serial.o(i.nrf_log_backend_serial_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = nrf_log_backend_serial_put &rArr; nrf_log_std_entry_process &rArr; prefix_process &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr; nrf_fprintf_buffer_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_std_entry_process
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_hexdump_entry_process
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_read
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_put
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_get
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_rtt_put
</UL>

<P><STRONG><a name="[36b]"></a>nrf_log_color_id_get</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, nrf_log_frontend.o(i.nrf_log_color_id_get))
<BR><BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prefix_process
</UL>

<P><STRONG><a name="[27b]"></a>nrf_log_default_backends_init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, nrf_log_default_backends.o(i.nrf_log_default_backends_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_log_default_backends_init &rArr; nrf_log_backend_add
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_rtt_init
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_add
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f2]"></a>nrf_log_frontend_dequeue</STRONG> (Thumb, 490 bytes, Stack size 56 bytes, nrf_log_frontend.o(i.nrf_log_frontend_dequeue))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_write
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_put
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_get
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_alloc
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_is_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_nus_special_button_alert_reg_mngr
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dfu_evt_handler
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_shutdown_handler
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2_logic_task
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2_display_task2
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spo2_cal
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_display
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pedometer_setup
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_hexdump
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_i2c_0_read
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max30102_initaial
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heart_rate_cal_v3
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hrs_heart_rate_measurement_send
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at45dbxx_is_available
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2_write_pedo_meter_log
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2_write_button_alert_log
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_event_handler
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max30102_tmp007_init
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heart_rate_monitoring2
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_to_power_full_mode
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_setup_time_from_wdt_status
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shutdown_process
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_n
</UL>

<P><STRONG><a name="[300]"></a>nrf_log_frontend_hexdump</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, nrf_log_frontend.o(i.nrf_log_frontend_hexdump))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = nrf_log_frontend_hexdump &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_prealloc
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_nus_special_button_alert_reg_mngr
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nus_data_handler
</UL>

<P><STRONG><a name="[e5]"></a>nrf_log_frontend_std_0</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrf_log_frontend.o(i.nrf_log_frontend_std_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_n
</UL>
<BR>[Called By]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_nus_special_free_fall_raw_data_reg_mngr
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_nus_special_button_alert_reg_mngr
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_nus_normal_register_mngr
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_evt_handler
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_adv_evt
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nus_data_handler
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_scrolling_timeout_handler
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cancel_sos_timeout_handler
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dfu_evt_handler
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_shutdown_handler
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_start
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2_logic_task
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2_display_task2
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_nus_task
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_display
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max30102_initaial
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logging_queue_initial
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heart_rate_cal_v3
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hrs_heart_rate_measurement_send
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2_write_pedo_meter_log
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2_check_config
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_event_handler
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_task
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pedometer_init
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_init
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max30102_tmp007_init
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heart_rate_monitoring2
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_to_ultra_power_save_mode
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_to_power_full_mode
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_setup_time_from_wdt_status
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at45dbxx_init
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_dfu_svci_vector_table_unset
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_dfu_svci_vector_table_set
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at45db_busy_wait
</UL>

<P><STRONG><a name="[114]"></a>nrf_log_frontend_std_1</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrf_log_frontend.o(i.nrf_log_frontend_std_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = nrf_log_frontend_std_1 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_n
</UL>
<BR>[Called By]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_nus_special_button_alert_reg_mngr
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2_read_pedo_meter_log_by_queue
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_display
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pedometer_setup
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ble_enable
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ble_default_cfg_set
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_gatt_on_ble_evt
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logging_queue_initial
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heart_rate_cal_v3
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_heart_reate
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hrs_heart_rate_measurement_send
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2_write_pedo_meter_log
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heart_rate_monitoring2
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_setup_time_from_wdt_status
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_exchange_mtu_request_evt
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connected_evt
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_dfu_svci_vector_table_unset
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_dfu_svci_vector_table_set
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dfu_buttonless_on_ble_evt
</UL>

<P><STRONG><a name="[21d]"></a>nrf_log_frontend_std_2</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, nrf_log_frontend.o(i.nrf_log_frontend_std_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = nrf_log_frontend_std_2 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_n
</UL>
<BR>[Called By]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_nus_special_free_fall_raw_data_reg_mngr
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_evt_handler
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ble_enable
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logging_queue_initial
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max30102_tmp007_init
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connected_evt
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
</UL>

<P><STRONG><a name="[149]"></a>nrf_log_frontend_std_3</STRONG> (Thumb, 18 bytes, Stack size 24 bytes, nrf_log_frontend.o(i.nrf_log_frontend_std_3))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_n
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_evt_handler
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spo2_cal
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heart_rate_cal_v3
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at45dbxx_is_available
</UL>

<P><STRONG><a name="[302]"></a>nrf_log_frontend_std_4</STRONG> (Thumb, 20 bytes, Stack size 32 bytes, nrf_log_frontend.o(i.nrf_log_frontend_std_4))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = nrf_log_frontend_std_4 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_n
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spo2_cal
</UL>

<P><STRONG><a name="[303]"></a>nrf_log_frontend_std_5</STRONG> (Thumb, 28 bytes, Stack size 40 bytes, nrf_log_frontend.o(i.nrf_log_frontend_std_5))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_n
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spo2_cal
</UL>

<P><STRONG><a name="[284]"></a>nrf_log_frontend_std_6</STRONG> (Thumb, 28 bytes, Stack size 48 bytes, nrf_log_frontend.o(i.nrf_log_frontend_std_6))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = nrf_log_frontend_std_6 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_n
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2fa]"></a>nrf_log_hexdump_entry_process</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, nrf_log_str_formatter.o(i.nrf_log_hexdump_entry_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = nrf_log_hexdump_entry_process &rArr; prefix_process &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr; nrf_fprintf_buffer_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prefix_process
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;postfix_process
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_put
</UL>

<P><STRONG><a name="[27a]"></a>nrf_log_init</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, nrf_log_frontend.o(i.nrf_log_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_log_init &rArr; nrf_memobj_pool_init &rArr; nrf_balloc_init
</UL>
<BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_pool_init
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2a5]"></a>nrf_log_module_cnt_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_log_frontend.o(i.nrf_log_module_cnt_get))
<BR><BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_idx_get
</UL>

<P><STRONG><a name="[308]"></a>nrf_log_module_name_get</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, nrf_log_frontend.o(i.nrf_log_module_name_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = nrf_log_module_name_get &rArr; module_idx_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_idx_get
</UL>
<BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prefix_process
</UL>

<P><STRONG><a name="[134]"></a>nrf_log_panic</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, nrf_log_frontend.o(i.nrf_log_panic))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_log_panic
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shutdown_process
</UL>

<P><STRONG><a name="[2f9]"></a>nrf_log_std_entry_process</STRONG> (Thumb, 182 bytes, Stack size 48 bytes, nrf_log_str_formatter.o(i.nrf_log_std_entry_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = nrf_log_std_entry_process &rArr; prefix_process &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr; nrf_fprintf_buffer_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prefix_process
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;postfix_process
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_put
</UL>

<P><STRONG><a name="[2fe]"></a>nrf_memobj_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, nrf_memobj.o(i.nrf_memobj_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_alloc
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_free
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
</UL>

<P><STRONG><a name="[309]"></a>nrf_memobj_free</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, nrf_memobj.o(i.nrf_memobj_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_free
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_put
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_alloc
</UL>

<P><STRONG><a name="[2f7]"></a>nrf_memobj_get</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrf_memobj.o(i.nrf_memobj_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_memobj_get
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_memobj_c_9bb9f865__nrf_atomic_internal_add
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_put
</UL>

<P><STRONG><a name="[307]"></a>nrf_memobj_pool_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, nrf_memobj.o(i.nrf_memobj_pool_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_memobj_pool_init &rArr; nrf_balloc_init
</UL>
<BR>[Calls]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_init
</UL>

<P><STRONG><a name="[2fb]"></a>nrf_memobj_put</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, nrf_memobj.o(i.nrf_memobj_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = nrf_memobj_put &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_free
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_memobj_c_9bb9f865__nrf_atomic_internal_sub
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_put
</UL>

<P><STRONG><a name="[2f8]"></a>nrf_memobj_read</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, nrf_memobj.o(i.nrf_memobj_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = nrf_memobj_read &rArr; memobj_op &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memobj_op
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_put
</UL>

<P><STRONG><a name="[2ff]"></a>nrf_memobj_write</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, nrf_memobj.o(i.nrf_memobj_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = nrf_memobj_write &rArr; memobj_op &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memobj_op
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
</UL>

<P><STRONG><a name="[27c]"></a>nrf_pwr_mgmt_init</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, nrf_pwr_mgmt.o(i.nrf_pwr_mgmt_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = nrf_pwr_mgmt_init &rArr; app_timer_start &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_create
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_init
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[28f]"></a>nrf_pwr_mgmt_run</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, nrf_pwr_mgmt.o(i.nrf_pwr_mgmt_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nrf_pwr_mgmt_run &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_is_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[179]"></a>nrf_pwr_mgmt_shutdown</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, nrf_pwr_mgmt.o(i.nrf_pwr_mgmt_shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = nrf_pwr_mgmt_shutdown &rArr; shutdown_process &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___14_nrf_pwr_mgmt_c_f22138a6__nrf_atomic_internal_mov
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shutdown_process
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dfu_buttonless_bootloader_start_finalize
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pwr_mgmt_timeout_handler
</UL>

<P><STRONG><a name="[310]"></a>nrf_queue_generic_pop</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, nrf_queue.o(i.nrf_queue_generic_pop))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = nrf_queue_generic_pop &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_is_empty
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_next_idx
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_pending_transaction
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_pending_transaction
</UL>

<P><STRONG><a name="[311]"></a>nrf_queue_is_empty</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nrf_queue.o(i.nrf_queue_is_empty))
<BR><BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_generic_pop
</UL>

<P><STRONG><a name="[313]"></a>nrf_queue_is_full</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, nrf_queue.o(i.nrf_queue_is_full))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_queue_is_full
</UL>
<BR>[Calls]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_next_idx
</UL>
<BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_push
</UL>

<P><STRONG><a name="[314]"></a>nrf_queue_push</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, nrf_queue.o(i.nrf_queue_push))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = nrf_queue_push &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_is_full
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_utilization_get
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_next_idx
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twi_mngr_schedule
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_spi_mngr_schedule
</UL>

<P><STRONG><a name="[2d4]"></a>nrf_saadc_channel_init</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, nrf_saadc.o(i.nrf_saadc_channel_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_saadc_channel_init
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_saadc_channel_init
</UL>

<P><STRONG><a name="[316]"></a>nrf_sdh_ble_app_ram_start_get</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nrf_sdh_ble.o(i.nrf_sdh_ble_app_ram_start_get))
<BR><BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ble_default_cfg_set
</UL>

<P><STRONG><a name="[27e]"></a>nrf_sdh_ble_default_cfg_set</STRONG> (Thumb, 236 bytes, Stack size 32 bytes, nrf_sdh_ble.o(i.nrf_sdh_ble_default_cfg_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = nrf_sdh_ble_default_cfg_set &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_strerror_get
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ble_app_ram_start_get
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[27f]"></a>nrf_sdh_ble_enable</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, nrf_sdh_ble.o(i.nrf_sdh_ble_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = nrf_sdh_ble_enable &rArr; nrf_log_frontend_std_2 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_strerror_get
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[319]"></a>nrf_sdh_disable_request</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, nrf_sdh.o(i.nrf_sdh_disable_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = nrf_sdh_disable_request &rArr; softdevice_evt_irq_disable &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_evt_irq_disable
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdh_state_observer_notify
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdh_request_observer_notify
</UL>
<BR>[Called By]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_request_continue
</UL>

<P><STRONG><a name="[27d]"></a>nrf_sdh_enable_request</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, nrf_sdh.o(i.nrf_sdh_enable_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = nrf_sdh_enable_request &rArr; softdevices_evt_irq_enable &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevices_evt_irq_enable
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdh_state_observer_notify
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdh_request_observer_notify
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_nvic_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_request_continue
</UL>

<P><STRONG><a name="[c5]"></a>nrf_sdh_evts_poll</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, nrf_sdh.o(i.nrf_sdh_evts_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_sdh_evts_poll &rArr; nrf_section_iter_next &rArr; nrf_section_iter_item_set
</UL>
<BR>[Calls]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_next
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_init
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI2_EGU2_IRQHandler
</UL>

<P><STRONG><a name="[261]"></a>nrf_sdh_is_enabled</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_sdh.o(i.nrf_sdh_is_enabled))
<BR><BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pwr_mgmt_run
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_init
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shutdown_process
</UL>

<P><STRONG><a name="[2f3]"></a>nrf_sdh_request_continue</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, nrf_sdh.o(i.nrf_sdh_request_continue))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = nrf_sdh_request_continue &rArr; nrf_sdh_enable_request &rArr; softdevices_evt_irq_enable &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_enable_request
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_disable_request
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_sys_evt_handler
</UL>

<P><STRONG><a name="[30d]"></a>nrf_section_iter_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_section_iter.o(i.nrf_section_iter_init))
<BR><BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pwr_mgmt_init
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_evts_poll
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdh_state_observer_notify
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdh_request_observer_notify
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_soc_evts_poll
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ble_evts_poll
</UL>

<P><STRONG><a name="[318]"></a>nrf_section_iter_next</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, nrf_section_iter.o(i.nrf_section_iter_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_section_iter_next &rArr; nrf_section_iter_item_set
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_item_set
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shutdown_process
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_evts_poll
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdh_state_observer_notify
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdh_request_observer_notify
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_soc_evts_poll
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ble_evts_poll
</UL>

<P><STRONG><a name="[2c6]"></a>nrf_spi_mngr_init</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, nrf_spi_mngr.o(i.nrf_spi_mngr_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = nrf_spi_mngr_init &rArr; nrf_drv_spi_init &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_init
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_a2_spi_init
</UL>

<P><STRONG><a name="[2da]"></a>nrf_spi_mngr_perform</STRONG> (Thumb, 104 bytes, Stack size 56 bytes, nrf_spi_mngr.o(i.nrf_spi_mngr_perform))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = nrf_spi_mngr_perform &rArr; nrf_spi_mngr_schedule &rArr; start_pending_transaction &rArr; nrf_drv_spi_init &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_spi_mngr_schedule
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_flash_write
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_flash_read
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_bmi160_write
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_bmi160_read
</UL>

<P><STRONG><a name="[320]"></a>nrf_spi_mngr_schedule</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, nrf_spi_mngr.o(i.nrf_spi_mngr_schedule))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = nrf_spi_mngr_schedule &rArr; start_pending_transaction &rArr; nrf_drv_spi_init &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_pending_transaction
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_push
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_spi_mngr_perform
</UL>

<P><STRONG><a name="[2c3]"></a>nrf_spi_mngr_uninit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, nrf_spi_mngr.o(i.nrf_spi_mngr_uninit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_spi_mngr_uninit &rArr; nrf_drv_spi_uninit
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_uninit
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_a2_spi_deinit
</UL>

<P><STRONG><a name="[322]"></a>nrf_strerror_find</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, nrf_strerror.o(i.nrf_strerror_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_strerror_find
</UL>
<BR>[Called By]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_strerror_get
</UL>

<P><STRONG><a name="[317]"></a>nrf_strerror_get</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, nrf_strerror.o(i.nrf_strerror_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = nrf_strerror_get &rArr; nrf_strerror_find
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_strerror_find
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ble_enable
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ble_default_cfg_set
</UL>

<P><STRONG><a name="[2be]"></a>nrf_twi_mngr_init</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, nrf_twi_mngr.o(i.nrf_twi_mngr_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = nrf_twi_mngr_init &rArr; nrf_drv_twi_init &rArr; twi_clear_bus
</UL>
<BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_init
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_a2_i2c_1_init
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_a2_i2c_0_init
</UL>

<P><STRONG><a name="[2d0]"></a>nrf_twi_mngr_perform</STRONG> (Thumb, 120 bytes, Stack size 48 bytes, nrf_twi_mngr.o(i.nrf_twi_mngr_perform))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = nrf_twi_mngr_perform &rArr; nrf_twi_mngr_schedule &rArr; start_pending_transaction &rArr; start_transfer &rArr; nrf_drv_twi_xfer &rArr; twim_xfer &rArr; nrf_twim_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twi_mngr_schedule
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_us
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_i2c_0_read
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_i2c_max30102_write
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_i2c_max30102_read
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_i2c_0_write
</UL>

<P><STRONG><a name="[324]"></a>nrf_twi_mngr_schedule</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, nrf_twi_mngr.o(i.nrf_twi_mngr_schedule))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = nrf_twi_mngr_schedule &rArr; start_pending_transaction &rArr; start_transfer &rArr; nrf_drv_twi_xfer &rArr; twim_xfer &rArr; nrf_twim_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_pending_transaction
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_push
</UL>
<BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twi_mngr_perform
</UL>

<P><STRONG><a name="[2bc]"></a>nrf_twi_mngr_uninit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, nrf_twi_mngr.o(i.nrf_twi_mngr_uninit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nrf_twi_mngr_uninit &rArr; nrf_drv_twi_uninit
</UL>
<BR>[Calls]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_uninit
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_a2_i2c_1_deinit
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_a2_i2c_0_deinit
</UL>

<P><STRONG><a name="[60]"></a>nus_sent_to_host</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, main.o(i.nus_sent_to_host))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nus_sent_to_host &rArr; ble_nus_string_send
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_nus_string_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.sync_nus_init)
</UL>
<P><STRONG><a name="[286]"></a>oled_init</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, main.o(i.oled_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = oled_init &rArr; nrf_drv_i2c_0_read &rArr; nrf_twi_mngr_perform &rArr; nrf_twi_mngr_schedule &rArr; start_pending_transaction &rArr; start_transfer &rArr; nrf_drv_twi_xfer &rArr; twim_xfer &rArr; nrf_twim_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_set_textsize
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_set_textcolor
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_set_cursor
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_putstring
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_display
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_clear_display
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_i2c_0_read
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_a2_oled_shutdown
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_a2_oled_init
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_a2_i2c_0_init
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_a2_i2c_0_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[330]"></a>pdb_init</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, peer_database.o(i.pdb_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = pdb_init &rArr; pm_buffer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_buffer_init
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_record_invalidate
</UL>
<BR>[Called By]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_init
</UL>

<P><STRONG><a name="[333]"></a>pdb_next_deleted_peer_id_get</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, peer_database.o(i.pdb_next_deleted_peer_id_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pdb_next_deleted_peer_id_get &rArr; pds_next_deleted_peer_id_get &rArr; peer_id_get_next_deleted &rArr; next_id_get
</UL>
<BR>[Calls]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_next_deleted_peer_id_get
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_pdb_evt_handler
</UL>

<P><STRONG><a name="[23b]"></a>pdb_next_peer_id_get</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, peer_database.o(i.pdb_next_peer_id_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pdb_next_peer_id_get &rArr; pds_next_peer_id_get &rArr; peer_id_get_next_used &rArr; next_id_get
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_next_peer_id_get
</UL>
<BR>[Called By]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_peer_ranks_get
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_pdb_evt_handler
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_peers_delete
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_pending_set
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_local_database_has_changed
</UL>

<P><STRONG><a name="[69]"></a>pdb_pds_evt_handler</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, peer_database.o(i.pdb_pds_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = pdb_pds_evt_handler &rArr; reattempt_previous_operations &rArr; write_buf_store &rArr; pds_peer_data_store &rArr; fds_record_write_reserved &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write
</UL>
<BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_record_release
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reattempt_previous_operations
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_evt_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> peer_data_storage.o(.constdata)
</UL>
<P><STRONG><a name="[339]"></a>pdb_peer_allocate</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, peer_database.o(i.pdb_peer_allocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = pdb_peer_allocate &rArr; pds_peer_id_allocate &rArr; peer_id_allocate &rArr; claim &rArr; pm_mutex_lock_first_available &rArr; lock_by_mask &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_id_allocate
</UL>
<BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply
</UL>

<P><STRONG><a name="[33b]"></a>pdb_peer_data_load</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, peer_database.o(i.pdb_peer_data_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = pdb_peer_data_load &rArr; pds_peer_data_read &rArr; peer_data_find &rArr; fds_record_find &rArr; record_find &rArr; record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_read
</UL>
<BR>[Called By]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_peer_ranks_get
</UL>

<P><STRONG><a name="[234]"></a>pdb_peer_data_ptr_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, peer_database.o(i.pdb_peer_data_ptr_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = pdb_peer_data_ptr_get &rArr; pds_peer_data_read &rArr; peer_data_find &rArr; fds_record_find &rArr; record_find &rArr; record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_read
</UL>
<BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_info_request_process
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_service_changed_ind_needed
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_local_db_cache_apply
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_pdb_evt_handler
</UL>

<P><STRONG><a name="[25e]"></a>pdb_peer_free</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, peer_database.o(i.pdb_peer_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = pdb_peer_free &rArr; pds_peer_id_free &rArr; peer_data_delete &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write
</UL>
<BR>[Calls]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_record_find_next
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_id_free
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_release
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_free
</UL>

<P><STRONG><a name="[23a]"></a>pdb_raw_store</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, peer_database.o(i.pdb_raw_store))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = pdb_raw_store &rArr; pds_peer_data_store &rArr; fds_record_write_reserved &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write
</UL>
<BR>[Calls]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_store
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_pending_set
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_db_change_notification_done
</UL>

<P><STRONG><a name="[150]"></a>pdb_write_buf_get</STRONG> (Thumb, 264 bytes, Stack size 40 bytes, peer_database.o(i.pdb_write_buf_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = pdb_write_buf_get &rArr; pm_buffer_block_acquire &rArr; pm_buffer_release &rArr; pm_mutex_unlock &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_buffer_release
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_buffer_ptr_get
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_buffer_block_acquire
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_record_invalidate
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_record_find
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_point_to_buffer
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_id_is_allocated
</UL>
<BR>[Called By]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_keyset_fill
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_status_success_process
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_local_db_cache_update
</UL>

<P><STRONG><a name="[23f]"></a>pdb_write_buf_release</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, peer_database.o(i.pdb_write_buf_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = pdb_write_buf_release &rArr; write_buffer_record_release &rArr; pm_buffer_release &rArr; pm_mutex_unlock &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_record_release
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_record_find
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_space_reserve_cancel
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_failure
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_peer_free
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_local_db_cache_update
</UL>

<P><STRONG><a name="[155]"></a>pdb_write_buf_store</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, peer_database.o(i.pdb_write_buf_store))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = pdb_write_buf_store &rArr; write_buf_store &rArr; pds_peer_data_store &rArr; fds_record_write_reserved &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write
</UL>
<BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buf_store
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_record_find
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_status_success_process
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_local_db_cache_update
</UL>

<P><STRONG><a name="[348]"></a>pdb_write_buf_store_prepare</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, peer_database.o(i.pdb_write_buf_store_prepare))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = pdb_write_buf_store_prepare &rArr; pds_space_reserve &rArr; fds_reserve &rArr; write_space_reserve
</UL>
<BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_buffer_ptr_get
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_record_find
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buf_length_words_set
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_const_point_to_buffer
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_space_reserve
</UL>
<BR>[Called By]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_keyset_fill
</UL>

<P><STRONG><a name="[34c]"></a>pds_init</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, peer_data_storage.o(i.pds_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = pds_init &rArr; fds_init &rArr; queue_start &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write
</UL>
<BR>[Calls]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_init
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_allocate
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_register
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_open
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_find_by_key
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_close
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_init
</UL>
<BR>[Called By]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_init
</UL>

<P><STRONG><a name="[334]"></a>pds_next_deleted_peer_id_get</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, peer_data_storage.o(i.pds_next_deleted_peer_id_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pds_next_deleted_peer_id_get &rArr; peer_id_get_next_deleted &rArr; next_id_get
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_get_next_deleted
</UL>
<BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_next_deleted_peer_id_get
</UL>

<P><STRONG><a name="[335]"></a>pds_next_peer_id_get</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, peer_data_storage.o(i.pds_next_peer_id_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pds_next_peer_id_get &rArr; peer_id_get_next_used &rArr; next_id_get
</UL>
<BR>[Calls]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_get_next_used
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_next_peer_id_get
</UL>

<P><STRONG><a name="[256]"></a>pds_peer_data_iterate</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, peer_data_storage.o(i.pds_peer_data_iterate))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = pds_peer_data_iterate &rArr; fds_record_open &rArr; record_find_by_desc &rArr; record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_open
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_find_by_key
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_close
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_id_is_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_master_id
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_find_duplicate_bonding_data
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_ble_evt_handler
</UL>

<P><STRONG><a name="[255]"></a>pds_peer_data_iterate_prepare</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, peer_data_storage.o(i.pds_peer_data_iterate_prepare))
<BR><BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_master_id
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_find_duplicate_bonding_data
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_ble_evt_handler
</UL>

<P><STRONG><a name="[33c]"></a>pds_peer_data_read</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, peer_data_storage.o(i.pds_peer_data_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = pds_peer_data_read &rArr; peer_data_find &rArr; fds_record_find &rArr; record_find &rArr; record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_open
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_close
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_id_is_valid
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_find
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_peer_data_load
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_peer_data_ptr_get
</UL>

<P><STRONG><a name="[33f]"></a>pds_peer_data_store</STRONG> (Thumb, 150 bytes, Stack size 56 bytes, peer_data_storage.o(i.pds_peer_data_store))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = pds_peer_data_store &rArr; fds_record_write_reserved &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_reserve_cancel
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_write_reserved
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_write
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_update
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_id_from_desc
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_id_is_valid
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_find
</UL>
<BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buf_store
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_raw_store
</UL>

<P><STRONG><a name="[33a]"></a>pds_peer_id_allocate</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, peer_data_storage.o(i.pds_peer_id_allocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = pds_peer_id_allocate &rArr; peer_id_allocate &rArr; claim &rArr; pm_mutex_lock_first_available &rArr; lock_by_mask &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_allocate
</UL>
<BR>[Called By]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_peer_allocate
</UL>

<P><STRONG><a name="[33e]"></a>pds_peer_id_free</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, peer_data_storage.o(i.pds_peer_id_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = pds_peer_id_free &rArr; peer_data_delete &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write
</UL>
<BR>[Calls]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_delete
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_peer_free
</UL>

<P><STRONG><a name="[340]"></a>pds_peer_id_is_allocated</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, peer_data_storage.o(i.pds_peer_id_is_allocated))
<BR><BR>[Calls]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_is_allocated
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_get
</UL>

<P><STRONG><a name="[34b]"></a>pds_space_reserve</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, peer_data_storage.o(i.pds_space_reserve))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = pds_space_reserve &rArr; fds_reserve &rArr; write_space_reserve
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_reserve
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_id_is_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_store_prepare
</UL>

<P><STRONG><a name="[346]"></a>pds_space_reserve_cancel</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, peer_data_storage.o(i.pds_space_reserve_cancel))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pds_space_reserve_cancel &rArr; fds_reserve_cancel
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_reserve_cancel
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_release
</UL>

<P><STRONG><a name="[1f0]"></a>pedometer_init</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, main.o(i.pedometer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = pedometer_init &rArr; nrf_drv_bmi160_acc_config &rArr; nrf_drv_spi_bmi160_read &rArr; nrf_spi_mngr_perform &rArr; nrf_spi_mngr_schedule &rArr; start_pending_transaction &rArr; nrf_drv_spi_init &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_bmi160_step_count_conf
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_bmi160_spi_int
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_bmi160_power_and_cs_init
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_bmi160_acc_config
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_to_power_full_mode
</UL>

<P><STRONG><a name="[359]"></a>pedometer_processing</STRONG> (Thumb, 422 bytes, Stack size 56 bytes, pedometer.o(i.pedometer_processing))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = pedometer_processing &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pedometer_cal_step_rate_factor
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pedometer_cal_metabolic_factor
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_task
</UL>

<P><STRONG><a name="[285]"></a>pedometer_setup</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, pedometer.o(i.pedometer_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = pedometer_setup &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1ed]"></a>pedometer_sleep</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, main.o(i.pedometer_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = pedometer_sleep &rArr; bmi160_set_power_mode &rArr; process_under_sampling &rArr; bmi160_set_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_set_power_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_to_ultra_power_save_mode
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_to_low_power_mode
</UL>

<P><STRONG><a name="[34e]"></a>peer_id_allocate</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, peer_id.o(i.peer_id_allocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = peer_id_allocate &rArr; claim &rArr; pm_mutex_lock_first_available &rArr; lock_by_mask &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;claim
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_id_allocate
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_init
</UL>

<P><STRONG><a name="[354]"></a>peer_id_delete</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, peer_id.o(i.peer_id_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = peer_id_delete &rArr; claim &rArr; pm_mutex_lock_first_available &rArr; lock_by_mask &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;claim
</UL>
<BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_id_free
</UL>

<P><STRONG><a name="[1fc]"></a>peer_id_free</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, peer_id.o(i.peer_id_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = peer_id_free &rArr; release &rArr; pm_mutex_unlock &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_delete
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_evt_handler
</UL>

<P><STRONG><a name="[34f]"></a>peer_id_get_next_deleted</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, peer_id.o(i.peer_id_get_next_deleted))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = peer_id_get_next_deleted &rArr; next_id_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;next_id_get
</UL>
<BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_next_deleted_peer_id_get
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_delete
</UL>

<P><STRONG><a name="[350]"></a>peer_id_get_next_used</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, peer_id.o(i.peer_id_get_next_used))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = peer_id_get_next_used &rArr; next_id_get
</UL>
<BR>[Calls]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_is_deleted
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;next_id_get
</UL>
<BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_next_peer_id_get
</UL>

<P><STRONG><a name="[34d]"></a>peer_id_init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, peer_id.o(i.peer_id_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = peer_id_init
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_mutex_init
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_init
</UL>

<P><STRONG><a name="[355]"></a>peer_id_is_allocated</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, peer_id.o(i.peer_id_is_allocated))
<BR><BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_mutex_lock_status_get
</UL>
<BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_id_is_allocated
</UL>

<P><STRONG><a name="[35b]"></a>peer_id_is_deleted</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, peer_id.o(i.peer_id_is_deleted))
<BR><BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_mutex_lock_status_get
</UL>
<BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_get_next_used
</UL>

<P><STRONG><a name="[343]"></a>pm_buffer_block_acquire</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, pm_buffer.o(i.pm_buffer_block_acquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = pm_buffer_block_acquire &rArr; pm_buffer_release &rArr; pm_mutex_unlock &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_buffer_release
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_mutex_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_get
</UL>

<P><STRONG><a name="[332]"></a>pm_buffer_init</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, pm_buffer.o(i.pm_buffer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pm_buffer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_mutex_init
</UL>
<BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_init
</UL>

<P><STRONG><a name="[344]"></a>pm_buffer_ptr_get</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, pm_buffer.o(i.pm_buffer_ptr_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pm_buffer_ptr_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_mutex_lock_status_get
</UL>
<BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buf_store
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_store_prepare
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_get
</UL>

<P><STRONG><a name="[342]"></a>pm_buffer_release</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, pm_buffer.o(i.pm_buffer_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = pm_buffer_release &rArr; pm_mutex_unlock &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_mutex_lock_status_get
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_mutex_unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_buffer_block_acquire
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_record_release
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_get
</UL>

<P><STRONG><a name="[360]"></a>pm_conn_sec_config_reply</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, peer_manager.o(i.pm_conn_sec_config_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = pm_conn_sec_config_reply &rArr; sm_conn_sec_config_reply &rArr; smd_conn_sec_config_reply &rArr; ble_conn_state_user_flag_set &rArr; sdk_mapped_flags_update_by_key &rArr; sdk_mapped_flags_bulk_update_by_key
</UL>
<BR>[Calls]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_conn_sec_config_reply
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_evt_handler
</UL>

<P><STRONG><a name="[1]"></a>pm_gcm_evt_handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, peer_manager.o(i.pm_gcm_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pm_gcm_evt_handler &rArr; evt_send
</UL>
<BR>[Calls]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gatt_cache_manager.o(.data)
</UL>
<P><STRONG><a name="[67]"></a>pm_im_evt_handler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, peer_manager.o(i.pm_im_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = pm_im_evt_handler &rArr; ble_conn_state_user_flag_set &rArr; sdk_mapped_flags_update_by_key &rArr; sdk_mapped_flags_bulk_update_by_key
</UL>
<BR>[Calls]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> id_manager.o(.constdata)
</UL>
<P><STRONG><a name="[35c]"></a>pm_init</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, peer_manager.o(i.pm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = pm_init &rArr; pds_init &rArr; fds_init &rArr; queue_start &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write
</UL>
<BR>[Calls]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_init
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_init
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_init
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_init
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_init
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_init
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_init
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_manager_init
</UL>

<P><STRONG><a name="[362]"></a>pm_local_database_has_changed</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, peer_manager.o(i.pm_local_database_has_changed))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = pm_local_database_has_changed &rArr; gcm_local_database_has_changed &rArr; pending_flags_check &rArr; gscm_local_db_cache_update &rArr; pdb_write_buf_store &rArr; write_buf_store &rArr; pds_peer_data_store &rArr; fds_record_write_reserved &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_local_database_has_changed
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_evt_handler
</UL>

<P><STRONG><a name="[230]"></a>pm_mutex_init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, pm_mutex.o(i.pm_mutex_init))
<BR><BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_buffer_init
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_init
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_init
</UL>

<P><STRONG><a name="[1c3]"></a>pm_mutex_lock</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, pm_mutex.o(i.pm_mutex_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = pm_mutex_lock &rArr; lock_by_mask &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_by_mask
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;claim
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_buffer_block_acquire
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pending_flags_check
</UL>

<P><STRONG><a name="[1c2]"></a>pm_mutex_lock_first_available</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, pm_mutex.o(i.pm_mutex_lock_first_available))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = pm_mutex_lock_first_available &rArr; lock_by_mask &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_by_mask
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;claim
</UL>

<P><STRONG><a name="[2a7]"></a>pm_mutex_lock_status_get</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, pm_mutex.o(i.pm_mutex_lock_status_get))
<BR><BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_is_deleted
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;next_id_get
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_buffer_release
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_buffer_ptr_get
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_is_allocated
</UL>

<P><STRONG><a name="[235]"></a>pm_mutex_unlock</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, pm_mutex.o(i.pm_mutex_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = pm_mutex_unlock &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_buffer_release
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_pdb_evt_handler
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pending_flags_check
</UL>

<P><STRONG><a name="[6a]"></a>pm_pdb_evt_handler</STRONG> (Thumb, 276 bytes, Stack size 48 bytes, peer_manager.o(i.pm_pdb_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = pm_pdb_evt_handler &rArr; rank_vars_update &rArr; pm_peer_ranks_get &rArr; pdb_peer_data_load &rArr; pds_peer_data_read &rArr; peer_data_find &rArr; fds_record_find &rArr; record_find &rArr; record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rank_vars_update
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_next_deleted_peer_id_get
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_next_peer_id_get
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_conn_handle_get
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> peer_database.o(.constdata)
</UL>
<P><STRONG><a name="[368]"></a>pm_peer_delete</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, peer_manager.o(i.pm_peer_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = pm_peer_delete &rArr; im_peer_free &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; peer_data_delete &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_free
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_peers_delete
</UL>

<P><STRONG><a name="[369]"></a>pm_peer_ranks_get</STRONG> (Thumb, 186 bytes, Stack size 64 bytes, peer_manager.o(i.pm_peer_ranks_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = pm_peer_ranks_get &rArr; pdb_peer_data_load &rArr; pds_peer_data_read &rArr; peer_data_find &rArr; fds_record_find &rArr; record_find &rArr; record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_peer_data_load
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_next_peer_id_get
</UL>
<BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rank_vars_update
</UL>

<P><STRONG><a name="[12c]"></a>pm_peers_delete</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, peer_manager.o(i.pm_peers_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = pm_peers_delete &rArr; pm_peer_delete &rArr; im_peer_free &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; peer_data_delete &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write
</UL>
<BR>[Calls]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_peer_delete
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_next_peer_id_get
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_start
</UL>

<P><STRONG><a name="[35e]"></a>pm_register</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, peer_manager.o(i.pm_register))
<BR><BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_manager_init
</UL>

<P><STRONG><a name="[35d]"></a>pm_sec_params_set</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, peer_manager.o(i.pm_sec_params_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pm_sec_params_set &rArr; sm_sec_params_set
</UL>
<BR>[Calls]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_sec_params_set
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_manager_init
</UL>

<P><STRONG><a name="[6f]"></a>pm_sm_evt_handler</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, peer_manager.o(i.pm_sm_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = pm_sm_evt_handler &rArr; ble_conn_state_user_flag_set &rArr; sdk_mapped_flags_update_by_key &rArr; sdk_mapped_flags_bulk_update_by_key
</UL>
<BR>[Calls]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> security_manager.o(.constdata)
</UL>
<P><STRONG><a name="[118]"></a>que_append</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, basic_fifo.o(i.que_append))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = que_append &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;que_size
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_nus_append_command
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2_write_pedo_meter_log
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2_write_hr_spo2_temp_log
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2_write_button_alert_log
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2_save_pedo_meter_to_buf
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2_save_hr_spo2_to_buf
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2_save_button_alert_to_buf
</UL>

<P><STRONG><a name="[10d]"></a>que_front</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, basic_fifo.o(i.que_front))
<BR><BR>[Called By]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_nus_special_register_mngr
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_nus_special_pedometer_reg_mngr
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_nus_special_hr_spo2_temp_reg_mngr
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_nus_special_free_fall_reg_mngr
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_nus_special_free_fall_raw_data_reg_mngr
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_nus_special_button_alert_reg_mngr
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_nus_normal_register_mngr
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2_read_raw_data_free_fall_log_by_queue
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2_read_pedo_meter_log_by_queue
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2_read_hr_spo2_temp_log_by_queue
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2_read_free_fall_alert_log_by_queue
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2_read_button_alert_log_by_queue
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_nus_task
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2_save_pedo_meter_to_buf
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2_save_hr_spo2_to_buf
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2_save_button_alert_to_buf
</UL>

<P><STRONG><a name="[278]"></a>que_initial</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, basic_fifo.o(i.que_initial))
<BR><BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_nus_initial
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logging_queue_initial
</UL>

<P><STRONG><a name="[1c0]"></a>que_isEmpty</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, basic_fifo.o(i.que_isEmpty))
<BR><BR>[Called By]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_nus_special_pedometer_reg_mngr
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_nus_special_hr_spo2_temp_reg_mngr
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_nus_special_free_fall_reg_mngr
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_nus_special_free_fall_raw_data_reg_mngr
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_nus_special_button_alert_reg_mngr
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;que_pop
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_nus_task
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_setup_time_from_wdt_status
</UL>

<P><STRONG><a name="[e2]"></a>que_isFull</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, basic_fifo.o(i.que_isFull))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = que_isFull
</UL>
<BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;que_size
</UL>
<BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_nus_append_command
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2_write_button_alert_log
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2_save_pedo_meter_to_buf
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2_save_hr_spo2_to_buf
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2_save_button_alert_to_buf
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2_pedo_buf_is_full
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2_button_alert_buf_is_full
</UL>

<P><STRONG><a name="[117]"></a>que_pop</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, basic_fifo.o(i.que_pop))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = que_pop
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;que_isEmpty
</UL>
<BR>[Called By]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_nus_special_pedometer_reg_mngr
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_nus_special_hr_spo2_temp_reg_mngr
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_nus_special_free_fall_reg_mngr
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_nus_special_free_fall_raw_data_reg_mngr
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_nus_special_button_alert_reg_mngr
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_nus_task
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2_save_pedo_meter_to_buf
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2_save_hr_spo2_to_buf
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2_save_button_alert_to_buf
</UL>

<P><STRONG><a name="[10a]"></a>que_r</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, basic_fifo.o(i.que_r))
<BR><BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_nus_append_command
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2_write_pedo_meter_log
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2_write_hr_spo2_temp_log
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2_write_button_alert_log
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2_write_button_alert_last_buffer
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2_read_button_alert_last_buffer
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_setup_time_from_wdt_status
</UL>

<P><STRONG><a name="[11c]"></a>que_reset</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, basic_fifo.o(i.que_reset))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2_write_pedo_meter_log
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2_write_hr_spo2_temp_log
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2_write_button_alert_log
</UL>

<P><STRONG><a name="[36c]"></a>que_size</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, basic_fifo.o(i.que_size))
<BR><BR>[Called By]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_nus_special_pedometer_reg_mngr
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_nus_special_hr_spo2_temp_reg_mngr
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_nus_special_free_fall_reg_mngr
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_nus_special_free_fall_raw_data_reg_mngr
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_nus_special_button_alert_reg_mngr
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;que_isFull
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;que_append
</UL>

<P><STRONG><a name="[292]"></a>readRegister</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, max30102.o(i.readRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = readRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max30102_check
</UL>

<P><STRONG><a name="[15c]"></a>readRegister8</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, max30102.o(i.readRegister8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = readRegister8
</UL>
<BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max30102_readTemperature
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max30102_softReset
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max30102_readRevisionID
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max30102_readPartID
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getWritePointer
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getReadPointer
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitMask
</UL>

<P><STRONG><a name="[36]"></a>saadc_event_handler</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, main.o(i.saadc_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = saadc_event_handler &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_read
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_saadc_uninit
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_saadc_buffer_convert
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_soc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.adc_init)
</UL>
<P><STRONG><a name="[61]"></a>save_config_to_flash_memory</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, main.o(i.save_config_to_flash_memory))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = save_config_to_flash_memory &rArr; at45dbxx_uninit &rArr; at45dbxx_is_available &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_a2_spi_deinit
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at45dbxx_is_available
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2_write_config
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at45dbxx_uninit
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at45dbxx_init
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2_spi_int
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.sync_nus_init)
</UL>
<P><STRONG><a name="[18e]"></a>sdk_mapped_flags_bulk_update_by_key</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, sdk_mapped_flags.o(i.sdk_mapped_flags_bulk_update_by_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sdk_mapped_flags_bulk_update_by_key
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_update_by_key
</UL>

<P><STRONG><a name="[18f]"></a>sdk_mapped_flags_first_key_index_get</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, sdk_mapped_flags.o(i.sdk_mapped_flags_first_key_index_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sdk_mapped_flags_first_key_index_get
</UL>
<BR>[Calls]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_get_by_index
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[170]"></a>sdk_mapped_flags_get_by_key</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, sdk_mapped_flags.o(i.sdk_mapped_flags_get_by_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sdk_mapped_flags_get_by_key
</UL>
<BR>[Calls]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_get_by_index
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_role
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_get
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_encrypted
</UL>

<P><STRONG><a name="[16e]"></a>sdk_mapped_flags_key_list_get</STRONG> (Thumb, 74 bytes, Stack size 96 bytes, sdk_mapped_flags.o(i.sdk_mapped_flags_key_list_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = sdk_mapped_flags_key_list_get &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_get_by_index
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_conn_handles
</UL>

<P><STRONG><a name="[174]"></a>sdk_mapped_flags_update_by_key</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sdk_mapped_flags.o(i.sdk_mapped_flags_update_by_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sdk_mapped_flags_update_by_key &rArr; sdk_mapped_flags_bulk_update_by_key
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_bulk_update_by_key
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
</UL>

<P><STRONG><a name="[291]"></a>sensor_task</STRONG> (Thumb, 968 bytes, Stack size 80 bytes, main.o(i.sensor_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 13128<LI>Call Chain = sensor_task &rArr; heart_rate_monitoring2 &rArr; spo2_cal &rArr; ZScore &rArr; Std &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pedometer_processing
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_saadc_sample
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_bmi160_step_count_reset_value
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_bmi160_power_and_cs_init
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_a2_spi_deinit
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_read_step_counter
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_get_sensor_data
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hrs_rr_interval_add
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hrs_heart_rate_measurement_send
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at45dbxx_is_available
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2_write_queue_config
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2_write_pedo_meter_log
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2_write_hr_spo2_temp_log
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2_save_pedo_meter_to_buf
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2_save_hr_spo2_to_buf
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2_pedo_buf_is_full
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heart_rate_monitoring2
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_to_ultra_power_save_mode
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_to_low_power_mode
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at45dbxx_uninit
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at45dbxx_init
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2_spi_int
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[29b]"></a>setADCRange</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, max30102.o(i.setADCRange))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = setADCRange &rArr; bitMask &rArr; writeRegister8
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitMask
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max30102_setup2
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max30102_setup
</UL>

<P><STRONG><a name="[299]"></a>setFIFOAverage</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, max30102.o(i.setFIFOAverage))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = setFIFOAverage &rArr; bitMask &rArr; writeRegister8
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitMask
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max30102_setup2
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max30102_setup
</UL>

<P><STRONG><a name="[29a]"></a>setLEDMode</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, max30102.o(i.setLEDMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = setLEDMode &rArr; bitMask &rArr; writeRegister8
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitMask
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max30102_setup2
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max30102_setup
</UL>

<P><STRONG><a name="[2a0]"></a>setPulseAmplitudeGreen</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, max30102.o(i.setPulseAmplitudeGreen))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = setPulseAmplitudeGreen &rArr; writeRegister8
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeRegister8
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_i2c_max30102_shutdown
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max30102_setup2
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max30102_setup
</UL>

<P><STRONG><a name="[29f]"></a>setPulseAmplitudeIR</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, max30102.o(i.setPulseAmplitudeIR))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = setPulseAmplitudeIR &rArr; writeRegister8
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeRegister8
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_i2c_max30102_shutdown
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max30102_setup2
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max30102_setup
</UL>

<P><STRONG><a name="[2a1]"></a>setPulseAmplitudeProximity</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, max30102.o(i.setPulseAmplitudeProximity))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = setPulseAmplitudeProximity &rArr; writeRegister8
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeRegister8
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_i2c_max30102_shutdown
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max30102_setup2
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max30102_setup
</UL>

<P><STRONG><a name="[29e]"></a>setPulseAmplitudeRed</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, max30102.o(i.setPulseAmplitudeRed))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = setPulseAmplitudeRed &rArr; writeRegister8
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeRegister8
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_i2c_max30102_shutdown
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max30102_setup2
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max30102_setup
</UL>

<P><STRONG><a name="[29d]"></a>setPulseWidth</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, max30102.o(i.setPulseWidth))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = setPulseWidth &rArr; bitMask &rArr; writeRegister8
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitMask
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max30102_setup2
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max30102_setup
</UL>

<P><STRONG><a name="[29c]"></a>setSampleRate</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, max30102.o(i.setSampleRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = setSampleRate &rArr; bitMask &rArr; writeRegister8
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitMask
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max30102_setup2
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max30102_setup
</UL>

<P><STRONG><a name="[ed]"></a>show_display</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, a2_display_mngr.o(i.show_display))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = show_display &rArr; display_time &rArr; display_mini_time &rArr; ssd1306_putstring &rArr; ssd1306_write &rArr; ssd1306_draw_char &rArr; ssd1306_fill_rect &rArr; ssd1306_draw_fast_vline &rArr; ssd1306_draw_fast_vline_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_time
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_temperature
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_step_count
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_distanc_cal
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_battery_full
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_o2
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_heart_reate
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2_display_task2
</UL>

<P><STRONG><a name="[63]"></a>sleep_flash_memory</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, main.o(i.sleep_flash_memory))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = sleep_flash_memory &rArr; at45dbxx_uninit &rArr; at45dbxx_is_available &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_a2_spi_deinit
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at45dbxx_uninit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.sync_nus_init)
</UL>
<P><STRONG><a name="[191]"></a>sm_ble_evt_handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, security_manager.o(i.sm_ble_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = sm_ble_evt_handler &rArr; smd_ble_evt_handler &rArr; auth_status_success_process &rArr; pdb_write_buf_store &rArr; write_buf_store &rArr; pds_peer_data_store &rArr; fds_record_write_reserved &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_pending_process
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_ble_evt_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[361]"></a>sm_conn_sec_config_reply</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, security_manager.o(i.sm_conn_sec_config_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sm_conn_sec_config_reply &rArr; smd_conn_sec_config_reply &rArr; ble_conn_state_user_flag_set &rArr; sdk_mapped_flags_update_by_key &rArr; sdk_mapped_flags_bulk_update_by_key
</UL>
<BR>[Calls]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_conn_sec_config_reply
</UL>
<BR>[Called By]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_conn_sec_config_reply
</UL>

<P><STRONG><a name="[364]"></a>sm_init</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, security_manager.o(i.sm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sm_init &rArr; flag_id_init &rArr; ble_conn_state_user_flag_acquire
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_id_init
</UL>
<BR>[Called By]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_init
</UL>

<P><STRONG><a name="[6b]"></a>sm_pdb_evt_handler</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, security_manager.o(i.sm_pdb_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = sm_pdb_evt_handler &rArr; params_reply_pending_process &rArr; smd_params_reply_perform &rArr; smd_params_reply &rArr; sec_proc_housekeeping &rArr; im_peer_free &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; peer_data_delete &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;params_reply_pending_process
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_pending_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> peer_database.o(.constdata)
</UL>
<P><STRONG><a name="[36a]"></a>sm_sec_params_set</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, security_manager.o(i.sm_sec_params_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sm_sec_params_set
</UL>
<BR>[Calls]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_params_verify
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_sec_params_set
</UL>

<P><STRONG><a name="[6e]"></a>sm_smd_evt_handler</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, security_manager.o(i.sm_smd_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = sm_smd_evt_handler &rArr; smd_params_reply_perform &rArr; smd_params_reply &rArr; sec_proc_housekeeping &rArr; im_peer_free &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; peer_data_delete &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write
</UL>
<BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply_perform
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> security_dispatcher.o(.constdata)
</UL>
<P><STRONG><a name="[37f]"></a>smd_ble_evt_handler</STRONG> (Thumb, 234 bytes, Stack size 32 bytes, security_dispatcher.o(i.smd_ble_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = smd_ble_evt_handler &rArr; auth_status_success_process &rArr; pdb_write_buf_store &rArr; write_buf_store &rArr; pds_peer_data_store &rArr; fds_record_write_reserved &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write
</UL>
<BR>[Calls]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_proc_start
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_info_request_process
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pairing
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_failure
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encryption_failure
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_status_success_process
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_role
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_encrypted
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_ble_evt_handler
</UL>

<P><STRONG><a name="[380]"></a>smd_conn_sec_config_reply</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, security_dispatcher.o(i.smd_conn_sec_config_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = smd_conn_sec_config_reply &rArr; ble_conn_state_user_flag_set &rArr; sdk_mapped_flags_update_by_key &rArr; sdk_mapped_flags_bulk_update_by_key
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
</UL>
<BR>[Called By]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_conn_sec_config_reply
</UL>

<P><STRONG><a name="[365]"></a>smd_init</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, security_dispatcher.o(i.smd_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = smd_init &rArr; flag_id_init &rArr; ble_conn_state_user_flag_acquire
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_id_init
</UL>
<BR>[Called By]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_init
</UL>

<P><STRONG><a name="[26a]"></a>smd_link_secure</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, security_dispatcher.o(i.smd_link_secure))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = smd_link_secure &rArr; ble_conn_state_role &rArr; sdk_mapped_flags_get_by_key
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_role
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure
</UL>

<P><STRONG><a name="[382]"></a>smd_params_reply</STRONG> (Thumb, 238 bytes, Stack size 72 bytes, security_dispatcher.o(i.smd_params_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = smd_params_reply &rArr; sec_proc_housekeeping &rArr; im_peer_free &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; peer_data_delete &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_config_req
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_proc_housekeeping
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_keyset_fill
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_created
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;allow_repairing
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_peer_allocate
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_role
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply_perform
</UL>

<P><STRONG><a name="[243]"></a>spO2Calculator_init</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, spo2calculator.o(i.spO2Calculator_init))
<BR><BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heart_rate_monitoring2
</UL>

<P><STRONG><a name="[24f]"></a>spo2_cal</STRONG> (Thumb, 2386 bytes, Stack size 2552 bytes, heart_rate_cal.o(i.spo2_cal))
<BR><BR>[Stack]<UL><LI>Max Depth = 12592<LI>Call Chain = spo2_cal &rArr; ZScore &rArr; Std &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_3
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_5
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_4
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZScore
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heart_rate_monitoring2
</UL>

<P><STRONG><a name="[d7]"></a>sqrt</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[2c1]"></a>ssd1306_begin</STRONG> (Thumb, 270 bytes, Stack size 16 bytes, ssd1306.o(i.ssd1306_begin))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ssd1306_begin &rArr; ssd1306_command
</UL>
<BR>[Calls]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_us
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_command
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_a2_oled_init
</UL>

<P><STRONG><a name="[1d1]"></a>ssd1306_clear_display</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ssd1306.o(i.ssd1306_clear_display))
<BR><BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_time
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_temperature
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_step_count
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_distanc_cal
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_battery_full
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_o2
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_heart_reate
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_fall_alert
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_countdown_alert
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_bt_alert
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_battery_low
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_init
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_to_ultra_power_save_mode
</UL>

<P><STRONG><a name="[2c2]"></a>ssd1306_command</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ssd1306.o(i.ssd1306_command))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ssd1306_command
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_invert_display
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_display
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_a2_oled_shutdown
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_begin
</UL>

<P><STRONG><a name="[1d6]"></a>ssd1306_display</STRONG> (Thumb, 104 bytes, Stack size 48 bytes, ssd1306.o(i.ssd1306_display))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ssd1306_display &rArr; ssd1306_command
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_command
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_time
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_temperature
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_step_count
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_distanc_cal
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_battery_full
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_o2
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_heart_reate
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_fall_alert
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_countdown_alert
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_bt_alert
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_battery_low
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_init
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_to_ultra_power_save_mode
</UL>

<P><STRONG><a name="[1e4]"></a>ssd1306_drawCentreString</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, ssd1306.o(i.ssd1306_drawCentreString))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = ssd1306_drawCentreString &rArr; ssd1306_drawChar &rArr; ssd1306_drawUnicode &rArr; ssd1306_fill_rect &rArr; ssd1306_draw_fast_vline &rArr; ssd1306_draw_fast_vline_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_drawChar
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_step_count
</UL>

<P><STRONG><a name="[388]"></a>ssd1306_drawChar</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ssd1306.o(i.ssd1306_drawChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = ssd1306_drawChar &rArr; ssd1306_drawUnicode &rArr; ssd1306_fill_rect &rArr; ssd1306_draw_fast_vline &rArr; ssd1306_draw_fast_vline_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_drawUnicode
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_drawRightStringLen
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_drawRightString
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_drawCentreString
</UL>

<P><STRONG><a name="[1e2]"></a>ssd1306_drawRightString</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, ssd1306.o(i.ssd1306_drawRightString))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = ssd1306_drawRightString &rArr; ssd1306_drawChar &rArr; ssd1306_drawUnicode &rArr; ssd1306_fill_rect &rArr; ssd1306_draw_fast_vline &rArr; ssd1306_draw_fast_vline_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_drawChar
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_battery
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_temperature
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_o2
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_heart_reate
</UL>

<P><STRONG><a name="[1de]"></a>ssd1306_drawRightStringLen</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, ssd1306.o(i.ssd1306_drawRightStringLen))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = ssd1306_drawRightStringLen &rArr; ssd1306_drawChar &rArr; ssd1306_drawUnicode &rArr; ssd1306_fill_rect &rArr; ssd1306_draw_fast_vline &rArr; ssd1306_draw_fast_vline_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_drawChar
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_time
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_temperature
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_step_count
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_distanc_cal
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_o2
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_heart_reate
</UL>

<P><STRONG><a name="[389]"></a>ssd1306_drawUnicode</STRONG> (Thumb, 672 bytes, Stack size 72 bytes, ssd1306.o(i.ssd1306_drawUnicode))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = ssd1306_drawUnicode &rArr; ssd1306_fill_rect &rArr; ssd1306_draw_fast_vline &rArr; ssd1306_draw_fast_vline_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_fill_rect
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_draw_pixel
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_draw_fast_hline
</UL>
<BR>[Called By]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_drawChar
</UL>

<P><STRONG><a name="[1d7]"></a>ssd1306_draw_bitmap</STRONG> (Thumb, 104 bytes, Stack size 52 bytes, ssd1306.o(i.ssd1306_draw_bitmap))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ssd1306_draw_bitmap &rArr; ssd1306_draw_pixel
</UL>
<BR>[Calls]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_draw_pixel
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bt_icon
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_temperature
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_distanc_cal
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_o2
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_heart_reate
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_fall_alert
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_bt_alert
</UL>

<P><STRONG><a name="[38c]"></a>ssd1306_draw_char</STRONG> (Thumb, 202 bytes, Stack size 56 bytes, ssd1306.o(i.ssd1306_draw_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = ssd1306_draw_char &rArr; ssd1306_fill_rect &rArr; ssd1306_draw_fast_vline &rArr; ssd1306_draw_fast_vline_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_fill_rect
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_draw_pixel
</UL>
<BR>[Called By]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_write
</UL>

<P><STRONG><a name="[38a]"></a>ssd1306_draw_fast_hline</STRONG> (Thumb, 84 bytes, Stack size 12 bytes, ssd1306.o(i.ssd1306_draw_fast_hline))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ssd1306_draw_fast_hline &rArr; ssd1306_draw_fast_vline_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_draw_fast_vline_internal
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_draw_fast_hline_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_draw_rect
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_drawUnicode
</UL>

<P><STRONG><a name="[38d]"></a>ssd1306_draw_fast_hline_internal</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, ssd1306.o(i.ssd1306_draw_fast_hline_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ssd1306_draw_fast_hline_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_draw_fast_vline
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_draw_fast_hline
</UL>

<P><STRONG><a name="[1e7]"></a>ssd1306_draw_fast_vline</STRONG> (Thumb, 84 bytes, Stack size 12 bytes, ssd1306.o(i.ssd1306_draw_fast_vline))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ssd1306_draw_fast_vline &rArr; ssd1306_draw_fast_vline_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_draw_fast_vline_internal
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_draw_fast_hline_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_fill_rect
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_draw_rect
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_battery
</UL>

<P><STRONG><a name="[38e]"></a>ssd1306_draw_fast_vline_internal</STRONG> (Thumb, 220 bytes, Stack size 16 bytes, ssd1306.o(i.ssd1306_draw_fast_vline_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ssd1306_draw_fast_vline_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_draw_fast_vline
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_draw_fast_hline
</UL>

<P><STRONG><a name="[38f]"></a>ssd1306_draw_line</STRONG> (Thumb, 162 bytes, Stack size 36 bytes, ssd1306.o(i.ssd1306_draw_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ssd1306_draw_line &rArr; ssd1306_draw_pixel
</UL>
<BR>[Calls]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_draw_pixel
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_draw_triangle
</UL>

<P><STRONG><a name="[38b]"></a>ssd1306_draw_pixel</STRONG> (Thumb, 182 bytes, Stack size 12 bytes, ssd1306.o(i.ssd1306_draw_pixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ssd1306_draw_pixel
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_draw_bitmap
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_draw_line
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_draw_char
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_drawUnicode
</UL>

<P><STRONG><a name="[1d9]"></a>ssd1306_draw_rect</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, ssd1306.o(i.ssd1306_draw_rect))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ssd1306_draw_rect &rArr; ssd1306_draw_fast_vline &rArr; ssd1306_draw_fast_vline_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_draw_fast_vline
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_draw_fast_hline
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_battery
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_countdown_alert
</UL>

<P><STRONG><a name="[1df]"></a>ssd1306_draw_triangle</STRONG> (Thumb, 56 bytes, Stack size 36 bytes, ssd1306.o(i.ssd1306_draw_triangle))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = ssd1306_draw_triangle &rArr; ssd1306_draw_line &rArr; ssd1306_draw_pixel
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_draw_line
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_temperature
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_step_count
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_distanc_cal
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_o2
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_heart_reate
</UL>

<P><STRONG><a name="[1da]"></a>ssd1306_fill_rect</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, ssd1306.o(i.ssd1306_fill_rect))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ssd1306_fill_rect &rArr; ssd1306_draw_fast_vline &rArr; ssd1306_draw_fast_vline_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_draw_fast_vline
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_battery
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_temperature
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_countdown_alert
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_draw_char
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_drawUnicode
</UL>

<P><STRONG><a name="[f6]"></a>ssd1306_invert_display</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ssd1306.o(i.ssd1306_invert_display))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ssd1306_invert_display &rArr; ssd1306_command
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_command
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2_display_task2
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_fall_alert
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_bt_alert
</UL>

<P><STRONG><a name="[1d5]"></a>ssd1306_putstring</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ssd1306.o(i.ssd1306_putstring))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ssd1306_putstring &rArr; ssd1306_write &rArr; ssd1306_draw_char &rArr; ssd1306_fill_rect &rArr; ssd1306_draw_fast_vline &rArr; ssd1306_draw_fast_vline_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_time
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_step_count
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_mini_time
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_battery_full
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_fall_alert
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_countdown_alert
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_bt_alert
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_battery_low
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_init
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_to_ultra_power_save_mode
</UL>

<P><STRONG><a name="[1d4]"></a>ssd1306_set_cursor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ssd1306.o(i.ssd1306_set_cursor))
<BR><BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_time
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_step_count
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_mini_time
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_battery_full
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_fall_alert
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_countdown_alert
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_bt_alert
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_battery_low
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_init
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_to_ultra_power_save_mode
</UL>

<P><STRONG><a name="[1d3]"></a>ssd1306_set_textcolor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ssd1306.o(i.ssd1306_set_textcolor))
<BR><BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_time
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_mini_time
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_battery_full
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_fall_alert
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_bt_alert
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_battery_low
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_init
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_to_ultra_power_save_mode
</UL>

<P><STRONG><a name="[1db]"></a>ssd1306_set_textcolor_bg</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ssd1306.o(i.ssd1306_set_textcolor_bg))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_countdown_alert
</UL>

<P><STRONG><a name="[1d2]"></a>ssd1306_set_textsize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ssd1306.o(i.ssd1306_set_textsize))
<BR><BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_mini_time
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_battery_full
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_fall_alert
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_countdown_alert
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_bt_alert
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_battery_low
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_init
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_to_ultra_power_save_mode
</UL>

<P><STRONG><a name="[390]"></a>ssd1306_write</STRONG> (Thumb, 94 bytes, Stack size 20 bytes, ssd1306.o(i.ssd1306_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = ssd1306_write &rArr; ssd1306_draw_char &rArr; ssd1306_fill_rect &rArr; ssd1306_draw_fast_vline &rArr; ssd1306_draw_fast_vline_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_draw_char
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_putstring
</UL>

<P><STRONG><a name="[248]"></a>start_timer</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, main.o(i.start_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = start_timer &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_init
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_extended_compare
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_enable
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heart_rate_monitoring2
</UL>

<P><STRONG><a name="[250]"></a>stop_timer</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, main.o(i.stop_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = stop_timer &rArr; nrf_drv_timer_uninit
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_uninit
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heart_rate_monitoring2
</UL>

<P><STRONG><a name="[327]"></a>sync_nus_append_command</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, a2_nus_mngr.o(i.sync_nus_append_command))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = sync_nus_append_command &rArr; que_append &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;que_isFull
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;que_append
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;que_r
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nus_data_handler
</UL>

<P><STRONG><a name="[283]"></a>sync_nus_init</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, main.o(i.sync_nus_init))
<BR><BR>[Calls]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_nus_initial
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[394]"></a>sync_nus_initial</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, a2_nus_mngr.o(i.sync_nus_initial))
<BR><BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;que_initial
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_nus_init
</UL>

<P><STRONG><a name="[290]"></a>sync_nus_task</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, a2_nus_mngr.o(i.sync_nus_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 620<LI>Call Chain = sync_nus_task &rArr; sync_nus_special_register_mngr &rArr; sync_nus_special_pedometer_reg_mngr &rArr; a2_read_pedo_meter_log_by_queue &rArr; flash_read &rArr; at45db_page_to_buf &rArr; at45db_busy_wait &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_nus_special_register_mngr
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_nus_normal_register_mngr
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;que_pop
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;que_front
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;que_isEmpty
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5f]"></a>timer_hr_event_handler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, main.o(i.timer_hr_event_handler))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.start_timer)
</UL>
<P><STRONG><a name="[372]"></a>unixtimestamp_to_date_time</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, a2_display_mngr.o(i.unixtimestamp_to_date_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = unixtimestamp_to_date_time
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_handler
</UL>

<P><STRONG><a name="[62]"></a>wakeup_flash_memory</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, main.o(i.wakeup_flash_memory))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = wakeup_flash_memory &rArr; at45dbxx_init &rArr; at45dbxx_is_available &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at45dbxx_init
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2_spi_int
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.sync_nus_init)
</UL>
<P><STRONG><a name="[64]"></a>wdt_event_handler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, main.o(i.wdt_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = wdt_event_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.wdt_init)
</UL>
<P><STRONG><a name="[28d]"></a>wdt_init</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, main.o(i.wdt_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = wdt_init &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_wdt_init
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_wdt_enable
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_wdt_channel_alloc
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[15d]"></a>writeRegister8</STRONG> (Thumb, 20 bytes, Stack size 32 bytes, max30102.o(i.writeRegister8))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = writeRegister8
</UL>
<BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max30102_readTemperature
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPulseAmplitudeRed
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPulseAmplitudeProximity
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPulseAmplitudeIR
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPulseAmplitudeGreen
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max30102_isr_config
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearFIFO
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitMask
</UL>

<P><STRONG><a name="[347]"></a>write_buf_store</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, peer_database.o(i.write_buf_store))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = write_buf_store &rArr; pds_peer_data_store &rArr; fds_record_write_reserved &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write
</UL>
<BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_buffer_ptr_get
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buf_length_words_set
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_const_point_to_buffer
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_store
</UL>
<BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reattempt_previous_operations
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_store
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[e9]"></a>a2_display_task2</STRONG> (Thumb, 968 bytes, Stack size 48 bytes, main.o(i.a2_display_task2))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = a2_display_task2 &rArr; show_display &rArr; display_time &rArr; display_mini_time &rArr; ssd1306_putstring &rArr; ssd1306_write &rArr; ssd1306_draw_char &rArr; ssd1306_fill_rect &rArr; ssd1306_draw_fast_vline &rArr; ssd1306_draw_fast_vline_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_invert_display
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_display
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_a2_oled_shutdown
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_a2_oled_init
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_a2_i2c_0_init
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_a2_i2c_0_deinit
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_o2
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_heart_reate
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_fall_alert
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_countdown_alert
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_bt_alert
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_battery_low
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f9]"></a>a2_init_gpio</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, main.o(i.a2_init_gpio))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = a2_init_gpio &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_input
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fd]"></a>a2_logic_task</STRONG> (Thumb, 1890 bytes, Stack size 40 bytes, main.o(i.a2_logic_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = a2_logic_task &rArr; advertising_normal &rArr; advertising_start &rArr; pm_peers_delete &rArr; pm_peer_delete &rArr; im_peer_free &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; peer_data_delete &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_read
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_normal
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_alert
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_a2_spi_deinit
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2_write_queue_config
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2_write_button_alert_log
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2_write_button_alert_last_buffer
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2_save_button_alert_to_buf
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2_read_button_alert_last_buffer
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2_button_alert_buf_is_full
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at45dbxx_uninit
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at45dbxx_init
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2_spi_int
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[45]"></a>acc_gyro_timeout_handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, main.o(i.acc_gyro_timeout_handler))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[11f]"></a>adc_init</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, main.o(i.adc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = adc_init &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_saadc_init
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_saadc_channel_init
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_saadc_buffer_convert
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_task
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ff]"></a>advertising_alert</STRONG> (Thumb, 132 bytes, Stack size 168 bytes, main.o(i.advertising_alert))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = advertising_alert &rArr; advertising_start &rArr; pm_peers_delete &rArr; pm_peer_delete &rArr; im_peer_free &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; peer_data_delete &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_start
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_init
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_conn_cfg_tag_set
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2_logic_task
</UL>

<P><STRONG><a name="[101]"></a>advertising_normal</STRONG> (Thumb, 134 bytes, Stack size 168 bytes, main.o(i.advertising_normal))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = advertising_normal &rArr; advertising_start &rArr; pm_peers_delete &rArr; pm_peer_delete &rArr; im_peer_free &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; peer_data_delete &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_start
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_init
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_conn_cfg_tag_set
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2_logic_task
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_to_power_full_mode
</UL>

<P><STRONG><a name="[129]"></a>advertising_start</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, main.o(i.advertising_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = advertising_start &rArr; pm_peers_delete &rArr; pm_peer_delete &rArr; im_peer_free &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; peer_data_delete &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_peers_delete
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_evt_handler
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_normal
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_alert
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7d]"></a>app_shutdown_handler</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, main.o(i.app_shutdown_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = app_shutdown_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(pwr_mgmt_data0)
</UL>
<P><STRONG><a name="[65]"></a>ble_dfu_evt_handler</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, main.o(i.ble_dfu_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = ble_dfu_evt_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[89]"></a>ble_evt_handler</STRONG> (Thumb, 232 bytes, Stack size 56 bytes, main.o(i.ble_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = ble_evt_handler &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_indication_set
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(sdh_ble_observers3)
</UL>
<P><STRONG><a name="[46]"></a>bsp_event_handler</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, main.o(i.bsp_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = bsp_event_handler &rArr; ble_advertising_restart_without_whitelist &rArr; ble_advertising_start &rArr; ble_advdata_set &rArr; ble_advdata_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_mode_enter
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_restart_without_whitelist
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[44]"></a>cancel_sos_timeout_handler</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, main.o(i.cancel_sos_timeout_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = cancel_sos_timeout_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[49]"></a>conn_params_error_handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(i.conn_params_error_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = conn_params_error_handler &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[42]"></a>display_scrolling_timeout_handler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, main.o(i.display_scrolling_timeout_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = display_scrolling_timeout_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[21c]"></a>gap_params_init</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, main.o(i.gap_params_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = gap_params_init &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[47]"></a>gatt_evt_handler</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, main.o(i.gatt_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = gatt_evt_handler &rArr; nrf_log_frontend_std_2 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hrs_on_gatt_evt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[43]"></a>ibeacon_interval_timeout_handler</STRONG> (Thumb, 834 bytes, Stack size 352 bytes, main.o(i.ibeacon_interval_timeout_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = ibeacon_interval_timeout_handler &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[276]"></a>logging_init</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, main.o(i.logging_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = logging_init &rArr; logging_queue_initial &rArr; a2_write_queue_config &rArr; flash_write &rArr; at45db_write_buffer &rArr; at45db_busy_wait &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logging_queue_initial
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2_check_config
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3b]"></a>nrf_delay_ms</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, main.o(i.nrf_delay_ms))
<BR><BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2_logic_task
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2_display_task2
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_event_handler
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_init
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max30102_tmp007_init
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heart_rate_monitoring2
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_to_ultra_power_save_mode
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_setup_time_from_wdt_status
</UL>
<BR>[Address Reference Count : 2]<UL><LI> main.o(i.logging_init)
<LI> main.o(i.sync_nus_init)
</UL>
<P><STRONG><a name="[2b5]"></a>nrf_delay_us</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, main.o(i.nrf_delay_us))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
</UL>

<P><STRONG><a name="[fb]"></a>nrf_gpio_cfg</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, main.o(i.nrf_gpio_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_input
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2_init_gpio
</UL>

<P><STRONG><a name="[fa]"></a>nrf_gpio_cfg_input</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, main.o(i.nrf_gpio_cfg_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2_init_gpio
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aider_a2_info_init
</UL>

<P><STRONG><a name="[fc]"></a>nrf_gpio_cfg_output</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, main.o(i.nrf_gpio_cfg_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2_init_gpio
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pedometer_sleep
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_to_ultra_power_save_mode
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_to_power_full_mode
</UL>

<P><STRONG><a name="[f7]"></a>nrf_gpio_pin_clear</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, main.o(i.nrf_gpio_pin_clear))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2_init_gpio
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2_display_task2
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_to_power_full_mode
</UL>

<P><STRONG><a name="[fe]"></a>nrf_gpio_pin_read</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, main.o(i.nrf_gpio_pin_read))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2_logic_task
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saadc_event_handler
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f4]"></a>nrf_gpio_pin_set</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, main.o(i.nrf_gpio_pin_set))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2_init_gpio
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2_display_task2
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pedometer_sleep
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_to_ultra_power_save_mode
</UL>

<P><STRONG><a name="[5e]"></a>nus_data_handler</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, main.o(i.nus_data_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = nus_data_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_nus_append_command
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_hexdump
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.services_init)
</UL>
<P><STRONG><a name="[37]"></a>on_adv_evt</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, main.o(i.on_adv_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = on_adv_evt &rArr; sleep_mode_enter &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_mode_enter
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_indication_set
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Address Reference Count : 3]<UL><LI> main.o(i.advertising_alert)
<LI> main.o(i.advertising_normal)
<LI> main.o(i.main)
</UL>
<P><STRONG><a name="[48]"></a>on_conn_params_evt</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, main.o(i.on_conn_params_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = on_conn_params_evt &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[5d]"></a>on_cts_c_evt</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, main.o(i.on_cts_c_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = on_cts_c_evt &rArr; date_time_to_unixtimestamp &rArr; date2days
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;date_time_to_unixtimestamp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.services_init)
</UL>
<P><STRONG><a name="[280]"></a>peer_manager_init</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, main.o(i.peer_manager_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = peer_manager_init &rArr; pm_init &rArr; pds_init &rArr; fds_init &rArr; queue_start &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write
</UL>
<BR>[Calls]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_sec_params_set
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_register
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_init
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5c]"></a>pm_evt_handler</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, main.o(i.pm_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = pm_evt_handler &rArr; pm_local_database_has_changed &rArr; gcm_local_database_has_changed &rArr; pending_flags_check &rArr; gscm_local_db_cache_update &rArr; pdb_write_buf_store &rArr; write_buf_store &rArr; pds_peer_data_store &rArr; fds_record_write_reserved &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_start
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_local_database_has_changed
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_conn_sec_config_reply
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_3
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_gc
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_role
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.peer_manager_init)
</UL>
<P><STRONG><a name="[4a]"></a>rtc_handler</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, main.o(i.rtc_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = rtc_handler &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_checking
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unixtimestamp_to_date_time
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_rtc_cc_set
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[373]"></a>sem_checking</STRONG> (Thumb, 106 bytes, Stack size 12 bytes, main.o(i.sem_checking))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = sem_checking
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_handler
</UL>

<P><STRONG><a name="[282]"></a>services_init</STRONG> (Thumb, 442 bytes, Stack size 152 bytes, main.o(i.services_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = services_init &rArr; ble_dis_init &rArr; char_add &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_srv_ascii_to_utf8
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_nus_init
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hrs_init
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dts_init
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dis_init
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dfu_buttonless_init
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dfu_buttonless_async_svci_init
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_bas_init
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b8]"></a>sleep_mode_enter</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, main.o(i.sleep_mode_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = sleep_mode_enter &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_adv_evt
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_event_handler
</UL>

<P><STRONG><a name="[2b6]"></a>nrf_delay_ms</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, a2_nus_mngr.o(i.nrf_delay_ms))
<BR><BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_nus_special_free_fall_raw_data_reg_mngr
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_nus_special_button_alert_reg_mngr
</UL>

<P><STRONG><a name="[2b7]"></a>nrf_delay_us</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, a2_nus_mngr.o(i.nrf_delay_us))
<BR><BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
</UL>

<P><STRONG><a name="[395]"></a>sync_nus_normal_register_mngr</STRONG> (Thumb, 294 bytes, Stack size 64 bytes, a2_nus_mngr.o(i.sync_nus_normal_register_mngr))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = sync_nus_normal_register_mngr &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;que_front
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2_read_reg
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_nus_task
</UL>

<P><STRONG><a name="[397]"></a>sync_nus_special_button_alert_reg_mngr</STRONG> (Thumb, 712 bytes, Stack size 312 bytes, a2_nus_mngr.o(i.sync_nus_special_button_alert_reg_mngr))
<BR><BR>[Stack]<UL><LI>Max Depth = 564<LI>Call Chain = sync_nus_special_button_alert_reg_mngr &rArr; a2_read_button_alert_log_by_queue &rArr; flash_read &rArr; at45db_page_to_buf &rArr; at45db_busy_wait &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;que_size
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;que_pop
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;que_front
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2_read_button_alert_log_by_queue
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2_read_button_alert_log_by_page
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;que_isEmpty
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_hexdump
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2_write_queue_config
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_nus_special_register_mngr
</UL>

<P><STRONG><a name="[398]"></a>sync_nus_special_free_fall_raw_data_reg_mngr</STRONG> (Thumb, 526 bytes, Stack size 48 bytes, a2_nus_mngr.o(i.sync_nus_special_free_fall_raw_data_reg_mngr))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = sync_nus_special_free_fall_raw_data_reg_mngr &rArr; a2_read_raw_data_free_fall_log_by_queue &rArr; flash_read &rArr; at45db_page_to_buf &rArr; at45db_busy_wait &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;que_size
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;que_pop
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;que_front
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2_read_raw_data_free_fall_log_by_queue
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;que_isEmpty
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2_write_queue_config
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_nus_special_register_mngr
</UL>

<P><STRONG><a name="[399]"></a>sync_nus_special_free_fall_reg_mngr</STRONG> (Thumb, 608 bytes, Stack size 312 bytes, a2_nus_mngr.o(i.sync_nus_special_free_fall_reg_mngr))
<BR><BR>[Stack]<UL><LI>Max Depth = 564<LI>Call Chain = sync_nus_special_free_fall_reg_mngr &rArr; a2_read_free_fall_alert_log_by_queue &rArr; flash_read &rArr; at45db_page_to_buf &rArr; at45db_busy_wait &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;que_size
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;que_pop
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;que_front
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2_read_free_fall_alert_log_by_queue
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2_read_free_fall_alert_log_by_page
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;que_isEmpty
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2_write_queue_config
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_nus_special_register_mngr
</UL>

<P><STRONG><a name="[39a]"></a>sync_nus_special_hr_spo2_temp_reg_mngr</STRONG> (Thumb, 608 bytes, Stack size 312 bytes, a2_nus_mngr.o(i.sync_nus_special_hr_spo2_temp_reg_mngr))
<BR><BR>[Stack]<UL><LI>Max Depth = 564<LI>Call Chain = sync_nus_special_hr_spo2_temp_reg_mngr &rArr; a2_read_hr_spo2_temp_log_by_queue &rArr; flash_read &rArr; at45db_page_to_buf &rArr; at45db_busy_wait &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;que_size
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;que_pop
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;que_front
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2_read_hr_spo2_temp_log_by_queue
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2_read_hr_spo2_temp_log_by_page
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;que_isEmpty
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2_write_queue_config
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_nus_special_register_mngr
</UL>

<P><STRONG><a name="[39b]"></a>sync_nus_special_pedometer_reg_mngr</STRONG> (Thumb, 616 bytes, Stack size 312 bytes, a2_nus_mngr.o(i.sync_nus_special_pedometer_reg_mngr))
<BR><BR>[Stack]<UL><LI>Max Depth = 572<LI>Call Chain = sync_nus_special_pedometer_reg_mngr &rArr; a2_read_pedo_meter_log_by_queue &rArr; flash_read &rArr; at45db_page_to_buf &rArr; at45db_busy_wait &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;que_size
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;que_pop
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;que_front
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2_read_pedo_meter_log_by_queue
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;que_isEmpty
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2_write_queue_config
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2_read_pedo_meter_log_by_page
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_nus_special_register_mngr
</UL>

<P><STRONG><a name="[39c]"></a>sync_nus_special_register_mngr</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, a2_nus_mngr.o(i.sync_nus_special_register_mngr))
<BR><BR>[Stack]<UL><LI>Max Depth = 588<LI>Call Chain = sync_nus_special_register_mngr &rArr; sync_nus_special_pedometer_reg_mngr &rArr; a2_read_pedo_meter_log_by_queue &rArr; flash_read &rArr; at45db_page_to_buf &rArr; at45db_busy_wait &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_nus_special_pedometer_reg_mngr
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_nus_special_hr_spo2_temp_reg_mngr
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_nus_special_free_fall_reg_mngr
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_nus_special_free_fall_raw_data_reg_mngr
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_nus_special_button_alert_reg_mngr
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;que_front
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_nus_task
</UL>

<P><STRONG><a name="[356]"></a>pedometer_cal_metabolic_factor</STRONG> (Thumb, 182 bytes, Stack size 48 bytes, pedometer.o(i.pedometer_cal_metabolic_factor))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = pedometer_cal_metabolic_factor
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pedometer_processing
</UL>

<P><STRONG><a name="[358]"></a>pedometer_cal_step_rate_factor</STRONG> (Thumb, 182 bytes, Stack size 48 bytes, pedometer.o(i.pedometer_cal_step_rate_factor))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = pedometer_cal_step_rate_factor
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pedometer_processing
</UL>

<P><STRONG><a name="[3a]"></a>alert_timer_handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bsp.o(i.alert_timer_handler))
<BR><BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_invert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp.o(i.bsp_init)
</UL>
<P><STRONG><a name="[66]"></a>bsp_button_event_handler</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, bsp.o(i.bsp_button_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = bsp_button_event_handler &rArr; app_timer_start &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_pin_to_button_idx
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp.o(.constdata)
</UL>
<P><STRONG><a name="[39]"></a>leds_timer_handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp.o(i.leds_timer_handler))
<BR>[Address Reference Count : 1]<UL><LI> bsp.o(i.bsp_init)
</UL>
<P><STRONG><a name="[12a]"></a>advertising_buttons_configure</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, bsp_btn_ble.o(i.advertising_buttons_configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = advertising_buttons_configure &rArr; bsp_event_to_button_action_assign
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_event_to_button_action_assign
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_btn_ble_init
</UL>

<P><STRONG><a name="[81]"></a>ble_evt_handler</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, bsp_btn_ble.o(i.ble_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ble_evt_handler &rArr; advertising_buttons_configure &rArr; bsp_event_to_button_action_assign
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_buttons_configure
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_event_to_button_action_assign
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_btn_ble.o(sdh_ble_observers1)
</UL>
<P><STRONG><a name="[15f]"></a>ble_device_addr_encode</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, ble_advdata.o(i.ble_device_addr_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_device_addr_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_encode
</UL>

<P><STRONG><a name="[162]"></a>conn_int_encode</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, ble_advdata.o(i.conn_int_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = conn_int_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_encode
</UL>

<P><STRONG><a name="[163]"></a>manuf_specific_data_encode</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, ble_advdata.o(i.manuf_specific_data_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = manuf_specific_data_encode &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_encode
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_encode
</UL>

<P><STRONG><a name="[165]"></a>name_encode</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, ble_advdata.o(i.name_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = name_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_encode
</UL>

<P><STRONG><a name="[164]"></a>service_data_encode</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, ble_advdata.o(i.service_data_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = service_data_encode &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_encode
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_encode
</UL>

<P><STRONG><a name="[160]"></a>uint16_encode</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ble_advdata.o(i.uint16_encode))
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_encode
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_data_encode
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manuf_specific_data_encode
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_int_encode
</UL>

<P><STRONG><a name="[161]"></a>uuid_list_encode</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, ble_advdata.o(i.uuid_list_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uuid_list_sized_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_encode
</UL>

<P><STRONG><a name="[3a8]"></a>uuid_list_sized_encode</STRONG> (Thumb, 160 bytes, Stack size 48 bytes, ble_advdata.o(i.uuid_list_sized_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = uuid_list_sized_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uuid_list_encode
</UL>

<P><STRONG><a name="[82]"></a>ble_evt_handler</STRONG> (Thumb, 242 bytes, Stack size 32 bytes, ble_conn_params.o(i.ble_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = ble_evt_handler &rArr; conn_params_negotiation &rArr; app_timer_start &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_srv_is_notification_enabled
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_error_evt
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_conn_params_ok
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;instance_get
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_negotiation
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_conn_params.o(sdh_ble_observers1)
</UL>
<P><STRONG><a name="[18d]"></a>conn_params_negotiation</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, ble_conn_params.o(i.conn_params_negotiation))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = conn_params_negotiation &rArr; app_timer_start &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_error_evt
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[18a]"></a>instance_get</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, ble_conn_params.o(i.instance_get))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_timeout_handler
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[18b]"></a>is_conn_params_ok</STRONG> (Thumb, 68 bytes, Stack size 20 bytes, ble_conn_params.o(i.is_conn_params_ok))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = is_conn_params_ok
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[18c]"></a>send_error_evt</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ble_conn_params.o(i.send_error_evt))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_timeout_handler
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_negotiation
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[38]"></a>update_timeout_handler</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, ble_conn_params.o(i.update_timeout_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = update_timeout_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_error_evt
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;instance_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_conn_params.o(i.ble_conn_params_init)
</UL>
<P><STRONG><a name="[7e]"></a>ble_evt_handler</STRONG> (Thumb, 256 bytes, Stack size 176 bytes, ble_conn_state.o(i.ble_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = ble_evt_handler &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_update_by_key
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_key_list_get
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_first_key_index_get
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_bulk_update_by_key
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_conn_state.o(sdh_ble_observers0)
</UL>
<P><STRONG><a name="[172]"></a>user_flag_is_acquired</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ble_conn_state.o(i.user_flag_is_acquired))
<BR><BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_get
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_collection
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_acquire
</UL>

<P><STRONG><a name="[1f8]"></a>evt_send</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, gatt_cache_manager.o(i.evt_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = evt_send &rArr; im_peer_id_get_by_conn_handle &rArr; get_connection_by_conn_handle &rArr; ble_conn_state_user_flag_get &rArr; sdk_mapped_flags_get_by_key
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_ble_evt_handler
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_send_in_evt
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_unexpected_error
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pending_flags_check
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_apply_in_evt
</UL>

<P><STRONG><a name="[22a]"></a>local_db_apply_in_evt</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, gatt_cache_manager.o(i.local_db_apply_in_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = local_db_apply_in_evt &rArr; gscm_local_db_cache_apply &rArr; pdb_peer_data_ptr_get &rArr; pds_peer_data_read &rArr; peer_data_find &rArr; fds_record_find &rArr; record_find &rArr; record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_local_db_cache_apply
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_unexpected_error
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_im_evt_handler
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_ble_evt_handler
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_send_in_evt
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pending_flags_check
</UL>

<P><STRONG><a name="[22c]"></a>local_db_update</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gatt_cache_manager.o(i.local_db_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = local_db_update &rArr; ble_conn_state_user_flag_set &rArr; sdk_mapped_flags_update_by_key &rArr; sdk_mapped_flags_bulk_update_by_key
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_pdb_evt_handler
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_ble_evt_handler
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pending_flags_check
</UL>

<P><STRONG><a name="[22d]"></a>pending_flags_check</STRONG> (Thumb, 216 bytes, Stack size 120 bytes, gatt_cache_manager.o(i.pending_flags_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = pending_flags_check &rArr; gscm_local_db_cache_update &rArr; pdb_write_buf_store &rArr; write_buf_store &rArr; pds_peer_data_store &rArr; fds_record_write_reserved &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_mutex_unlock
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_mutex_lock
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_local_db_cache_update
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_send_in_evt
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_unexpected_error
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_update
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_apply_in_evt
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_get
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_collection
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_conn_handles
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_pdb_evt_handler
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_local_database_has_changed
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_ble_evt_handler
</UL>

<P><STRONG><a name="[272]"></a>send_unexpected_error</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, gatt_cache_manager.o(i.send_unexpected_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = send_unexpected_error &rArr; evt_send &rArr; im_peer_id_get_by_conn_handle &rArr; get_connection_by_conn_handle &rArr; ble_conn_state_user_flag_get &rArr; sdk_mapped_flags_get_by_key
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_send_in_evt
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pending_flags_check
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_apply_in_evt
</UL>

<P><STRONG><a name="[35f]"></a>service_changed_send_in_evt</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, gatt_cache_manager.o(i.service_changed_send_in_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = service_changed_send_in_evt &rArr; gscm_db_change_notification_done &rArr; pdb_raw_store &rArr; pds_peer_data_store &rArr; fds_record_write_reserved &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_service_changed_ind_send
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_db_change_notification_done
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_unexpected_error
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_apply_in_evt
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pending_flags_check
</UL>

<P><STRONG><a name="[23c]"></a>service_changed_pending_set</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, gatts_cache_manager.o(i.service_changed_pending_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = service_changed_pending_set &rArr; pdb_raw_store &rArr; pds_peer_data_store &rArr; fds_record_write_reserved &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_raw_store
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_next_peer_id_get
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_pdb_evt_handler
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_local_database_has_changed
</UL>

<P><STRONG><a name="[25d]"></a>peer_id_set</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, id_manager.o(i.peer_id_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = peer_id_set &rArr; get_connection_by_conn_handle &rArr; ble_conn_state_user_flag_get &rArr; sdk_mapped_flags_get_by_key
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_connection_by_conn_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_free
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_new_peer_id
</UL>

<P><STRONG><a name="[2b2]"></a>link_init</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, nrf_ble_gatt.o(i.link_init))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_gatt_on_ble_evt
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_gatt_init
</UL>

<P><STRONG><a name="[2b3]"></a>on_connected_evt</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, nrf_ble_gatt.o(i.on_connected_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = on_connected_evt &rArr; nrf_log_frontend_std_2 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_gatt_on_ble_evt
</UL>

<P><STRONG><a name="[2b4]"></a>on_exchange_mtu_request_evt</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, nrf_ble_gatt.o(i.on_exchange_mtu_request_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = on_exchange_mtu_request_evt &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_gatt_on_ble_evt
</UL>

<P><STRONG><a name="[5b]"></a>fds_evt_handler</STRONG> (Thumb, 208 bytes, Stack size 40 bytes, peer_data_storage.o(i.fds_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = fds_evt_handler &rArr; peer_data_delete &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_free
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_delete
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_evt_send
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_id_within_pm_range
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> peer_data_storage.o(i.pds_init)
</UL>
<P><STRONG><a name="[1f9]"></a>file_id_within_pm_range</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, peer_data_storage.o(i.file_id_within_pm_range))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_evt_handler
</UL>

<P><STRONG><a name="[1fa]"></a>pds_evt_send</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, peer_data_storage.o(i.pds_evt_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pds_evt_send
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_delete
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_evt_handler
</UL>

<P><STRONG><a name="[1fb]"></a>peer_data_delete</STRONG> (Thumb, 122 bytes, Stack size 64 bytes, peer_data_storage.o(i.peer_data_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = peer_data_delete &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_get_next_deleted
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_free
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_find_in_file
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_file_delete
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_evt_send
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_id_free
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_evt_handler
</UL>

<P><STRONG><a name="[352]"></a>peer_data_find</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, peer_data_storage.o(i.peer_data_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = peer_data_find &rArr; fds_record_find &rArr; record_find &rArr; record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_find
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_id_is_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_store
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_read
</UL>

<P><STRONG><a name="[351]"></a>peer_data_id_is_valid</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, peer_data_storage.o(i.peer_data_id_is_valid))
<BR><BR>[Called By]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_space_reserve
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_store
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_find
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_read
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_iterate
</UL>

<P><STRONG><a name="[337]"></a>pdb_evt_send</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, peer_database.o(i.pdb_evt_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pdb_evt_send
</UL>
<BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reattempt_previous_operations
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_pds_evt_handler
</UL>

<P><STRONG><a name="[349]"></a>peer_data_const_point_to_buffer</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, peer_database.o(i.peer_data_const_point_to_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = peer_data_const_point_to_buffer &rArr; peer_data_point_to_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_point_to_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buf_store
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_store_prepare
</UL>

<P><STRONG><a name="[345]"></a>peer_data_point_to_buffer</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, peer_database.o(i.peer_data_point_to_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = peer_data_point_to_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_const_point_to_buffer
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_get
</UL>

<P><STRONG><a name="[338]"></a>reattempt_previous_operations</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, peer_database.o(i.reattempt_previous_operations))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = reattempt_previous_operations &rArr; write_buf_store &rArr; pds_peer_data_store &rArr; fds_record_write_reserved &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write
</UL>
<BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buf_store
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_evt_send
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_pds_evt_handler
</UL>

<P><STRONG><a name="[34a]"></a>write_buf_length_words_set</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, peer_database.o(i.write_buf_length_words_set))
<BR><BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buf_store
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_store_prepare
</UL>

<P><STRONG><a name="[341]"></a>write_buffer_record_find</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, peer_database.o(i.write_buffer_record_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = write_buffer_record_find &rArr; write_buffer_record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_record_find_next
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_store_prepare
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_store
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_release
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_get
</UL>

<P><STRONG><a name="[33d]"></a>write_buffer_record_find_next</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, peer_database.o(i.write_buffer_record_find_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = write_buffer_record_find_next
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_record_find
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_peer_free
</UL>

<P><STRONG><a name="[331]"></a>write_buffer_record_invalidate</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, peer_database.o(i.write_buffer_record_invalidate))
<BR><BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_init
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_record_release
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_get
</UL>

<P><STRONG><a name="[336]"></a>write_buffer_record_release</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, peer_database.o(i.write_buffer_record_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = write_buffer_record_release &rArr; pm_buffer_release &rArr; pm_mutex_unlock &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_buffer_release
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_record_invalidate
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_pds_evt_handler
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_release
</UL>

<P><STRONG><a name="[1c1]"></a>claim</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, peer_id.o(i.claim))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = claim &rArr; pm_mutex_lock_first_available &rArr; lock_by_mask &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_mutex_lock_first_available
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_mutex_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_delete
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_allocate
</UL>

<P><STRONG><a name="[35a]"></a>release</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, peer_id.o(i.release))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = release &rArr; pm_mutex_unlock &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_mutex_unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_free
</UL>

<P><STRONG><a name="[83]"></a>ble_evt_handler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, peer_manager.o(i.ble_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = ble_evt_handler &rArr; gcm_ble_evt_handler &rArr; pending_flags_check &rArr; gscm_local_db_cache_update &rArr; pdb_write_buf_store &rArr; write_buf_store &rArr; pds_peer_data_store &rArr; fds_record_write_reserved &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_ble_evt_handler
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_ble_evt_handler
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_ble_evt_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> peer_manager.o(sdh_ble_observers1)
</UL>
<P><STRONG><a name="[363]"></a>evt_send</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, peer_manager.o(i.evt_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = evt_send
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_sm_evt_handler
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_pdb_evt_handler
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_peers_delete
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_im_evt_handler
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_gcm_evt_handler
</UL>

<P><STRONG><a name="[367]"></a>rank_vars_update</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, peer_manager.o(i.rank_vars_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = rank_vars_update &rArr; pm_peer_ranks_get &rArr; pdb_peer_data_load &rArr; pds_peer_data_read &rArr; peer_data_find &rArr; fds_record_find &rArr; record_find &rArr; record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_peer_ranks_get
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_pdb_evt_handler
</UL>

<P><STRONG><a name="[273]"></a>lock_by_mask</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, pm_mutex.o(i.lock_by_mask))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = lock_by_mask &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_mutex_lock_first_available
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_mutex_lock
</UL>

<P><STRONG><a name="[132]"></a>allow_repairing</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, security_dispatcher.o(i.allow_repairing))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = allow_repairing &rArr; ble_conn_state_user_flag_get &rArr; sdk_mapped_flags_get_by_key
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_status_success_process
</UL>

<P><STRONG><a name="[14c]"></a>auth_status_success_process</STRONG> (Thumb, 216 bytes, Stack size 64 bytes, security_dispatcher.o(i.auth_status_success_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = auth_status_success_process &rArr; pdb_write_buf_store &rArr; write_buf_store &rArr; pds_peer_data_store &rArr; fds_record_write_reserved &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_unexpected_error
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_config_req
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_created
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;allow_repairing
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_role
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_free
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_new_peer_id
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_find_duplicate_bonding_data
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_store
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_get
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
</UL>
<BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_ble_evt_handler
</UL>

<P><STRONG><a name="[1c7]"></a>conn_sec_failure</STRONG> (Thumb, 60 bytes, Stack size 40 bytes, security_dispatcher.o(i.conn_sec_failure))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = conn_sec_failure &rArr; evt_send &rArr; im_peer_id_get_by_conn_handle &rArr; get_connection_by_conn_handle &rArr; ble_conn_state_user_flag_get &rArr; sdk_mapped_flags_get_by_key
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_failure
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encryption_failure
</UL>

<P><STRONG><a name="[1ea]"></a>encryption_failure</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, security_dispatcher.o(i.encryption_failure))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = encryption_failure &rArr; conn_sec_failure &rArr; evt_send &rArr; im_peer_id_get_by_conn_handle &rArr; get_connection_by_conn_handle &rArr; ble_conn_state_user_flag_get &rArr; sdk_mapped_flags_get_by_key
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_sec_failure
</UL>
<BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_ble_evt_handler
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_info_request_process
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_failure
</UL>

<P><STRONG><a name="[158]"></a>evt_send</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, security_dispatcher.o(i.evt_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = evt_send &rArr; im_peer_id_get_by_conn_handle &rArr; get_connection_by_conn_handle &rArr; ble_conn_state_user_flag_get &rArr; sdk_mapped_flags_get_by_key
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_ble_evt_handler
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_unexpected_error
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_config_req
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_proc_start
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_sec_failure
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_status_success_process
</UL>

<P><STRONG><a name="[217]"></a>flag_id_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, security_dispatcher.o(i.flag_id_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = flag_id_init &rArr; ble_conn_state_user_flag_acquire
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_init
</UL>

<P><STRONG><a name="[26b]"></a>link_secure_failure</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, security_dispatcher.o(i.link_secure_failure))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = link_secure_failure &rArr; im_peer_free &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; peer_data_delete &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_unexpected_error
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_created
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pairing
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encryption_failure
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_sec_failure
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_free
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_release
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_ble_evt_handler
</UL>

<P><STRONG><a name="[26c]"></a>pairing</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, security_dispatcher.o(i.pairing))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pairing &rArr; ble_conn_state_user_flag_get &rArr; sdk_mapped_flags_get_by_key
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_ble_evt_handler
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_failure
</UL>

<P><STRONG><a name="[156]"></a>peer_created</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, security_dispatcher.o(i.peer_created))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = peer_created &rArr; ble_conn_state_user_flag_get &rArr; sdk_mapped_flags_get_by_key
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_failure
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_status_success_process
</UL>

<P><STRONG><a name="[37a]"></a>sec_info_request_process</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, security_dispatcher.o(i.sec_info_request_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = sec_info_request_process &rArr; sec_proc_housekeeping &rArr; im_peer_free &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; peer_data_delete &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_unexpected_error
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_proc_start
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_proc_housekeeping
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encryption_failure
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_master_id
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_new_peer_id
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_master_ids_compare
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_peer_data_ptr_get
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_ble_evt_handler
</UL>

<P><STRONG><a name="[37d]"></a>sec_keyset_fill</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, security_dispatcher.o(i.sec_keyset_fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = sec_keyset_fill &rArr; pdb_write_buf_get &rArr; pm_buffer_block_acquire &rArr; pm_buffer_release &rArr; pm_mutex_unlock &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_store_prepare
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_ble_addr_get
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_get
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply
</UL>

<P><STRONG><a name="[37c]"></a>sec_proc_housekeeping</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, security_dispatcher.o(i.sec_proc_housekeeping))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = sec_proc_housekeeping &rArr; im_peer_free &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; peer_data_delete &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_free
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_new_peer_id
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
</UL>
<BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_info_request_process
</UL>

<P><STRONG><a name="[37b]"></a>sec_proc_start</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, security_dispatcher.o(i.sec_proc_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = sec_proc_start &rArr; evt_send &rArr; im_peer_id_get_by_conn_handle &rArr; get_connection_by_conn_handle &rArr; ble_conn_state_user_flag_get &rArr; sdk_mapped_flags_get_by_key
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_ble_evt_handler
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_info_request_process
</UL>

<P><STRONG><a name="[154]"></a>send_config_req</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, security_dispatcher.o(i.send_config_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = send_config_req &rArr; evt_send &rArr; im_peer_id_get_by_conn_handle &rArr; get_connection_by_conn_handle &rArr; ble_conn_state_user_flag_get &rArr; sdk_mapped_flags_get_by_key
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_status_success_process
</UL>

<P><STRONG><a name="[151]"></a>send_unexpected_error</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, security_dispatcher.o(i.send_unexpected_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = send_unexpected_error &rArr; evt_send &rArr; im_peer_id_get_by_conn_handle &rArr; get_connection_by_conn_handle &rArr; ble_conn_state_user_flag_get &rArr; sdk_mapped_flags_get_by_key
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_info_request_process
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_failure
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_status_success_process
</UL>

<P><STRONG><a name="[1f6]"></a>events_send_from_err_code</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, security_manager.o(i.events_send_from_err_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = events_send_from_err_code &rArr; im_peer_id_get_by_conn_handle &rArr; get_connection_by_conn_handle &rArr; ble_conn_state_user_flag_get &rArr; sdk_mapped_flags_get_by_key
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply_perform
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure
</UL>

<P><STRONG><a name="[1f7]"></a>evt_send</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, security_manager.o(i.evt_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = evt_send
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;params_req_send
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;events_send_from_err_code
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_smd_evt_handler
</UL>

<P><STRONG><a name="[218]"></a>flag_id_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, security_manager.o(i.flag_id_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = flag_id_init &rArr; ble_conn_state_user_flag_acquire
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_init
</UL>

<P><STRONG><a name="[219]"></a>flags_set_from_err_code</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, security_manager.o(i.flags_set_from_err_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = flags_set_from_err_code &rArr; ble_conn_state_user_flag_set &rArr; sdk_mapped_flags_update_by_key &rArr; sdk_mapped_flags_bulk_update_by_key
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
</UL>
<BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply_perform
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure
</UL>

<P><STRONG><a name="[267]"></a>link_secure</STRONG> (Thumb, 178 bytes, Stack size 48 bytes, security_manager.o(i.link_secure))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = link_secure &rArr; events_send_from_err_code &rArr; im_peer_id_get_by_conn_handle &rArr; get_connection_by_conn_handle &rArr; ble_conn_state_user_flag_get &rArr; sdk_mapped_flags_get_by_key
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;params_req_send
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_context_get
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flags_set_from_err_code
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;events_send_from_err_code
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_link_secure
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_pending_process
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_smd_evt_handler
</UL>

<P><STRONG><a name="[26d]"></a>link_secure_pending_process</STRONG> (Thumb, 92 bytes, Stack size 96 bytes, security_manager.o(i.link_secure_pending_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = link_secure_pending_process &rArr; link_secure &rArr; events_send_from_err_code &rArr; im_peer_id_get_by_conn_handle &rArr; get_connection_by_conn_handle &rArr; ble_conn_state_user_flag_get &rArr; sdk_mapped_flags_get_by_key
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_any_set
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_get
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_collection
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_conn_handles
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_ble_evt_handler
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_pdb_evt_handler
</UL>

<P><STRONG><a name="[268]"></a>new_context_get</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, security_manager.o(i.new_context_get))
<BR><BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply_perform
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure
</UL>

<P><STRONG><a name="[32e]"></a>params_reply_pending_process</STRONG> (Thumb, 64 bytes, Stack size 88 bytes, security_manager.o(i.params_reply_pending_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = params_reply_pending_process &rArr; smd_params_reply_perform &rArr; smd_params_reply &rArr; sec_proc_housekeeping &rArr; im_peer_free &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; peer_data_delete &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write
</UL>
<BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply_perform
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_any_set
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_get
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_collection
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_conn_handles
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_pdb_evt_handler
</UL>

<P><STRONG><a name="[269]"></a>params_req_send</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, security_manager.o(i.params_req_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = params_req_send &rArr; im_peer_id_get_by_conn_handle &rArr; get_connection_by_conn_handle &rArr; ble_conn_state_user_flag_get &rArr; sdk_mapped_flags_get_by_key
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply_perform
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure
</UL>

<P><STRONG><a name="[26e]"></a>sdk_mapped_flags_any_set</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, security_manager.o(i.sdk_mapped_flags_any_set))
<BR><BR>[Called By]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;params_reply_pending_process
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_pending_process
</UL>

<P><STRONG><a name="[381]"></a>sec_params_verify</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, security_manager.o(i.sec_params_verify))
<BR><BR>[Called By]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_sec_params_set
</UL>

<P><STRONG><a name="[32f]"></a>smd_params_reply_perform</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, security_manager.o(i.smd_params_reply_perform))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = smd_params_reply_perform &rArr; smd_params_reply &rArr; sec_proc_housekeeping &rArr; im_peer_free &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; peer_data_delete &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;params_req_send
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_context_get
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flags_set_from_err_code
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;events_send_from_err_code
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply
</UL>
<BR>[Called By]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;params_reply_pending_process
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_smd_evt_handler
</UL>

<P><STRONG><a name="[187]"></a>date_and_time_char_add</STRONG> (Thumb, 246 bytes, Stack size 80 bytes, ble_dts.o(i.date_and_time_char_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = date_and_time_char_add
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dts_init
</UL>

<P><STRONG><a name="[1cf]"></a>determine_day_of_week_by_gauss</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, ble_dts.o(i.determine_day_of_week_by_gauss))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = determine_day_of_week_by_gauss &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;week_of_day_char_add
</UL>

<P><STRONG><a name="[188]"></a>week_of_day_char_add</STRONG> (Thumb, 176 bytes, Stack size 80 bytes, ble_dts.o(i.week_of_day_char_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = week_of_day_char_add &rArr; determine_day_of_week_by_gauss &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;determine_day_of_week_by_gauss
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dts_init
</UL>

<P><STRONG><a name="[159]"></a>battery_level_char_add</STRONG> (Thumb, 334 bytes, Stack size 96 bytes, ble_bas.o(i.battery_level_char_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = battery_level_char_add
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_srv_report_ref_encode
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_bas_init
</UL>

<P><STRONG><a name="[183]"></a>char_add</STRONG> (Thumb, 172 bytes, Stack size 88 bytes, ble_dis.o(i.char_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = char_add &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dis_init
</UL>

<P><STRONG><a name="[185]"></a>pnp_id_encode</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, ble_dis.o(i.pnp_id_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = pnp_id_encode &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dis_init
</UL>

<P><STRONG><a name="[184]"></a>sys_id_encode</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, ble_dis.o(i.sys_id_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = sys_id_encode &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dis_init
</UL>

<P><STRONG><a name="[197]"></a>body_sensor_location_char_add</STRONG> (Thumb, 134 bytes, Stack size 80 bytes, ble_hrs.o(i.body_sensor_location_char_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = body_sensor_location_char_add
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hrs_init
</UL>

<P><STRONG><a name="[196]"></a>heart_rate_measurement_char_add</STRONG> (Thumb, 194 bytes, Stack size 96 bytes, ble_hrs.o(i.heart_rate_measurement_char_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = heart_rate_measurement_char_add &rArr; hrm_encode &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hrm_encode
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hrs_init
</UL>

<P><STRONG><a name="[194]"></a>hrm_encode</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, ble_hrs.o(i.hrm_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = hrm_encode &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hrs_heart_rate_measurement_send
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heart_rate_measurement_char_add
</UL>

<P><STRONG><a name="[19b]"></a>rx_char_add</STRONG> (Thumb, 162 bytes, Stack size 72 bytes, ble_nus.o(i.rx_char_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = rx_char_add
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_nus_init
</UL>

<P><STRONG><a name="[19c]"></a>tx_char_add</STRONG> (Thumb, 218 bytes, Stack size 72 bytes, ble_nus.o(i.tx_char_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = tx_char_add
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_nus_init
</UL>

<P><STRONG><a name="[17e]"></a>on_rw_authorize_req</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, ble_dfu.o(i.on_rw_authorize_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = on_rw_authorize_req &rArr; ble_dfu_buttonless_on_ctrl_pt_write &rArr; ble_dfu_buttonless_resp_send
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dfu_buttonless_on_ctrl_pt_write
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dfu_buttonless_on_ble_evt
</UL>

<P><STRONG><a name="[17f]"></a>on_write</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, ble_dfu.o(i.on_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = on_write &rArr; nrf_log_frontend_std_2 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_srv_is_indication_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dfu_buttonless_on_ble_evt
</UL>

<P><STRONG><a name="[b5]"></a>clock_clk_started_notify</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, nrf_drv_clock.o(i.clock_clk_started_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = clock_clk_started_notify
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_CLOCK_IRQHandler
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_evt_handler
</UL>

<P><STRONG><a name="[2cf]"></a>item_enqueue</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, nrf_drv_clock.o(i.item_enqueue))
<BR><BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_lfclk_request
</UL>

<P><STRONG><a name="[2ce]"></a>lfclk_stop</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_drv_clock.o(i.lfclk_stop))
<BR><BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_lfclk_release
</UL>

<P><STRONG><a name="[b3]"></a>nrf_clock_event_check</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrf_drv_clock.o(i.nrf_clock_event_check))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_CLOCK_IRQHandler
</UL>

<P><STRONG><a name="[b4]"></a>nrf_clock_event_clear</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, nrf_drv_clock.o(i.nrf_clock_event_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_clock_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_lfclk_request
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_CLOCK_IRQHandler
</UL>

<P><STRONG><a name="[91]"></a>sd_state_evt_handler</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, nrf_drv_clock.o(i.sd_state_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = sd_state_evt_handler &rArr; nrf_drv_clock_lfclk_release &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_common_irq_enable
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_lfclk_release
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_drv_clock.o(sdh_state_observers0)
</UL>
<P><STRONG><a name="[8b]"></a>soc_evt_handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_drv_clock.o(i.soc_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = soc_evt_handler &rArr; clock_clk_started_notify
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_clk_started_notify
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_drv_clock.o(sdh_soc_observers0)
</UL>
<P><STRONG><a name="[b1]"></a>channel_port_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.channel_port_get))
<BR><BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[b0]"></a>nrf_bitmask_bit_is_set</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.nrf_bitmask_bit_is_set))
<BR><BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[b2]"></a>nrf_gpio_cfg_sense_set</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.nrf_gpio_cfg_sense_set))
<BR><BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[af]"></a>nrf_gpio_ports_read</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, nrf_drv_gpiote.o(i.nrf_gpio_ports_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = nrf_gpio_ports_read
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[ae]"></a>nrf_gpiote_event_clear</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, nrf_drv_gpiote.o(i.nrf_gpiote_event_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_gpiote_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[ad]"></a>nrf_gpiote_event_is_set</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.nrf_gpiote_event_is_set))
<BR><BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[3a3]"></a>nrf_uart_event_check</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_drv_uart.o(i.nrf_uart_event_check))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>

<P><STRONG><a name="[375]"></a>nrf_uart_event_clear</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nrf_drv_uart.o(i.nrf_uart_event_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_uart_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_byte
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_byte
</UL>

<P><STRONG><a name="[3a2]"></a>nrf_uart_int_enable_check</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrf_drv_uart.o(i.nrf_uart_int_enable_check))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>

<P><STRONG><a name="[3a6]"></a>nrf_uarte_event_check</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_drv_uart.o(i.nrf_uarte_event_check))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uarte_irq_handler
</UL>

<P><STRONG><a name="[3a7]"></a>nrf_uarte_event_clear</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nrf_drv_uart.o(i.nrf_uarte_event_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_uarte_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uarte_irq_handler
</UL>

<P><STRONG><a name="[374]"></a>rx_byte</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, nrf_drv_uart.o(i.rx_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>

<P><STRONG><a name="[3a4]"></a>rx_done_event</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, nrf_drv_uart.o(i.rx_done_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rx_done_event
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uarte_irq_handler
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>

<P><STRONG><a name="[3a1]"></a>tx_byte</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, nrf_drv_uart.o(i.tx_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>

<P><STRONG><a name="[3a5]"></a>tx_done_event</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, nrf_drv_uart.o(i.tx_done_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tx_done_event
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uarte_irq_handler
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>

<P><STRONG><a name="[cb]"></a>uart_irq_handler</STRONG> (Thumb, 286 bytes, Stack size 48 bytes, nrf_drv_uart.o(i.uart_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = uart_irq_handler &rArr; tx_done_event
</UL>
<BR>[Calls]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_done_event
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_byte
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_done_event
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_byte
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_int_enable_check
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_clear
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_check
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTE0_UART0_IRQHandler
</UL>

<P><STRONG><a name="[ca]"></a>uarte_irq_handler</STRONG> (Thumb, 240 bytes, Stack size 40 bytes, nrf_drv_uart.o(i.uarte_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = uarte_irq_handler &rArr; tx_done_event
</UL>
<BR>[Calls]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_done_event
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_done_event
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_event_clear
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_event_check
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTE0_UART0_IRQHandler
</UL>

<P><STRONG><a name="[385]"></a>nrf_drv_is_in_RAM</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nrf_drv_spi.o(i.nrf_drv_is_in_RAM))
<BR><BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_xfer
</UL>

<P><STRONG><a name="[2dc]"></a>nrf_gpio_cfg</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, nrf_drv_spi.o(i.nrf_gpio_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_init
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
</UL>

<P><STRONG><a name="[2dd]"></a>nrf_gpio_cfg_output</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, nrf_drv_spi.o(i.nrf_gpio_cfg_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_init
</UL>

<P><STRONG><a name="[c3]"></a>nrf_gpio_pin_set</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrf_drv_spi.o(i.nrf_gpio_pin_set))
<BR><BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_init
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM2_SPIS2_SPI2_IRQHandler
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_xfer
</UL>

<P><STRONG><a name="[c2]"></a>nrf_spim_event_check</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_drv_spi.o(i.nrf_spim_event_check))
<BR><BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_uninit
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM2_SPIS2_SPI2_IRQHandler
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_xfer
</UL>

<P><STRONG><a name="[2e1]"></a>spim_xfer</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, nrf_drv_spi.o(i.spim_xfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_spim_event_check
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_is_in_RAM
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_xfer
</UL>

<P><STRONG><a name="[b7]"></a>nrf_drv_rtc_int_handler</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, nrf_drv_rtc.o(i.nrf_drv_rtc_int_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_drv_rtc_int_handler &rArr; nrf_rtc_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_rtc_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC2_IRQHandler
</UL>

<P><STRONG><a name="[2d3]"></a>nrf_rtc_event_clear</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nrf_drv_rtc.o(i.nrf_rtc_event_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_rtc_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_rtc_tick_enable
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_rtc_cc_set
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_rtc_int_handler
</UL>

<P><STRONG><a name="[c1]"></a>irq_handler_twim</STRONG> (Thumb, 334 bytes, Stack size 48 bytes, nrf_drv_twi.o(i.irq_handler_twim))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = irq_handler_twim &rArr; nrf_twim_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twim_event_clear
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twim_event_check
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler
</UL>

<P><STRONG><a name="[39f]"></a>nrf_delay_us</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, nrf_drv_twi.o(i.nrf_delay_us))
<BR><BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_clear_bus
</UL>

<P><STRONG><a name="[3a0]"></a>nrf_drv_is_in_RAM</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nrf_drv_twi.o(i.nrf_drv_is_in_RAM))
<BR><BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twim_xfer
</UL>

<P><STRONG><a name="[39e]"></a>nrf_gpio_pin_set</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrf_drv_twi.o(i.nrf_gpio_pin_set))
<BR><BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_clear_bus
</UL>

<P><STRONG><a name="[265]"></a>nrf_twim_event_check</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_drv_twi.o(i.nrf_twim_event_check))
<BR><BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twim_xfer
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler_twim
</UL>

<P><STRONG><a name="[266]"></a>nrf_twim_event_clear</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nrf_drv_twi.o(i.nrf_twim_event_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_twim_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twim_xfer
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler_twim
</UL>

<P><STRONG><a name="[2e8]"></a>twi_clear_bus</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, nrf_drv_twi.o(i.twi_clear_bus))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = twi_clear_bus
</UL>
<BR>[Calls]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_init
</UL>

<P><STRONG><a name="[2ec]"></a>twim_xfer</STRONG> (Thumb, 558 bytes, Stack size 40 bytes, nrf_drv_twi.o(i.twim_xfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = twim_xfer &rArr; nrf_twim_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twim_event_clear
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twim_event_check
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_is_in_RAM
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_xfer
</UL>

<P><STRONG><a name="[ba]"></a>nrf_saadc_buffer_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_drv_saadc.o(i.nrf_saadc_buffer_init))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_saadc_buffer_convert
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAADC_IRQHandler
</UL>

<P><STRONG><a name="[2d5]"></a>nrf_saadc_channel_input_set</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nrf_drv_saadc.o(i.nrf_saadc_channel_input_set))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_saadc_channel_init
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_saadc_channel_uninit
</UL>

<P><STRONG><a name="[b8]"></a>nrf_saadc_event_check</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrf_drv_saadc.o(i.nrf_saadc_event_check))
<BR><BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_saadc_uninit
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_saadc_buffer_convert
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAADC_IRQHandler
</UL>

<P><STRONG><a name="[b9]"></a>nrf_saadc_event_clear</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, nrf_drv_saadc.o(i.nrf_saadc_event_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_saadc_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_saadc_init
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_saadc_buffer_convert
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAADC_IRQHandler
</UL>

<P><STRONG><a name="[2d8]"></a>nrf_saadc_limit_int_get</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nrf_drv_saadc.o(i.nrf_saadc_limit_int_get))
<BR><BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_saadc_limits_set
</UL>

<P><STRONG><a name="[137]"></a>NVIC_ClearPendingIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, app_timer.o(i.NVIC_ClearPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[139]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, app_timer.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[13d]"></a>NVIC_SetPendingIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, app_timer.o(i.NVIC_SetPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_stop_op_schedule
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[138]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, app_timer.o(i.NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
</UL>

<P><STRONG><a name="[1c5]"></a>compare_reg_update</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, app_timer.o(i.compare_reg_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = compare_reg_update &rArr; rtc1_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_stop
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_us
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPendingIRQ
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>

<P><STRONG><a name="[39d]"></a>elapsed_ticks_acquire</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, app_timer.o(i.elapsed_ticks_acquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = elapsed_ticks_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>

<P><STRONG><a name="[26f]"></a>list_insertions_handler</STRONG> (Thumb, 234 bytes, Stack size 32 bytes, app_timer.o(i.list_insertions_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = list_insertions_handler &rArr; timer_list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_remove
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>

<P><STRONG><a name="[1c6]"></a>nrf_delay_us</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, app_timer.o(i.nrf_delay_us))
<BR><BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_remove
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_stop
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[136]"></a>rtc1_stop</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, app_timer.o(i.rtc1_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rtc1_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[c4]"></a>timer_list_handler</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, app_timer.o(i.timer_list_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = timer_list_handler &rArr; list_insertions_handler &rArr; timer_list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_insertions_handler
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elapsed_ticks_acquire
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI0_EGU0_IRQHandler
</UL>

<P><STRONG><a name="[271]"></a>timer_list_insert</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, app_timer.o(i.timer_list_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_list_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_insertions_handler
</UL>

<P><STRONG><a name="[270]"></a>timer_list_remove</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, app_timer.o(i.timer_list_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = timer_list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_insertions_handler
</UL>

<P><STRONG><a name="[13e]"></a>timer_stop_op_schedule</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, app_timer.o(i.timer_stop_op_schedule))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = timer_stop_op_schedule &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_op_alloc
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
</UL>

<P><STRONG><a name="[b6]"></a>timer_timeouts_check</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, app_timer.o(i.timer_timeouts_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = timer_timeouts_check
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC1_IRQHandler
</UL>

<P><STRONG><a name="[13b]"></a>user_op_alloc</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, app_timer.o(i.user_op_alloc))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_stop_op_schedule
</UL>

<P><STRONG><a name="[1cb]"></a>delete_execute</STRONG> (Thumb, 126 bytes, Stack size 40 bytes, fds.o(i.delete_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = delete_execute &rArr; record_header_flag_dirty &rArr; nrf_fstorage_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_header_flag_dirty
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_by_desc
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>

<P><STRONG><a name="[36e]"></a>event_prepare</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, fds.o(i.event_prepare))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = event_prepare
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>

<P><STRONG><a name="[203]"></a>event_send</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, fds.o(i.event_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = event_send
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_init
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>

<P><STRONG><a name="[2]"></a>fs_event_handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fds.o(i.fs_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = fs_event_handler &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fds.o(fs_data)
</UL>
<P><STRONG><a name="[21f]"></a>gc_execute</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, fds.o(i.gc_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_tag_write_swap
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_tag_write_data
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_state_advance
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_record_find_next
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_record_copy
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_page_erase
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_next_page
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>

<P><STRONG><a name="[221]"></a>gc_next_page</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, fds.o(i.gc_next_page))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_record_find_next
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute
</UL>

<P><STRONG><a name="[224]"></a>gc_page_erase</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, fds.o(i.gc_page_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gc_page_erase &rArr; nrf_fstorage_erase
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_record_find_next
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute
</UL>

<P><STRONG><a name="[223]"></a>gc_record_copy</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, fds.o(i.gc_record_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = gc_record_copy &rArr; nrf_fstorage_write
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_write
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_record_find_next
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute
</UL>

<P><STRONG><a name="[222]"></a>gc_record_find_next</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, fds.o(i.gc_record_find_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_next
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_record_copy
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_page_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_next_page
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute
</UL>

<P><STRONG><a name="[220]"></a>gc_state_advance</STRONG> (Thumb, 124 bytes, Stack size 20 bytes, fds.o(i.gc_state_advance))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = gc_state_advance
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute
</UL>

<P><STRONG><a name="[32b]"></a>header_check</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fds.o(i.header_check))
<BR><BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_next
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_scan
</UL>

<P><STRONG><a name="[32c]"></a>header_has_next</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fds.o(i.header_has_next))
<BR><BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_next
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_scan
</UL>

<P><STRONG><a name="[262]"></a>init_execute</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, fds.o(i.init_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = init_execute &rArr; page_tag_write_swap &rArr; nrf_fstorage_write
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_erase
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_tag_write_swap
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_tag_write_data
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>

<P><STRONG><a name="[371]"></a>is_word_aligned</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fds.o(i.is_word_aligned))
<BR><BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_enqueue
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_by_desc
</UL>

<P><STRONG><a name="[2af]"></a>nrf_atomic_u32_add</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, fds.o(i.nrf_atomic_u32_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_atomic_u32_add
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___5_fds_c_m_fs__nrf_atomic_internal_add
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_enqueue
</UL>

<P><STRONG><a name="[32d]"></a>page_identify</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fds.o(i.page_identify))
<BR><BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pages_init
</UL>

<P><STRONG><a name="[3aa]"></a>page_offsets_update</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fds.o(i.page_offsets_update))
<BR><BR>[Called By]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_execute
</UL>

<P><STRONG><a name="[32a]"></a>page_scan</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, fds.o(i.page_scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = page_scan
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;header_has_next
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;header_check
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pages_init
</UL>

<P><STRONG><a name="[225]"></a>page_tag_write_data</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, fds.o(i.page_tag_write_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = page_tag_write_data &rArr; nrf_fstorage_write
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_write
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_execute
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute
</UL>

<P><STRONG><a name="[226]"></a>page_tag_write_swap</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, fds.o(i.page_tag_write_swap))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = page_tag_write_swap &rArr; nrf_fstorage_write
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_write
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_execute
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute
</UL>

<P><STRONG><a name="[207]"></a>pages_init</STRONG> (Thumb, 278 bytes, Stack size 40 bytes, fds.o(i.pages_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pages_init &rArr; page_scan
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_scan
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_identify
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_init
</UL>

<P><STRONG><a name="[1fe]"></a>queue_buf_get</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fds.o(i.queue_buf_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = queue_buf_get &rArr; nrf_atfifo_item_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_alloc
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_gc
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_init
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_file_delete
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_enqueue
</UL>

<P><STRONG><a name="[1ff]"></a>queue_buf_store</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fds.o(i.queue_buf_store))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = queue_buf_store &rArr; nrf_atfifo_item_put
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_put
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_gc
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_init
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_file_delete
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_enqueue
</UL>

<P><STRONG><a name="[21b]"></a>queue_process</STRONG> (Thumb, 158 bytes, Stack size 48 bytes, fds.o(i.queue_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_get
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_free
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___5_fds_c_m_fs__nrf_atomic_internal_sub
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_execute
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_execute
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_send
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_prepare
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_execute
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_start
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_event_handler
</UL>

<P><STRONG><a name="[200]"></a>queue_start</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, fds.o(i.queue_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = queue_start &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___5_fds_c_m_fs__nrf_atomic_internal_add
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_gc
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_init
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_file_delete
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_enqueue
</UL>

<P><STRONG><a name="[1ce]"></a>record_find</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, fds.o(i.record_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = record_find &rArr; record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_next
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_find_in_file
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_find_by_key
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_find
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_execute
</UL>

<P><STRONG><a name="[1cc]"></a>record_find_by_desc</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, fds.o(i.record_find_by_desc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = record_find_by_desc &rArr; record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_next
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_word_aligned
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_open
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_close
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_execute
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_execute
</UL>

<P><STRONG><a name="[229]"></a>record_find_next</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, fds.o(i.record_find_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;header_has_next
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;header_check
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_by_desc
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_record_find_next
</UL>

<P><STRONG><a name="[1cd]"></a>record_header_flag_dirty</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, fds.o(i.record_header_flag_dirty))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = record_header_flag_dirty &rArr; nrf_fstorage_write
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_write
</UL>
<BR>[Called By]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_execute
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_execute
</UL>

<P><STRONG><a name="[20f]"></a>write_enqueue</STRONG> (Thumb, 222 bytes, Stack size 40 bytes, fds.o(i.write_enqueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = write_enqueue &rArr; queue_start &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_space_reserve
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_space_free
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_start
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_buf_store
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_buf_get
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_add
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_word_aligned
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_write_reserved
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_write
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_update
</UL>

<P><STRONG><a name="[36d]"></a>write_execute</STRONG> (Thumb, 228 bytes, Stack size 24 bytes, fds.o(i.write_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = write_execute &rArr; record_header_flag_dirty &rArr; nrf_fstorage_write
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_write
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_header_flag_dirty
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_by_desc
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_offsets_update
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>

<P><STRONG><a name="[216]"></a>write_space_free</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, fds.o(i.write_space_free))
<BR><BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_reserve_cancel
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_enqueue
</UL>

<P><STRONG><a name="[214]"></a>write_space_reserve</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, fds.o(i.write_space_reserve))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = write_space_reserve
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_reserve
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_enqueue
</UL>

<P><STRONG><a name="[1bd]"></a>buffer_add</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, nrf_fprintf_format.o(i.buffer_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = buffer_add &rArr; nrf_fprintf_buffer_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_buffer_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned_print
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_print
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_fmt
</UL>

<P><STRONG><a name="[263]"></a>int_print</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, nrf_fprintf_format.o(i.int_print))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = int_print &rArr; unsigned_print &rArr; buffer_add &rArr; nrf_fprintf_buffer_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned_print
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_add
</UL>
<BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_fmt
</UL>

<P><STRONG><a name="[264]"></a>unsigned_print</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, nrf_fprintf_format.o(i.unsigned_print))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = unsigned_print &rArr; buffer_add &rArr; nrf_fprintf_buffer_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_add
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_print
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_fmt
</UL>

<P><STRONG><a name="[2f4]"></a>addr_is_aligned32</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrf_fstorage.o(i.addr_is_aligned32))
<BR><BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_write
</UL>

<P><STRONG><a name="[2f1]"></a>addr_within_bounds</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, nrf_fstorage.o(i.addr_within_bounds))
<BR><BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_write
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_erase
</UL>

<P><STRONG><a name="[74]"></a>erase</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, nrf_fstorage_sd.o(i.erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = erase &rArr; queue_start &rArr; queue_process &rArr; nrf_fstorage_sys_evt_handler &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_start
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_put
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_alloc
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_fstorage_sd.o(.constdata)
</UL>
<P><STRONG><a name="[1f5]"></a>event_send</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, nrf_fstorage_sd.o(i.event_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = event_send
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_sys_evt_handler
</UL>

<P><STRONG><a name="[70]"></a>init</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, nrf_fstorage_sd.o(i.init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = init &rArr; nrf_atfifo_init
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_is_enabled
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_init
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___17_nrf_fstorage_sd_c_6e7dbfe9__nrf_atomic_internal_orr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_fstorage_sd.o(.constdata)
</UL>
<P><STRONG><a name="[77]"></a>is_busy</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrf_fstorage_sd.o(i.is_busy))
<BR>[Address Reference Count : 1]<UL><LI> nrf_fstorage_sd.o(.constdata)
</UL>
<P><STRONG><a name="[2f2]"></a>queue_process</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, nrf_fstorage_sd.o(i.queue_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = queue_process &rArr; nrf_fstorage_sys_evt_handler &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_send
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_get
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_sys_evt_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_start
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_sys_evt_handler
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_sdh_state_handler
</UL>

<P><STRONG><a name="[1f4]"></a>queue_start</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, nrf_fstorage_sd.o(i.queue_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = queue_start &rArr; queue_process &rArr; nrf_fstorage_sys_evt_handler &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___17_nrf_fstorage_sd_c_6e7dbfe9__nrf_atomic_internal_mov
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase
</UL>

<P><STRONG><a name="[72]"></a>read</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrf_fstorage_sd.o(i.read))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = read &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_fstorage_sd.o(.constdata)
</UL>
<P><STRONG><a name="[75]"></a>rmap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, nrf_fstorage_sd.o(i.rmap))
<BR>[Address Reference Count : 1]<UL><LI> nrf_fstorage_sd.o(.constdata)
</UL>
<P><STRONG><a name="[71]"></a>uninit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, nrf_fstorage_sd.o(i.uninit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uninit &rArr; nrf_atfifo_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_clear
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_fstorage_sd.o(.constdata)
</UL>
<P><STRONG><a name="[76]"></a>wmap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, nrf_fstorage_sd.o(i.wmap))
<BR>[Address Reference Count : 1]<UL><LI> nrf_fstorage_sd.o(.constdata)
</UL>
<P><STRONG><a name="[73]"></a>write</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, nrf_fstorage_sd.o(i.write))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = write &rArr; queue_start &rArr; queue_process &rArr; nrf_fstorage_sys_evt_handler &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_start
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_put
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_alloc
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_fstorage_sd.o(.constdata)
</UL>
<P><STRONG><a name="[2a3]"></a>memobj_op</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, nrf_memobj.o(i.memobj_op))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = memobj_op &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_write
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_read
</UL>

<P><STRONG><a name="[57]"></a>nrf_pwr_mgmt_timeout_handler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nrf_pwr_mgmt.o(i.nrf_pwr_mgmt_timeout_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = nrf_pwr_mgmt_timeout_handler &rArr; nrf_pwr_mgmt_shutdown &rArr; shutdown_process &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pwr_mgmt_shutdown
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_pwr_mgmt.o(i.nrf_pwr_mgmt_init)
</UL>
<P><STRONG><a name="[30f]"></a>shutdown_process</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, nrf_pwr_mgmt.o(i.shutdown_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = shutdown_process &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_is_enabled
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_panic
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_next
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pwr_mgmt_shutdown
</UL>

<P><STRONG><a name="[31f]"></a>nrf_section_iter_item_set</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, nrf_section_iter.o(i.nrf_section_iter_item_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_section_iter_item_set
</UL>
<BR>[Called By]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_next
</UL>

<P><STRONG><a name="[379]"></a>sdk_mapped_flags_get_by_index</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sdk_mapped_flags.o(i.sdk_mapped_flags_get_by_index))
<BR><BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_key_list_get
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_get_by_key
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_first_key_index_get
</UL>

<P><STRONG><a name="[312]"></a>nrf_queue_next_idx</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrf_queue.o(i.nrf_queue_next_idx))
<BR><BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_push
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_is_full
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_generic_pop
</UL>

<P><STRONG><a name="[315]"></a>queue_utilization_get</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, nrf_queue.o(i.queue_utilization_get))
<BR><BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_push
</UL>

<P><STRONG><a name="[59]"></a>spi_event_handler</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, nrf_spi_mngr.o(i.spi_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = spi_event_handler &rArr; start_pending_transaction &rArr; nrf_drv_spi_init &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transaction_end_signal
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_transfer
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_pending_transaction
</UL>
<BR>[Address Reference Count : 2]<UL><LI> nrf_spi_mngr.o(i.start_pending_transaction)
<LI> nrf_spi_mngr.o(i.nrf_spi_mngr_init)
</UL>
<P><STRONG><a name="[78]"></a>spi_internal_transaction_cb</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_spi_mngr.o(i.spi_internal_transaction_cb))
<BR>[Address Reference Count : 1]<UL><LI> nrf_spi_mngr.o(.constdata)
</UL>
<P><STRONG><a name="[321]"></a>start_pending_transaction</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, nrf_spi_mngr.o(i.start_pending_transaction))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = start_pending_transaction &rArr; nrf_drv_spi_init &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_uninit
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_init
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transaction_end_signal
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_transfer
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_generic_pop
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_spi_mngr_schedule
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_event_handler
</UL>

<P><STRONG><a name="[384]"></a>start_transfer</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, nrf_spi_mngr.o(i.start_transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = start_transfer &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_pending_transaction
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_event_handler
</UL>

<P><STRONG><a name="[383]"></a>transaction_end_signal</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, nrf_spi_mngr.o(i.transaction_end_signal))
<BR><BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_pending_transaction
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_event_handler
</UL>

<P><STRONG><a name="[79]"></a>internal_transaction_cb</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrf_twi_mngr.o(i.internal_transaction_cb))
<BR>[Address Reference Count : 1]<UL><LI> nrf_twi_mngr.o(.constdata)
</UL>
<P><STRONG><a name="[325]"></a>nrf_delay_us</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, nrf_twi_mngr.o(i.nrf_delay_us))
<BR><BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twi_mngr_perform
</UL>

<P><STRONG><a name="[326]"></a>start_pending_transaction</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, nrf_twi_mngr.o(i.start_pending_transaction))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = start_pending_transaction &rArr; start_transfer &rArr; nrf_drv_twi_xfer &rArr; twim_xfer &rArr; nrf_twim_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_uninit
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_init
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_enable
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transaction_end_signal
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_transfer
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_generic_pop
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twi_mngr_schedule
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_event_handler
</UL>

<P><STRONG><a name="[391]"></a>start_transfer</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, nrf_twi_mngr.o(i.start_transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = start_transfer &rArr; nrf_drv_twi_xfer &rArr; twim_xfer &rArr; nrf_twim_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_event_handler
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_pending_transaction
</UL>

<P><STRONG><a name="[392]"></a>transaction_end_signal</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_twi_mngr.o(i.transaction_end_signal))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_event_handler
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_pending_transaction
</UL>

<P><STRONG><a name="[5a]"></a>twi_event_handler</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, nrf_twi_mngr.o(i.twi_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = twi_event_handler &rArr; start_pending_transaction &rArr; start_transfer &rArr; nrf_drv_twi_xfer &rArr; twim_xfer &rArr; nrf_twim_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transaction_end_signal
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_transfer
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_pending_transaction
</UL>
<BR>[Address Reference Count : 2]<UL><LI> nrf_twi_mngr.o(i.nrf_twi_mngr_init)
<LI> nrf_twi_mngr.o(i.start_pending_transaction)
</UL>
<P><STRONG><a name="[7c]"></a>nrf_log_backend_rtt_flush</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, nrf_log_backend_rtt.o(i.nrf_log_backend_rtt_flush))
<BR>[Address Reference Count : 1]<UL><LI> nrf_log_backend_rtt.o(.constdata)
</UL>
<P><STRONG><a name="[7b]"></a>nrf_log_backend_rtt_panic_set</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, nrf_log_backend_rtt.o(i.nrf_log_backend_rtt_panic_set))
<BR>[Address Reference Count : 1]<UL><LI> nrf_log_backend_rtt.o(.constdata)
</UL>
<P><STRONG><a name="[7a]"></a>nrf_log_backend_rtt_put</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, nrf_log_backend_rtt.o(i.nrf_log_backend_rtt_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = nrf_log_backend_rtt_put &rArr; nrf_log_backend_serial_put &rArr; nrf_log_std_entry_process &rArr; prefix_process &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr; nrf_fprintf_buffer_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_put
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_log_backend_rtt.o(.constdata)
</UL>
<P><STRONG><a name="[56]"></a>serial_tx</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, nrf_log_backend_rtt.o(i.serial_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = serial_tx &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_log_backend_rtt.o(i.nrf_log_backend_rtt_put)
</UL>
<P><STRONG><a name="[1bb]"></a>buf_prealloc</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, nrf_log_frontend.o(i.buf_prealloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = buf_prealloc &rArr; log_skip &rArr; nrf_atomic_flag_set
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_skip
</UL>
<BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_hexdump
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_n
</UL>

<P><STRONG><a name="[1bc]"></a>log_skip</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, nrf_log_frontend.o(i.log_skip))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = log_skip &rArr; nrf_atomic_flag_set
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___18_nrf_log_frontend_c_bc460776__nrf_atomic_internal_and
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_flag_set
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_prealloc
</UL>

<P><STRONG><a name="[2a4]"></a>module_idx_get</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, nrf_log_frontend.o(i.module_idx_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = module_idx_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_module_cnt_get
</UL>
<BR>[Called By]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_module_name_get
</UL>

<P><STRONG><a name="[274]"></a>nrf_atomic_flag_set</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrf_log_frontend.o(i.nrf_atomic_flag_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_atomic_flag_set
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___18_nrf_log_frontend_c_bc460776__nrf_atomic_internal_orr
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_skip
</UL>

<P><STRONG><a name="[301]"></a>std_n</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, nrf_log_frontend.o(i.std_n))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_prealloc
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_6
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_3
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_5
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_4
</UL>

<P><STRONG><a name="[306]"></a>postfix_process</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, nrf_log_str_formatter.o(i.postfix_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = postfix_process &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr; nrf_fprintf_buffer_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_buffer_flush
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_std_entry_process
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_hexdump_entry_process
</UL>

<P><STRONG><a name="[304]"></a>prefix_process</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, nrf_log_str_formatter.o(i.prefix_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = prefix_process &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr; nrf_fprintf_buffer_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_module_name_get
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_color_id_get
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_std_entry_process
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_hexdump_entry_process
</UL>

<P><STRONG><a name="[bc]"></a>_DoInit</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, segger_rtt.o(i._DoInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _DoInit
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Init
</UL>

<P><STRONG><a name="[be]"></a>_GetAvailWriteSpace</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, segger_rtt.o(i._GetAvailWriteSpace))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
</UL>

<P><STRONG><a name="[c0]"></a>_WriteBlocking</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, segger_rtt.o(i._WriteBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _WriteBlocking &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
</UL>

<P><STRONG><a name="[bf]"></a>_WriteNoCheck</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, segger_rtt.o(i._WriteNoCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _WriteNoCheck &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
</UL>

<P><STRONG><a name="[377]"></a>__sd_nvic_app_accessible_irq</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, nrf_sdh.o(i.__sd_nvic_app_accessible_irq))
<BR><BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevices_evt_irq_enable
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_evt_irq_disable
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_nvic_SetPriority
</UL>

<P><STRONG><a name="[378]"></a>__sd_nvic_is_app_accessible_priority</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, nrf_sdh.o(i.__sd_nvic_is_app_accessible_priority))
<BR><BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevices_evt_irq_enable
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_nvic_SetPriority
</UL>

<P><STRONG><a name="[31d]"></a>sd_nvic_SetPriority</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, nrf_sdh.o(i.sd_nvic_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sd_nvic_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sd_nvic_is_app_accessible_priority
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sd_nvic_app_accessible_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_enable_request
</UL>

<P><STRONG><a name="[31a]"></a>sdh_request_observer_notify</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, nrf_sdh.o(i.sdh_request_observer_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sdh_request_observer_notify &rArr; nrf_section_iter_next &rArr; nrf_section_iter_item_set
</UL>
<BR>[Calls]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_next
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_init
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_enable_request
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_disable_request
</UL>

<P><STRONG><a name="[31b]"></a>sdh_state_observer_notify</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, nrf_sdh.o(i.sdh_state_observer_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sdh_state_observer_notify &rArr; nrf_section_iter_next &rArr; nrf_section_iter_item_set
</UL>
<BR>[Calls]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_next
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_init
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_enable_request
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_disable_request
</UL>

<P><STRONG><a name="[31c]"></a>softdevice_evt_irq_disable</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, nrf_sdh.o(i.softdevice_evt_irq_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = softdevice_evt_irq_disable &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sd_nvic_app_accessible_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_disable_request
</UL>

<P><STRONG><a name="[31e]"></a>softdevices_evt_irq_enable</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, nrf_sdh.o(i.softdevices_evt_irq_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = softdevices_evt_irq_enable &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sd_nvic_is_app_accessible_priority
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sd_nvic_app_accessible_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_enable_request
</UL>

<P><STRONG><a name="[8f]"></a>nrf_sdh_ble_evts_poll</STRONG> (Thumb, 70 bytes, Stack size 88 bytes, nrf_sdh_ble.o(i.nrf_sdh_ble_evts_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = nrf_sdh_ble_evts_poll &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_next
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_sdh_ble.o(sdh_stack_observers0)
</UL>
<P><STRONG><a name="[90]"></a>nrf_sdh_soc_evts_poll</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, nrf_sdh_soc.o(i.nrf_sdh_soc_evts_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = nrf_sdh_soc_evts_poll &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_next
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_sdh_soc.o(sdh_stack_observers0)
</UL>
<P><STRONG><a name="[14a]"></a>nrf_delay_us</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, at45db081e.o(i.nrf_delay_us))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at45dbxx_is_available
</UL>

<P><STRONG><a name="[1b2]"></a>check_accel_config</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, bmi160.o(i.check_accel_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = check_accel_config &rArr; bmi160_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_get_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_set_sens_conf
</UL>

<P><STRONG><a name="[1b3]"></a>check_gyro_config</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, bmi160.o(i.check_gyro_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = check_gyro_config &rArr; bmi160_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_get_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_set_sens_conf
</UL>

<P><STRONG><a name="[1a3]"></a>get_accel_data</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, bmi160.o(i.get_accel_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = get_accel_data &rArr; bmi160_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_get_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_get_sensor_data
</UL>

<P><STRONG><a name="[1a5]"></a>get_accel_gyro_data</STRONG> (Thumb, 162 bytes, Stack size 40 bytes, bmi160.o(i.get_accel_gyro_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = get_accel_gyro_data &rArr; bmi160_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_get_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_get_sensor_data
</UL>

<P><STRONG><a name="[1a4]"></a>get_gyro_data</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, bmi160.o(i.get_gyro_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = get_gyro_data &rArr; bmi160_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_get_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_get_sensor_data
</UL>

<P><STRONG><a name="[1a9]"></a>nrf_delay_us</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, bmi160.o(i.nrf_delay_us))
<BR><BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_init
</UL>

<P><STRONG><a name="[1a7]"></a>null_ptr_check</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, bmi160.o(i.null_ptr_check))
<BR><BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_read_step_counter
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_init
</UL>

<P><STRONG><a name="[1af]"></a>process_under_sampling</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, bmi160.o(i.process_under_sampling))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = process_under_sampling &rArr; bmi160_set_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_set_regs
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_get_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_set_power_mode
</UL>

<P><STRONG><a name="[50]"></a>nrf_delay_ms</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_drv_spi_bmi_flash.o(i.nrf_delay_ms))
<BR><BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_us
</UL>
<BR>[Address Reference Count : 2]<UL><LI> nrf_drv_spi_bmi_flash.o(i.nrf_drv_bmi160_spi_int)
<LI> nrf_drv_spi_bmi_flash.o(i.nrf_drv_flash_spi_init)
</UL>
<P><STRONG><a name="[2b8]"></a>nrf_delay_us</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, nrf_drv_spi_bmi_flash.o(i.nrf_delay_us))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
</UL>

<P><STRONG><a name="[2c5]"></a>nrf_gpio_cfg</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, nrf_drv_spi_bmi_flash.o(i.nrf_gpio_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_a2_spi_deinit
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
</UL>

<P><STRONG><a name="[2c4]"></a>nrf_gpio_cfg_output</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, nrf_drv_spi_bmi_flash.o(i.nrf_gpio_cfg_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_flash_spi_init
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_bmi160_spi_int
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_bmi160_power_off
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_bmi160_power_and_cs_init
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_a2_spi_deinit
</UL>

<P><STRONG><a name="[1a0]"></a>nrf_gpio_pin_clear</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrf_drv_spi_bmi_flash.o(i.nrf_gpio_pin_clear))
<BR><BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_bmi160_spi_int
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_bmi160_power_and_cs_init
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_clear_flash_cs_pin
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_clear_bmi160_cs_pin
</UL>

<P><STRONG><a name="[1ac]"></a>nrf_gpio_pin_set</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrf_drv_spi_bmi_flash.o(i.nrf_gpio_pin_set))
<BR><BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_flash_spi_init
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_bmi160_spi_int
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_bmi160_power_off
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_a2_spi_deinit
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_set_flash_cs_pin
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_set_bmi160_cs_pin
</UL>

<P><STRONG><a name="[53]"></a>nrf_delay_ms</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_drv_i2c_max_temp.o(i.nrf_delay_ms))
<BR><BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_us
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_drv_i2c_max_temp.o(i.nrf_drv_max30102_reg_i2c_func)
</UL>
<P><STRONG><a name="[2b9]"></a>nrf_delay_us</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, nrf_drv_i2c_max_temp.o(i.nrf_delay_us))
<BR><BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_i2c_max30102_shutdown
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
</UL>

<P><STRONG><a name="[2bf]"></a>nrf_gpio_cfg_output</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nrf_drv_i2c_max_temp.o(i.nrf_gpio_cfg_output))
<BR><BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_max30102_reg_i2c_func
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_i2c_max30102_shutdown
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_a2_i2c_1_deinit
</UL>

<P><STRONG><a name="[2c0]"></a>nrf_gpio_pin_set</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrf_drv_i2c_max_temp.o(i.nrf_gpio_pin_set))
<BR><BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_max30102_reg_i2c_func
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_a2_i2c_1_deinit
</UL>

<P><STRONG><a name="[4b]"></a>nrf_delay_ms</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_drv_ssd1306.o(i.nrf_delay_ms))
<BR><BR>[Calls]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_us
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_drv_ssd1306.o(i.nrf_drv_a2_oled_init)
</UL>
<P><STRONG><a name="[2ba]"></a>nrf_delay_us</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, nrf_drv_ssd1306.o(i.nrf_delay_us))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_a2_oled_init
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
</UL>

<P><STRONG><a name="[2bd]"></a>nrf_gpio_cfg_output</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nrf_drv_ssd1306.o(i.nrf_gpio_cfg_output))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_a2_oled_init
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_a2_i2c_0_deinit
</UL>

<P><STRONG><a name="[387]"></a>nrf_delay_us</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, ssd1306.o(i.nrf_delay_us))
<BR><BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_begin
</UL>

<P><STRONG><a name="[386]"></a>nrf_gpio_pin_set</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ssd1306.o(i.nrf_gpio_pin_set))
<BR><BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_begin
</UL>

<P><STRONG><a name="[241]"></a>nrf_delay_ms</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, heart_rate_cal.o(i.nrf_delay_ms))
<BR><BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spo2_cal
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heart_rate_cal_v3
</UL>

<P><STRONG><a name="[2bb]"></a>nrf_delay_us</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, heart_rate_cal.o(i.nrf_delay_us))
<BR><BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
</UL>

<P><STRONG><a name="[d2]"></a>_printf_core</STRONG> (Thumb, 748 bytes, Stack size 96 bytes, printf6.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$6
</UL>

<P><STRONG><a name="[e0]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printf6.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[de]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printf6.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[35]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printf6.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$6
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf6.o(i.__0sprintf$6)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
